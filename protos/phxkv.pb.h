// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxkv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phxkv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phxkv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phxkv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phxkv_2eproto;
namespace phxkv {
class BemasterReq;
class BemasterReqDefaultTypeInternal;
extern BemasterReqDefaultTypeInternal _BemasterReq_default_instance_;
class BemasterRes;
class BemasterResDefaultTypeInternal;
extern BemasterResDefaultTypeInternal _BemasterRes_default_instance_;
class DropMastReq;
class DropMastReqDefaultTypeInternal;
extern DropMastReqDefaultTypeInternal _DropMastReq_default_instance_;
class DropMastRes;
class DropMastResDefaultTypeInternal;
extern DropMastResDefaultTypeInternal _DropMastRes_default_instance_;
class GroupListReq;
class GroupListReqDefaultTypeInternal;
extern GroupListReqDefaultTypeInternal _GroupListReq_default_instance_;
class GroupListRes;
class GroupListResDefaultTypeInternal;
extern GroupListResDefaultTypeInternal _GroupListRes_default_instance_;
class GroupMsg;
class GroupMsgDefaultTypeInternal;
extern GroupMsgDefaultTypeInternal _GroupMsg_default_instance_;
class GroupsMapMsg;
class GroupsMapMsgDefaultTypeInternal;
extern GroupsMapMsgDefaultTypeInternal _GroupsMapMsg_default_instance_;
class HashField;
class HashFieldDefaultTypeInternal;
extern HashFieldDefaultTypeInternal _HashField_default_instance_;
class HashRequest;
class HashRequestDefaultTypeInternal;
extern HashRequestDefaultTypeInternal _HashRequest_default_instance_;
class HashResponse;
class HashResponseDefaultTypeInternal;
extern HashResponseDefaultTypeInternal _HashResponse_default_instance_;
class KVMessage;
class KVMessageDefaultTypeInternal;
extern KVMessageDefaultTypeInternal _KVMessage_default_instance_;
class KVOperator;
class KVOperatorDefaultTypeInternal;
extern KVOperatorDefaultTypeInternal _KVOperator_default_instance_;
class KVResponse;
class KVResponseDefaultTypeInternal;
extern KVResponseDefaultTypeInternal _KVResponse_default_instance_;
class KvBatchGetRequest;
class KvBatchGetRequestDefaultTypeInternal;
extern KvBatchGetRequestDefaultTypeInternal _KvBatchGetRequest_default_instance_;
class KvBatchGetResponse;
class KvBatchGetResponseDefaultTypeInternal;
extern KvBatchGetResponseDefaultTypeInternal _KvBatchGetResponse_default_instance_;
class KvBatchGetSubRequest;
class KvBatchGetSubRequestDefaultTypeInternal;
extern KvBatchGetSubRequestDefaultTypeInternal _KvBatchGetSubRequest_default_instance_;
class KvBatchGetSubResponse;
class KvBatchGetSubResponseDefaultTypeInternal;
extern KvBatchGetSubResponseDefaultTypeInternal _KvBatchGetSubResponse_default_instance_;
class KvBatchPutRequest;
class KvBatchPutRequestDefaultTypeInternal;
extern KvBatchPutRequestDefaultTypeInternal _KvBatchPutRequest_default_instance_;
class KvBatchPutResponse;
class KvBatchPutResponseDefaultTypeInternal;
extern KvBatchPutResponseDefaultTypeInternal _KvBatchPutResponse_default_instance_;
class KvBatchPutSubRequest;
class KvBatchPutSubRequestDefaultTypeInternal;
extern KvBatchPutSubRequestDefaultTypeInternal _KvBatchPutSubRequest_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetRequest;
class SetRequestDefaultTypeInternal;
extern SetRequestDefaultTypeInternal _SetRequest_default_instance_;
class SetResponse;
class SetResponseDefaultTypeInternal;
extern SetResponseDefaultTypeInternal _SetResponse_default_instance_;
class ZsetField;
class ZsetFieldDefaultTypeInternal;
extern ZsetFieldDefaultTypeInternal _ZsetField_default_instance_;
class ZsetRequest;
class ZsetRequestDefaultTypeInternal;
extern ZsetRequestDefaultTypeInternal _ZsetRequest_default_instance_;
class ZsetResponse;
class ZsetResponseDefaultTypeInternal;
extern ZsetResponseDefaultTypeInternal _ZsetResponse_default_instance_;
}  // namespace phxkv
PROTOBUF_NAMESPACE_OPEN
template<> ::phxkv::BemasterReq* Arena::CreateMaybeMessage<::phxkv::BemasterReq>(Arena*);
template<> ::phxkv::BemasterRes* Arena::CreateMaybeMessage<::phxkv::BemasterRes>(Arena*);
template<> ::phxkv::DropMastReq* Arena::CreateMaybeMessage<::phxkv::DropMastReq>(Arena*);
template<> ::phxkv::DropMastRes* Arena::CreateMaybeMessage<::phxkv::DropMastRes>(Arena*);
template<> ::phxkv::GroupListReq* Arena::CreateMaybeMessage<::phxkv::GroupListReq>(Arena*);
template<> ::phxkv::GroupListRes* Arena::CreateMaybeMessage<::phxkv::GroupListRes>(Arena*);
template<> ::phxkv::GroupMsg* Arena::CreateMaybeMessage<::phxkv::GroupMsg>(Arena*);
template<> ::phxkv::GroupsMapMsg* Arena::CreateMaybeMessage<::phxkv::GroupsMapMsg>(Arena*);
template<> ::phxkv::HashField* Arena::CreateMaybeMessage<::phxkv::HashField>(Arena*);
template<> ::phxkv::HashRequest* Arena::CreateMaybeMessage<::phxkv::HashRequest>(Arena*);
template<> ::phxkv::HashResponse* Arena::CreateMaybeMessage<::phxkv::HashResponse>(Arena*);
template<> ::phxkv::KVMessage* Arena::CreateMaybeMessage<::phxkv::KVMessage>(Arena*);
template<> ::phxkv::KVOperator* Arena::CreateMaybeMessage<::phxkv::KVOperator>(Arena*);
template<> ::phxkv::KVResponse* Arena::CreateMaybeMessage<::phxkv::KVResponse>(Arena*);
template<> ::phxkv::KvBatchGetRequest* Arena::CreateMaybeMessage<::phxkv::KvBatchGetRequest>(Arena*);
template<> ::phxkv::KvBatchGetResponse* Arena::CreateMaybeMessage<::phxkv::KvBatchGetResponse>(Arena*);
template<> ::phxkv::KvBatchGetSubRequest* Arena::CreateMaybeMessage<::phxkv::KvBatchGetSubRequest>(Arena*);
template<> ::phxkv::KvBatchGetSubResponse* Arena::CreateMaybeMessage<::phxkv::KvBatchGetSubResponse>(Arena*);
template<> ::phxkv::KvBatchPutRequest* Arena::CreateMaybeMessage<::phxkv::KvBatchPutRequest>(Arena*);
template<> ::phxkv::KvBatchPutResponse* Arena::CreateMaybeMessage<::phxkv::KvBatchPutResponse>(Arena*);
template<> ::phxkv::KvBatchPutSubRequest* Arena::CreateMaybeMessage<::phxkv::KvBatchPutSubRequest>(Arena*);
template<> ::phxkv::ListRequest* Arena::CreateMaybeMessage<::phxkv::ListRequest>(Arena*);
template<> ::phxkv::ListResponse* Arena::CreateMaybeMessage<::phxkv::ListResponse>(Arena*);
template<> ::phxkv::Request* Arena::CreateMaybeMessage<::phxkv::Request>(Arena*);
template<> ::phxkv::Response* Arena::CreateMaybeMessage<::phxkv::Response>(Arena*);
template<> ::phxkv::SetRequest* Arena::CreateMaybeMessage<::phxkv::SetRequest>(Arena*);
template<> ::phxkv::SetResponse* Arena::CreateMaybeMessage<::phxkv::SetResponse>(Arena*);
template<> ::phxkv::ZsetField* Arena::CreateMaybeMessage<::phxkv::ZsetField>(Arena*);
template<> ::phxkv::ZsetRequest* Arena::CreateMaybeMessage<::phxkv::ZsetRequest>(Arena*);
template<> ::phxkv::ZsetResponse* Arena::CreateMaybeMessage<::phxkv::ZsetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phxkv {

enum KVMessage_Type : int {
  KVMessage_Type_SingleMsg = 0,
  KVMessage_Type_BatchMsg = 1,
  KVMessage_Type_RequestMsg = 2,
  KVMessage_Type_KVMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KVMessage_Type_KVMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KVMessage_Type_IsValid(int value);
constexpr KVMessage_Type KVMessage_Type_Type_MIN = KVMessage_Type_SingleMsg;
constexpr KVMessage_Type KVMessage_Type_Type_MAX = KVMessage_Type_RequestMsg;
constexpr int KVMessage_Type_Type_ARRAYSIZE = KVMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVMessage_Type_descriptor();
template<typename T>
inline const std::string& KVMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KVMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KVMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KVMessage_Type_descriptor(), enum_t_value);
}
inline bool KVMessage_Type_Parse(
    const std::string& name, KVMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KVMessage_Type>(
    KVMessage_Type_descriptor(), name, value);
}
enum Request_req_type : int {
  Request_req_type_HASH_REQ = 0,
  Request_req_type_LIST_REQ = 1,
  Request_req_type_SET_REQ = 2,
  Request_req_type_ZSET_REQ = 3,
  Request_req_type_EXPIRE_REQ = 4,
  Request_req_type_DEL_KEY_REQ = 5,
  Request_req_type_Request_req_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_req_type_Request_req_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_req_type_IsValid(int value);
constexpr Request_req_type Request_req_type_req_type_MIN = Request_req_type_HASH_REQ;
constexpr Request_req_type Request_req_type_req_type_MAX = Request_req_type_DEL_KEY_REQ;
constexpr int Request_req_type_req_type_ARRAYSIZE = Request_req_type_req_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_req_type_descriptor();
template<typename T>
inline const std::string& Request_req_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_req_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_req_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_req_type_descriptor(), enum_t_value);
}
inline bool Request_req_type_Parse(
    const std::string& name, Request_req_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_req_type>(
    Request_req_type_descriptor(), name, value);
}
enum HashRequest_enum_req : int {
  HashRequest_enum_req_HASH_START = 0,
  HashRequest_enum_req_HASH_DEL = 1,
  HashRequest_enum_req_HASH_GET = 2,
  HashRequest_enum_req_HASH_GETALL = 3,
  HashRequest_enum_req_HASH_SET = 4,
  HashRequest_enum_req_HASH_EXISTS = 5,
  HashRequest_enum_req_HASH_INCR_INT = 6,
  HashRequest_enum_req_HASH_INCR_FLOAT = 7,
  HashRequest_enum_req_HASH_KEYS = 8,
  HashRequest_enum_req_HASH_LEN = 9,
  HashRequest_enum_req_HASH_MGET = 10,
  HashRequest_enum_req_HASH_MSET = 11,
  HashRequest_enum_req_HASH_SETNX = 12,
  HashRequest_enum_req_HASH_VALUES = 13,
  HashRequest_enum_req_HashRequest_enum_req_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HashRequest_enum_req_HashRequest_enum_req_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HashRequest_enum_req_IsValid(int value);
constexpr HashRequest_enum_req HashRequest_enum_req_enum_req_MIN = HashRequest_enum_req_HASH_START;
constexpr HashRequest_enum_req HashRequest_enum_req_enum_req_MAX = HashRequest_enum_req_HASH_VALUES;
constexpr int HashRequest_enum_req_enum_req_ARRAYSIZE = HashRequest_enum_req_enum_req_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashRequest_enum_req_descriptor();
template<typename T>
inline const std::string& HashRequest_enum_req_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HashRequest_enum_req>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HashRequest_enum_req_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HashRequest_enum_req_descriptor(), enum_t_value);
}
inline bool HashRequest_enum_req_Parse(
    const std::string& name, HashRequest_enum_req* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HashRequest_enum_req>(
    HashRequest_enum_req_descriptor(), name, value);
}
enum Response_enum_code : int {
  Response_enum_code_RES_SUCC = 0,
  Response_enum_code_RES_KEY_NOTEXIST = 1,
  Response_enum_code_RES_SERVER_BUSY = 2,
  Response_enum_code_PARAM_ERROR = 3,
  Response_enum_code_META_NOTEXIST = 4,
  Response_enum_code_ROCKSDB_ERR = 5,
  Response_enum_code_RES_KEY_EXISTS = 6,
  Response_enum_code_RES_MASTER_REDIRECT = 10,
  Response_enum_code_RES_NO_MASTER = 101,
  Response_enum_code_RES_ERR = -1,
  Response_enum_code_Response_enum_code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_enum_code_Response_enum_code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_enum_code_IsValid(int value);
constexpr Response_enum_code Response_enum_code_enum_code_MIN = Response_enum_code_RES_ERR;
constexpr Response_enum_code Response_enum_code_enum_code_MAX = Response_enum_code_RES_NO_MASTER;
constexpr int Response_enum_code_enum_code_ARRAYSIZE = Response_enum_code_enum_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_enum_code_descriptor();
template<typename T>
inline const std::string& Response_enum_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_enum_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_enum_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_enum_code_descriptor(), enum_t_value);
}
inline bool Response_enum_code_Parse(
    const std::string& name, Response_enum_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_enum_code>(
    Response_enum_code_descriptor(), name, value);
}
enum Response_response_type : int {
  Response_response_type_STRING_RES = 0,
  Response_response_type_HASH_RES = 1,
  Response_response_type_LIST_RES = 2,
  Response_response_type_SET_RES = 3,
  Response_response_type_ZSET_RES = 4,
  Response_response_type_Response_response_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_response_type_Response_response_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_response_type_IsValid(int value);
constexpr Response_response_type Response_response_type_response_type_MIN = Response_response_type_STRING_RES;
constexpr Response_response_type Response_response_type_response_type_MAX = Response_response_type_ZSET_RES;
constexpr int Response_response_type_response_type_ARRAYSIZE = Response_response_type_response_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_response_type_descriptor();
template<typename T>
inline const std::string& Response_response_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_response_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_response_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_response_type_descriptor(), enum_t_value);
}
inline bool Response_response_type_Parse(
    const std::string& name, Response_response_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_response_type>(
    Response_response_type_descriptor(), name, value);
}
enum ListRequest_enum_req : int {
  ListRequest_enum_req_LIST_LPOP = 0,
  ListRequest_enum_req_LIST_RPOP = 1,
  ListRequest_enum_req_LIST_RPOP_LPUSH = 2,
  ListRequest_enum_req_LIST_INDEX = 3,
  ListRequest_enum_req_LIST_INSERT = 4,
  ListRequest_enum_req_LIST_LENGTH = 5,
  ListRequest_enum_req_LIST_LPUSH = 6,
  ListRequest_enum_req_LIST_LPUSHX = 7,
  ListRequest_enum_req_LIST_RANGE = 8,
  ListRequest_enum_req_LIST_REM = 9,
  ListRequest_enum_req_LIST_RPUSH = 10,
  ListRequest_enum_req_LIST_RPUSHX = 11,
  ListRequest_enum_req_LIST_SET = 12,
  ListRequest_enum_req_LIST_TRIM = 13,
  ListRequest_enum_req_ListRequest_enum_req_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ListRequest_enum_req_ListRequest_enum_req_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ListRequest_enum_req_IsValid(int value);
constexpr ListRequest_enum_req ListRequest_enum_req_enum_req_MIN = ListRequest_enum_req_LIST_LPOP;
constexpr ListRequest_enum_req ListRequest_enum_req_enum_req_MAX = ListRequest_enum_req_LIST_TRIM;
constexpr int ListRequest_enum_req_enum_req_ARRAYSIZE = ListRequest_enum_req_enum_req_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListRequest_enum_req_descriptor();
template<typename T>
inline const std::string& ListRequest_enum_req_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListRequest_enum_req>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListRequest_enum_req_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListRequest_enum_req_descriptor(), enum_t_value);
}
inline bool ListRequest_enum_req_Parse(
    const std::string& name, ListRequest_enum_req* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListRequest_enum_req>(
    ListRequest_enum_req_descriptor(), name, value);
}
enum SetRequest_enum_req : int {
  SetRequest_enum_req_SET_ADD = 0,
  SetRequest_enum_req_SET_REM = 1,
  SetRequest_enum_req_SET_CARD = 2,
  SetRequest_enum_req_SET_MEMBERS = 3,
  SetRequest_enum_req_SET_UNONSTORE = 4,
  SetRequest_enum_req_SET_UNION = 5,
  SetRequest_enum_req_SET_INTERSTORE = 6,
  SetRequest_enum_req_SET_INTER = 7,
  SetRequest_enum_req_SET_DIFFSTORE = 8,
  SetRequest_enum_req_SET_DIFF = 9,
  SetRequest_enum_req_SET_ISMEMBER = 10,
  SetRequest_enum_req_SET_POP = 11,
  SetRequest_enum_req_SET_RANDMEMBER = 12,
  SetRequest_enum_req_SET_MOVE = 13,
  SetRequest_enum_req_SetRequest_enum_req_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetRequest_enum_req_SetRequest_enum_req_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetRequest_enum_req_IsValid(int value);
constexpr SetRequest_enum_req SetRequest_enum_req_enum_req_MIN = SetRequest_enum_req_SET_ADD;
constexpr SetRequest_enum_req SetRequest_enum_req_enum_req_MAX = SetRequest_enum_req_SET_MOVE;
constexpr int SetRequest_enum_req_enum_req_ARRAYSIZE = SetRequest_enum_req_enum_req_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRequest_enum_req_descriptor();
template<typename T>
inline const std::string& SetRequest_enum_req_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetRequest_enum_req>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetRequest_enum_req_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetRequest_enum_req_descriptor(), enum_t_value);
}
inline bool SetRequest_enum_req_Parse(
    const std::string& name, SetRequest_enum_req* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetRequest_enum_req>(
    SetRequest_enum_req_descriptor(), name, value);
}
enum ZsetRequest_enum_req : int {
  ZsetRequest_enum_req_ZSET_ADD = 0,
  ZsetRequest_enum_req_ZSET_CARD = 1,
  ZsetRequest_enum_req_ZSET_COUNT = 2,
  ZsetRequest_enum_req_ZSET_INCRBY = 3,
  ZsetRequest_enum_req_ZSET_RANGE = 4,
  ZsetRequest_enum_req_ZSET_UNIONSTORE = 5,
  ZsetRequest_enum_req_ZSET_INTERSTORE = 6,
  ZsetRequest_enum_req_ZSET_RANGEBYSCORE = 7,
  ZsetRequest_enum_req_ZSET_REM = 8,
  ZsetRequest_enum_req_ZSET_RANK = 9,
  ZsetRequest_enum_req_ZSET_REVRANK = 10,
  ZsetRequest_enum_req_ZSET_SCORE = 11,
  ZsetRequest_enum_req_ZSET_REVRANGE = 12,
  ZsetRequest_enum_req_ZSET_REVRANGEBYSCORE = 13,
  ZsetRequest_enum_req_ZSET_REM_RANGEBYRANK = 14,
  ZsetRequest_enum_req_ZSET_REM_RANGEBYSCORE = 15,
  ZsetRequest_enum_req_ZsetRequest_enum_req_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ZsetRequest_enum_req_ZsetRequest_enum_req_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ZsetRequest_enum_req_IsValid(int value);
constexpr ZsetRequest_enum_req ZsetRequest_enum_req_enum_req_MIN = ZsetRequest_enum_req_ZSET_ADD;
constexpr ZsetRequest_enum_req ZsetRequest_enum_req_enum_req_MAX = ZsetRequest_enum_req_ZSET_REM_RANGEBYSCORE;
constexpr int ZsetRequest_enum_req_enum_req_ARRAYSIZE = ZsetRequest_enum_req_enum_req_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZsetRequest_enum_req_descriptor();
template<typename T>
inline const std::string& ZsetRequest_enum_req_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZsetRequest_enum_req>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZsetRequest_enum_req_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZsetRequest_enum_req_descriptor(), enum_t_value);
}
inline bool ZsetRequest_enum_req_Parse(
    const std::string& name, ZsetRequest_enum_req* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZsetRequest_enum_req>(
    ZsetRequest_enum_req_descriptor(), name, value);
}
// ===================================================================

class DropMastReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.DropMastReq) */ {
 public:
  inline DropMastReq() : DropMastReq(nullptr) {};
  virtual ~DropMastReq();

  DropMastReq(const DropMastReq& from);
  DropMastReq(DropMastReq&& from) noexcept
    : DropMastReq() {
    *this = ::std::move(from);
  }

  inline DropMastReq& operator=(const DropMastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropMastReq& operator=(DropMastReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropMastReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropMastReq* internal_default_instance() {
    return reinterpret_cast<const DropMastReq*>(
               &_DropMastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DropMastReq& a, DropMastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DropMastReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropMastReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropMastReq* New() const final {
    return CreateMaybeMessage<DropMastReq>(nullptr);
  }

  DropMastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropMastReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropMastReq& from);
  void MergeFrom(const DropMastReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropMastReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.DropMastReq";
  }
  protected:
  explicit DropMastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCntFieldNumber = 1,
  };
  // int32 cnt = 1;
  void clear_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 cnt() const;
  void set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cnt() const;
  void _internal_set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.DropMastReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class DropMastRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.DropMastRes) */ {
 public:
  inline DropMastRes() : DropMastRes(nullptr) {};
  virtual ~DropMastRes();

  DropMastRes(const DropMastRes& from);
  DropMastRes(DropMastRes&& from) noexcept
    : DropMastRes() {
    *this = ::std::move(from);
  }

  inline DropMastRes& operator=(const DropMastRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropMastRes& operator=(DropMastRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropMastRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropMastRes* internal_default_instance() {
    return reinterpret_cast<const DropMastRes*>(
               &_DropMastRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DropMastRes& a, DropMastRes& b) {
    a.Swap(&b);
  }
  inline void Swap(DropMastRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropMastRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropMastRes* New() const final {
    return CreateMaybeMessage<DropMastRes>(nullptr);
  }

  DropMastRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropMastRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropMastRes& from);
  void MergeFrom(const DropMastRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropMastRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.DropMastRes";
  }
  protected:
  explicit DropMastRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.DropMastRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class BemasterReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.BemasterReq) */ {
 public:
  inline BemasterReq() : BemasterReq(nullptr) {};
  virtual ~BemasterReq();

  BemasterReq(const BemasterReq& from);
  BemasterReq(BemasterReq&& from) noexcept
    : BemasterReq() {
    *this = ::std::move(from);
  }

  inline BemasterReq& operator=(const BemasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BemasterReq& operator=(BemasterReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BemasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BemasterReq* internal_default_instance() {
    return reinterpret_cast<const BemasterReq*>(
               &_BemasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BemasterReq& a, BemasterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BemasterReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BemasterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BemasterReq* New() const final {
    return CreateMaybeMessage<BemasterReq>(nullptr);
  }

  BemasterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BemasterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BemasterReq& from);
  void MergeFrom(const BemasterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BemasterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.BemasterReq";
  }
  protected:
  explicit BemasterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.BemasterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class BemasterRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.BemasterRes) */ {
 public:
  inline BemasterRes() : BemasterRes(nullptr) {};
  virtual ~BemasterRes();

  BemasterRes(const BemasterRes& from);
  BemasterRes(BemasterRes&& from) noexcept
    : BemasterRes() {
    *this = ::std::move(from);
  }

  inline BemasterRes& operator=(const BemasterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BemasterRes& operator=(BemasterRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BemasterRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BemasterRes* internal_default_instance() {
    return reinterpret_cast<const BemasterRes*>(
               &_BemasterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BemasterRes& a, BemasterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BemasterRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BemasterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BemasterRes* New() const final {
    return CreateMaybeMessage<BemasterRes>(nullptr);
  }

  BemasterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BemasterRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BemasterRes& from);
  void MergeFrom(const BemasterRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BemasterRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.BemasterRes";
  }
  protected:
  explicit BemasterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.BemasterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class GroupListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.GroupListReq) */ {
 public:
  inline GroupListReq() : GroupListReq(nullptr) {};
  virtual ~GroupListReq();

  GroupListReq(const GroupListReq& from);
  GroupListReq(GroupListReq&& from) noexcept
    : GroupListReq() {
    *this = ::std::move(from);
  }

  inline GroupListReq& operator=(const GroupListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListReq& operator=(GroupListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupListReq* internal_default_instance() {
    return reinterpret_cast<const GroupListReq*>(
               &_GroupListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupListReq& a, GroupListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupListReq* New() const final {
    return CreateMaybeMessage<GroupListReq>(nullptr);
  }

  GroupListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupListReq& from);
  void MergeFrom(const GroupListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.GroupListReq";
  }
  protected:
  explicit GroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupcntFieldNumber = 1,
  };
  // int32 groupcnt = 1;
  void clear_groupcnt();
  ::PROTOBUF_NAMESPACE_ID::int32 groupcnt() const;
  void set_groupcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupcnt() const;
  void _internal_set_groupcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.GroupListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupcnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class GroupListRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.GroupListRes) */ {
 public:
  inline GroupListRes() : GroupListRes(nullptr) {};
  virtual ~GroupListRes();

  GroupListRes(const GroupListRes& from);
  GroupListRes(GroupListRes&& from) noexcept
    : GroupListRes() {
    *this = ::std::move(from);
  }

  inline GroupListRes& operator=(const GroupListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListRes& operator=(GroupListRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupListRes* internal_default_instance() {
    return reinterpret_cast<const GroupListRes*>(
               &_GroupListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupListRes& a, GroupListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupListRes* New() const final {
    return CreateMaybeMessage<GroupListRes>(nullptr);
  }

  GroupListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupListRes& from);
  void MergeFrom(const GroupListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.GroupListRes";
  }
  protected:
  explicit GroupListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMapFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .phxkv.GroupsMapMsg subMap = 2;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::phxkv::GroupsMapMsg& submap() const;
  ::phxkv::GroupsMapMsg* release_submap();
  ::phxkv::GroupsMapMsg* mutable_submap();
  void set_allocated_submap(::phxkv::GroupsMapMsg* submap);
  private:
  const ::phxkv::GroupsMapMsg& _internal_submap() const;
  ::phxkv::GroupsMapMsg* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::phxkv::GroupsMapMsg* submap);
  ::phxkv::GroupsMapMsg* unsafe_arena_release_submap();

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.GroupListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxkv::GroupsMapMsg* submap_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KVOperator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KVOperator) */ {
 public:
  inline KVOperator() : KVOperator(nullptr) {};
  virtual ~KVOperator();

  KVOperator(const KVOperator& from);
  KVOperator(KVOperator&& from) noexcept
    : KVOperator() {
    *this = ::std::move(from);
  }

  inline KVOperator& operator=(const KVOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVOperator& operator=(KVOperator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KVOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVOperator* internal_default_instance() {
    return reinterpret_cast<const KVOperator*>(
               &_KVOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KVOperator& a, KVOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(KVOperator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KVOperator* New() const final {
    return CreateMaybeMessage<KVOperator>(nullptr);
  }

  KVOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KVOperator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KVOperator& from);
  void MergeFrom(const KVOperator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVOperator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KVOperator";
  }
  protected:
  explicit KVOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOperatorFieldNumber = 3,
    kGroupidFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 operator = 3;
  void clear_operator_();
  ::PROTOBUF_NAMESPACE_ID::uint32 operator_() const;
  void set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operator_() const;
  void _internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 groupid = 4;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KVOperator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operator__;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KVResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KVResponse) */ {
 public:
  inline KVResponse() : KVResponse(nullptr) {};
  virtual ~KVResponse();

  KVResponse(const KVResponse& from);
  KVResponse(KVResponse&& from) noexcept
    : KVResponse() {
    *this = ::std::move(from);
  }

  inline KVResponse& operator=(const KVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVResponse& operator=(KVResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KVResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVResponse* internal_default_instance() {
    return reinterpret_cast<const KVResponse*>(
               &_KVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KVResponse& a, KVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KVResponse* New() const final {
    return CreateMaybeMessage<KVResponse>(nullptr);
  }

  KVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KVResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KVResponse& from);
  void MergeFrom(const KVResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KVResponse";
  }
  protected:
  explicit KVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSubMapFieldNumber = 3,
    kRetFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .phxkv.GroupsMapMsg subMap = 3;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::phxkv::GroupsMapMsg& submap() const;
  ::phxkv::GroupsMapMsg* release_submap();
  ::phxkv::GroupsMapMsg* mutable_submap();
  void set_allocated_submap(::phxkv::GroupsMapMsg* submap);
  private:
  const ::phxkv::GroupsMapMsg& _internal_submap() const;
  ::phxkv::GroupsMapMsg* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::phxkv::GroupsMapMsg* submap);
  ::phxkv::GroupsMapMsg* unsafe_arena_release_submap();

  // int32 ret = 2;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::phxkv::GroupsMapMsg* submap_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class GroupsMapMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.GroupsMapMsg) */ {
 public:
  inline GroupsMapMsg() : GroupsMapMsg(nullptr) {};
  virtual ~GroupsMapMsg();

  GroupsMapMsg(const GroupsMapMsg& from);
  GroupsMapMsg(GroupsMapMsg&& from) noexcept
    : GroupsMapMsg() {
    *this = ::std::move(from);
  }

  inline GroupsMapMsg& operator=(const GroupsMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupsMapMsg& operator=(GroupsMapMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupsMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupsMapMsg* internal_default_instance() {
    return reinterpret_cast<const GroupsMapMsg*>(
               &_GroupsMapMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupsMapMsg& a, GroupsMapMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupsMapMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupsMapMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupsMapMsg* New() const final {
    return CreateMaybeMessage<GroupsMapMsg>(nullptr);
  }

  GroupsMapMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupsMapMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupsMapMsg& from);
  void MergeFrom(const GroupsMapMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupsMapMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.GroupsMapMsg";
  }
  protected:
  explicit GroupsMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubGroupFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated .phxkv.GroupMsg subGroup = 2;
  int subgroup_size() const;
  private:
  int _internal_subgroup_size() const;
  public:
  void clear_subgroup();
  ::phxkv::GroupMsg* mutable_subgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::GroupMsg >*
      mutable_subgroup();
  private:
  const ::phxkv::GroupMsg& _internal_subgroup(int index) const;
  ::phxkv::GroupMsg* _internal_add_subgroup();
  public:
  const ::phxkv::GroupMsg& subgroup(int index) const;
  ::phxkv::GroupMsg* add_subgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::GroupMsg >&
      subgroup() const;

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.GroupsMapMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::GroupMsg > subgroup_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class GroupMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.GroupMsg) */ {
 public:
  inline GroupMsg() : GroupMsg(nullptr) {};
  virtual ~GroupMsg();

  GroupMsg(const GroupMsg& from);
  GroupMsg(GroupMsg&& from) noexcept
    : GroupMsg() {
    *this = ::std::move(from);
  }

  inline GroupMsg& operator=(const GroupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMsg& operator=(GroupMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMsg* internal_default_instance() {
    return reinterpret_cast<const GroupMsg*>(
               &_GroupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupMsg& a, GroupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMsg* New() const final {
    return CreateMaybeMessage<GroupMsg>(nullptr);
  }

  GroupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMsg& from);
  void MergeFrom(const GroupMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.GroupMsg";
  }
  protected:
  explicit GroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasteripFieldNumber = 3,
    kRetFieldNumber = 1,
    kGroupidFieldNumber = 2,
    kMasterportFieldNumber = 4,
  };
  // bytes masterip = 3;
  void clear_masterip();
  const std::string& masterip() const;
  void set_masterip(const std::string& value);
  void set_masterip(std::string&& value);
  void set_masterip(const char* value);
  void set_masterip(const void* value, size_t size);
  std::string* mutable_masterip();
  std::string* release_masterip();
  void set_allocated_masterip(std::string* masterip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_masterip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_masterip(
      std::string* masterip);
  private:
  const std::string& _internal_masterip() const;
  void _internal_set_masterip(const std::string& value);
  std::string* _internal_mutable_masterip();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 masterport = 4;
  void clear_masterport();
  ::PROTOBUF_NAMESPACE_ID::int32 masterport() const;
  void set_masterport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_masterport() const;
  void _internal_set_masterport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.GroupMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masterip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  ::PROTOBUF_NAMESPACE_ID::int32 masterport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchPutRequest) */ {
 public:
  inline KvBatchPutRequest() : KvBatchPutRequest(nullptr) {};
  virtual ~KvBatchPutRequest();

  KvBatchPutRequest(const KvBatchPutRequest& from);
  KvBatchPutRequest(KvBatchPutRequest&& from) noexcept
    : KvBatchPutRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchPutRequest& operator=(const KvBatchPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutRequest& operator=(KvBatchPutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchPutRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutRequest*>(
               &_KvBatchPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KvBatchPutRequest& a, KvBatchPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchPutRequest* New() const final {
    return CreateMaybeMessage<KvBatchPutRequest>(nullptr);
  }

  KvBatchPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchPutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchPutRequest& from);
  void MergeFrom(const KvBatchPutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchPutRequest";
  }
  protected:
  explicit KvBatchPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kGroupidFieldNumber = 3,
  };
  // repeated .phxkv.KvBatchPutSubRequest subs = 1;
  int subs_size() const;
  private:
  int _internal_subs_size() const;
  public:
  void clear_subs();
  ::phxkv::KvBatchPutSubRequest* mutable_subs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchPutSubRequest >*
      mutable_subs();
  private:
  const ::phxkv::KvBatchPutSubRequest& _internal_subs(int index) const;
  ::phxkv::KvBatchPutSubRequest* _internal_add_subs();
  public:
  const ::phxkv::KvBatchPutSubRequest& subs(int index) const;
  ::phxkv::KvBatchPutSubRequest* add_subs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchPutSubRequest >&
      subs() const;

  // uint32 operator = 2;
  void clear_operator_();
  ::PROTOBUF_NAMESPACE_ID::uint32 operator_() const;
  void set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operator_() const;
  void _internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 groupid = 3;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchPutSubRequest > subs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operator__;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutSubRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchPutSubRequest) */ {
 public:
  inline KvBatchPutSubRequest() : KvBatchPutSubRequest(nullptr) {};
  virtual ~KvBatchPutSubRequest();

  KvBatchPutSubRequest(const KvBatchPutSubRequest& from);
  KvBatchPutSubRequest(KvBatchPutSubRequest&& from) noexcept
    : KvBatchPutSubRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchPutSubRequest& operator=(const KvBatchPutSubRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutSubRequest& operator=(KvBatchPutSubRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchPutSubRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchPutSubRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutSubRequest*>(
               &_KvBatchPutSubRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KvBatchPutSubRequest& a, KvBatchPutSubRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutSubRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutSubRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchPutSubRequest* New() const final {
    return CreateMaybeMessage<KvBatchPutSubRequest>(nullptr);
  }

  KvBatchPutSubRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchPutSubRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchPutSubRequest& from);
  void MergeFrom(const KvBatchPutSubRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutSubRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchPutSubRequest";
  }
  protected:
  explicit KvBatchPutSubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchPutSubRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchPutResponse) */ {
 public:
  inline KvBatchPutResponse() : KvBatchPutResponse(nullptr) {};
  virtual ~KvBatchPutResponse();

  KvBatchPutResponse(const KvBatchPutResponse& from);
  KvBatchPutResponse(KvBatchPutResponse&& from) noexcept
    : KvBatchPutResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchPutResponse& operator=(const KvBatchPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutResponse& operator=(KvBatchPutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchPutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchPutResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutResponse*>(
               &_KvBatchPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KvBatchPutResponse& a, KvBatchPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchPutResponse* New() const final {
    return CreateMaybeMessage<KvBatchPutResponse>(nullptr);
  }

  KvBatchPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchPutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchPutResponse& from);
  void MergeFrom(const KvBatchPutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchPutResponse";
  }
  protected:
  explicit KvBatchPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMapFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .phxkv.GroupsMapMsg subMap = 2;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::phxkv::GroupsMapMsg& submap() const;
  ::phxkv::GroupsMapMsg* release_submap();
  ::phxkv::GroupsMapMsg* mutable_submap();
  void set_allocated_submap(::phxkv::GroupsMapMsg* submap);
  private:
  const ::phxkv::GroupsMapMsg& _internal_submap() const;
  ::phxkv::GroupsMapMsg* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::phxkv::GroupsMapMsg* submap);
  ::phxkv::GroupsMapMsg* unsafe_arena_release_submap();

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxkv::GroupsMapMsg* submap_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchGetRequest) */ {
 public:
  inline KvBatchGetRequest() : KvBatchGetRequest(nullptr) {};
  virtual ~KvBatchGetRequest();

  KvBatchGetRequest(const KvBatchGetRequest& from);
  KvBatchGetRequest(KvBatchGetRequest&& from) noexcept
    : KvBatchGetRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchGetRequest& operator=(const KvBatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetRequest& operator=(KvBatchGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetRequest*>(
               &_KvBatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KvBatchGetRequest& a, KvBatchGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchGetRequest* New() const final {
    return CreateMaybeMessage<KvBatchGetRequest>(nullptr);
  }

  KvBatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchGetRequest& from);
  void MergeFrom(const KvBatchGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchGetRequest";
  }
  protected:
  explicit KvBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kGroupidFieldNumber = 3,
  };
  // repeated .phxkv.KvBatchGetSubRequest subs = 1;
  int subs_size() const;
  private:
  int _internal_subs_size() const;
  public:
  void clear_subs();
  ::phxkv::KvBatchGetSubRequest* mutable_subs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubRequest >*
      mutable_subs();
  private:
  const ::phxkv::KvBatchGetSubRequest& _internal_subs(int index) const;
  ::phxkv::KvBatchGetSubRequest* _internal_add_subs();
  public:
  const ::phxkv::KvBatchGetSubRequest& subs(int index) const;
  ::phxkv::KvBatchGetSubRequest* add_subs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubRequest >&
      subs() const;

  // uint32 operator = 2;
  void clear_operator_();
  ::PROTOBUF_NAMESPACE_ID::uint32 operator_() const;
  void set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operator_() const;
  void _internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 groupid = 3;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubRequest > subs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operator__;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetSubRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchGetSubRequest) */ {
 public:
  inline KvBatchGetSubRequest() : KvBatchGetSubRequest(nullptr) {};
  virtual ~KvBatchGetSubRequest();

  KvBatchGetSubRequest(const KvBatchGetSubRequest& from);
  KvBatchGetSubRequest(KvBatchGetSubRequest&& from) noexcept
    : KvBatchGetSubRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchGetSubRequest& operator=(const KvBatchGetSubRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetSubRequest& operator=(KvBatchGetSubRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchGetSubRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchGetSubRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetSubRequest*>(
               &_KvBatchGetSubRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KvBatchGetSubRequest& a, KvBatchGetSubRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetSubRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetSubRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchGetSubRequest* New() const final {
    return CreateMaybeMessage<KvBatchGetSubRequest>(nullptr);
  }

  KvBatchGetSubRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchGetSubRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchGetSubRequest& from);
  void MergeFrom(const KvBatchGetSubRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetSubRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchGetSubRequest";
  }
  protected:
  explicit KvBatchGetSubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchGetSubRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchGetResponse) */ {
 public:
  inline KvBatchGetResponse() : KvBatchGetResponse(nullptr) {};
  virtual ~KvBatchGetResponse();

  KvBatchGetResponse(const KvBatchGetResponse& from);
  KvBatchGetResponse(KvBatchGetResponse&& from) noexcept
    : KvBatchGetResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchGetResponse& operator=(const KvBatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetResponse& operator=(KvBatchGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetResponse*>(
               &_KvBatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KvBatchGetResponse& a, KvBatchGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchGetResponse* New() const final {
    return CreateMaybeMessage<KvBatchGetResponse>(nullptr);
  }

  KvBatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchGetResponse& from);
  void MergeFrom(const KvBatchGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchGetResponse";
  }
  protected:
  explicit KvBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSubMapFieldNumber = 3,
    kRetFieldNumber = 1,
  };
  // repeated .phxkv.KvBatchGetSubResponse values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::phxkv::KvBatchGetSubResponse* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubResponse >*
      mutable_values();
  private:
  const ::phxkv::KvBatchGetSubResponse& _internal_values(int index) const;
  ::phxkv::KvBatchGetSubResponse* _internal_add_values();
  public:
  const ::phxkv::KvBatchGetSubResponse& values(int index) const;
  ::phxkv::KvBatchGetSubResponse* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubResponse >&
      values() const;

  // .phxkv.GroupsMapMsg subMap = 3;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::phxkv::GroupsMapMsg& submap() const;
  ::phxkv::GroupsMapMsg* release_submap();
  ::phxkv::GroupsMapMsg* mutable_submap();
  void set_allocated_submap(::phxkv::GroupsMapMsg* submap);
  private:
  const ::phxkv::GroupsMapMsg& _internal_submap() const;
  ::phxkv::GroupsMapMsg* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::phxkv::GroupsMapMsg* submap);
  ::phxkv::GroupsMapMsg* unsafe_arena_release_submap();

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubResponse > values_;
  ::phxkv::GroupsMapMsg* submap_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetSubResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KvBatchGetSubResponse) */ {
 public:
  inline KvBatchGetSubResponse() : KvBatchGetSubResponse(nullptr) {};
  virtual ~KvBatchGetSubResponse();

  KvBatchGetSubResponse(const KvBatchGetSubResponse& from);
  KvBatchGetSubResponse(KvBatchGetSubResponse&& from) noexcept
    : KvBatchGetSubResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchGetSubResponse& operator=(const KvBatchGetSubResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetSubResponse& operator=(KvBatchGetSubResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvBatchGetSubResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvBatchGetSubResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetSubResponse*>(
               &_KvBatchGetSubResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(KvBatchGetSubResponse& a, KvBatchGetSubResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetSubResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetSubResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvBatchGetSubResponse* New() const final {
    return CreateMaybeMessage<KvBatchGetSubResponse>(nullptr);
  }

  KvBatchGetSubResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvBatchGetSubResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvBatchGetSubResponse& from);
  void MergeFrom(const KvBatchGetSubResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetSubResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KvBatchGetSubResponse";
  }
  protected:
  explicit KvBatchGetSubResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kDataFieldNumber = 4,
    kRetFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KvBatchGetSubResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class KVMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.KVMessage) */ {
 public:
  inline KVMessage() : KVMessage(nullptr) {};
  virtual ~KVMessage();

  KVMessage(const KVMessage& from);
  KVMessage(KVMessage&& from) noexcept
    : KVMessage() {
    *this = ::std::move(from);
  }

  inline KVMessage& operator=(const KVMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVMessage& operator=(KVMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KVMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVMessage* internal_default_instance() {
    return reinterpret_cast<const KVMessage*>(
               &_KVMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(KVMessage& a, KVMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(KVMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KVMessage* New() const final {
    return CreateMaybeMessage<KVMessage>(nullptr);
  }

  KVMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KVMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KVMessage& from);
  void MergeFrom(const KVMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.KVMessage";
  }
  protected:
  explicit KVMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KVMessage_Type Type;
  static constexpr Type SingleMsg =
    KVMessage_Type_SingleMsg;
  static constexpr Type BatchMsg =
    KVMessage_Type_BatchMsg;
  static constexpr Type RequestMsg =
    KVMessage_Type_RequestMsg;
  static inline bool Type_IsValid(int value) {
    return KVMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    KVMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    KVMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    KVMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return KVMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return KVMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return KVMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPutOptFieldNumber = 2,
    kBatchPutOptFieldNumber = 3,
    kRequestOptFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .phxkv.KVOperator PutOpt = 2;
  bool has_putopt() const;
  private:
  bool _internal_has_putopt() const;
  public:
  void clear_putopt();
  const ::phxkv::KVOperator& putopt() const;
  ::phxkv::KVOperator* release_putopt();
  ::phxkv::KVOperator* mutable_putopt();
  void set_allocated_putopt(::phxkv::KVOperator* putopt);
  private:
  const ::phxkv::KVOperator& _internal_putopt() const;
  ::phxkv::KVOperator* _internal_mutable_putopt();
  public:
  void unsafe_arena_set_allocated_putopt(
      ::phxkv::KVOperator* putopt);
  ::phxkv::KVOperator* unsafe_arena_release_putopt();

  // .phxkv.KvBatchPutRequest BatchPutOpt = 3;
  bool has_batchputopt() const;
  private:
  bool _internal_has_batchputopt() const;
  public:
  void clear_batchputopt();
  const ::phxkv::KvBatchPutRequest& batchputopt() const;
  ::phxkv::KvBatchPutRequest* release_batchputopt();
  ::phxkv::KvBatchPutRequest* mutable_batchputopt();
  void set_allocated_batchputopt(::phxkv::KvBatchPutRequest* batchputopt);
  private:
  const ::phxkv::KvBatchPutRequest& _internal_batchputopt() const;
  ::phxkv::KvBatchPutRequest* _internal_mutable_batchputopt();
  public:
  void unsafe_arena_set_allocated_batchputopt(
      ::phxkv::KvBatchPutRequest* batchputopt);
  ::phxkv::KvBatchPutRequest* unsafe_arena_release_batchputopt();

  // .phxkv.Request RequestOpt = 4;
  bool has_requestopt() const;
  private:
  bool _internal_has_requestopt() const;
  public:
  void clear_requestopt();
  const ::phxkv::Request& requestopt() const;
  ::phxkv::Request* release_requestopt();
  ::phxkv::Request* mutable_requestopt();
  void set_allocated_requestopt(::phxkv::Request* requestopt);
  private:
  const ::phxkv::Request& _internal_requestopt() const;
  ::phxkv::Request* _internal_mutable_requestopt();
  public:
  void unsafe_arena_set_allocated_requestopt(
      ::phxkv::Request* requestopt);
  ::phxkv::Request* unsafe_arena_release_requestopt();

  // .phxkv.KVMessage.Type type = 1;
  void clear_type();
  ::phxkv::KVMessage_Type type() const;
  void set_type(::phxkv::KVMessage_Type value);
  private:
  ::phxkv::KVMessage_Type _internal_type() const;
  void _internal_set_type(::phxkv::KVMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.KVMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxkv::KVOperator* putopt_;
  ::phxkv::KvBatchPutRequest* batchputopt_;
  ::phxkv::Request* requestopt_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_req_type req_type;
  static constexpr req_type HASH_REQ =
    Request_req_type_HASH_REQ;
  static constexpr req_type LIST_REQ =
    Request_req_type_LIST_REQ;
  static constexpr req_type SET_REQ =
    Request_req_type_SET_REQ;
  static constexpr req_type ZSET_REQ =
    Request_req_type_ZSET_REQ;
  static constexpr req_type EXPIRE_REQ =
    Request_req_type_EXPIRE_REQ;
  static constexpr req_type DEL_KEY_REQ =
    Request_req_type_DEL_KEY_REQ;
  static inline bool req_type_IsValid(int value) {
    return Request_req_type_IsValid(value);
  }
  static constexpr req_type req_type_MIN =
    Request_req_type_req_type_MIN;
  static constexpr req_type req_type_MAX =
    Request_req_type_req_type_MAX;
  static constexpr int req_type_ARRAYSIZE =
    Request_req_type_req_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  req_type_descriptor() {
    return Request_req_type_descriptor();
  }
  template<typename T>
  static inline const std::string& req_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, req_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function req_type_Name.");
    return Request_req_type_Name(enum_t_value);
  }
  static inline bool req_type_Parse(const std::string& name,
      req_type* value) {
    return Request_req_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kHashReqFieldNumber = 5,
    kListReqFieldNumber = 6,
    kSetReqFieldNumber = 7,
    kZsetReqFieldNumber = 8,
    kGroupidFieldNumber = 1,
    kDataTypeFieldNumber = 2,
    kTtlFieldNumber = 4,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .phxkv.HashRequest hash_req = 5;
  bool has_hash_req() const;
  private:
  bool _internal_has_hash_req() const;
  public:
  void clear_hash_req();
  const ::phxkv::HashRequest& hash_req() const;
  ::phxkv::HashRequest* release_hash_req();
  ::phxkv::HashRequest* mutable_hash_req();
  void set_allocated_hash_req(::phxkv::HashRequest* hash_req);
  private:
  const ::phxkv::HashRequest& _internal_hash_req() const;
  ::phxkv::HashRequest* _internal_mutable_hash_req();
  public:
  void unsafe_arena_set_allocated_hash_req(
      ::phxkv::HashRequest* hash_req);
  ::phxkv::HashRequest* unsafe_arena_release_hash_req();

  // .phxkv.ListRequest list_req = 6;
  bool has_list_req() const;
  private:
  bool _internal_has_list_req() const;
  public:
  void clear_list_req();
  const ::phxkv::ListRequest& list_req() const;
  ::phxkv::ListRequest* release_list_req();
  ::phxkv::ListRequest* mutable_list_req();
  void set_allocated_list_req(::phxkv::ListRequest* list_req);
  private:
  const ::phxkv::ListRequest& _internal_list_req() const;
  ::phxkv::ListRequest* _internal_mutable_list_req();
  public:
  void unsafe_arena_set_allocated_list_req(
      ::phxkv::ListRequest* list_req);
  ::phxkv::ListRequest* unsafe_arena_release_list_req();

  // .phxkv.SetRequest set_req = 7;
  bool has_set_req() const;
  private:
  bool _internal_has_set_req() const;
  public:
  void clear_set_req();
  const ::phxkv::SetRequest& set_req() const;
  ::phxkv::SetRequest* release_set_req();
  ::phxkv::SetRequest* mutable_set_req();
  void set_allocated_set_req(::phxkv::SetRequest* set_req);
  private:
  const ::phxkv::SetRequest& _internal_set_req() const;
  ::phxkv::SetRequest* _internal_mutable_set_req();
  public:
  void unsafe_arena_set_allocated_set_req(
      ::phxkv::SetRequest* set_req);
  ::phxkv::SetRequest* unsafe_arena_release_set_req();

  // .phxkv.ZsetRequest zset_req = 8;
  bool has_zset_req() const;
  private:
  bool _internal_has_zset_req() const;
  public:
  void clear_zset_req();
  const ::phxkv::ZsetRequest& zset_req() const;
  ::phxkv::ZsetRequest* release_zset_req();
  ::phxkv::ZsetRequest* mutable_zset_req();
  void set_allocated_zset_req(::phxkv::ZsetRequest* zset_req);
  private:
  const ::phxkv::ZsetRequest& _internal_zset_req() const;
  ::phxkv::ZsetRequest* _internal_mutable_zset_req();
  public:
  void unsafe_arena_set_allocated_zset_req(
      ::phxkv::ZsetRequest* zset_req);
  ::phxkv::ZsetRequest* unsafe_arena_release_zset_req();

  // uint32 groupid = 1;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .phxkv.Request.req_type data_type = 2;
  void clear_data_type();
  ::phxkv::Request_req_type data_type() const;
  void set_data_type(::phxkv::Request_req_type value);
  private:
  ::phxkv::Request_req_type _internal_data_type() const;
  void _internal_set_data_type(::phxkv::Request_req_type value);
  public:

  // uint32 ttl = 4;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::phxkv::HashRequest* hash_req_;
  ::phxkv::ListRequest* list_req_;
  ::phxkv::SetRequest* set_req_;
  ::phxkv::ZsetRequest* zset_req_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  int data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class HashRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.HashRequest) */ {
 public:
  inline HashRequest() : HashRequest(nullptr) {};
  virtual ~HashRequest();

  HashRequest(const HashRequest& from);
  HashRequest(HashRequest&& from) noexcept
    : HashRequest() {
    *this = ::std::move(from);
  }

  inline HashRequest& operator=(const HashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRequest& operator=(HashRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashRequest* internal_default_instance() {
    return reinterpret_cast<const HashRequest*>(
               &_HashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HashRequest& a, HashRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HashRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashRequest* New() const final {
    return CreateMaybeMessage<HashRequest>(nullptr);
  }

  HashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashRequest& from);
  void MergeFrom(const HashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.HashRequest";
  }
  protected:
  explicit HashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HashRequest_enum_req enum_req;
  static constexpr enum_req HASH_START =
    HashRequest_enum_req_HASH_START;
  static constexpr enum_req HASH_DEL =
    HashRequest_enum_req_HASH_DEL;
  static constexpr enum_req HASH_GET =
    HashRequest_enum_req_HASH_GET;
  static constexpr enum_req HASH_GETALL =
    HashRequest_enum_req_HASH_GETALL;
  static constexpr enum_req HASH_SET =
    HashRequest_enum_req_HASH_SET;
  static constexpr enum_req HASH_EXISTS =
    HashRequest_enum_req_HASH_EXISTS;
  static constexpr enum_req HASH_INCR_INT =
    HashRequest_enum_req_HASH_INCR_INT;
  static constexpr enum_req HASH_INCR_FLOAT =
    HashRequest_enum_req_HASH_INCR_FLOAT;
  static constexpr enum_req HASH_KEYS =
    HashRequest_enum_req_HASH_KEYS;
  static constexpr enum_req HASH_LEN =
    HashRequest_enum_req_HASH_LEN;
  static constexpr enum_req HASH_MGET =
    HashRequest_enum_req_HASH_MGET;
  static constexpr enum_req HASH_MSET =
    HashRequest_enum_req_HASH_MSET;
  static constexpr enum_req HASH_SETNX =
    HashRequest_enum_req_HASH_SETNX;
  static constexpr enum_req HASH_VALUES =
    HashRequest_enum_req_HASH_VALUES;
  static inline bool enum_req_IsValid(int value) {
    return HashRequest_enum_req_IsValid(value);
  }
  static constexpr enum_req enum_req_MIN =
    HashRequest_enum_req_enum_req_MIN;
  static constexpr enum_req enum_req_MAX =
    HashRequest_enum_req_enum_req_MAX;
  static constexpr int enum_req_ARRAYSIZE =
    HashRequest_enum_req_enum_req_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  enum_req_descriptor() {
    return HashRequest_enum_req_descriptor();
  }
  template<typename T>
  static inline const std::string& enum_req_Name(T enum_t_value) {
    static_assert(::std::is_same<T, enum_req>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function enum_req_Name.");
    return HashRequest_enum_req_Name(enum_t_value);
  }
  static inline bool enum_req_Parse(const std::string& name,
      enum_req* value) {
    return HashRequest_enum_req_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kReqTypeFieldNumber = 4,
  };
  // repeated .phxkv.HashField field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::phxkv::HashField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >*
      mutable_field();
  private:
  const ::phxkv::HashField& _internal_field(int index) const;
  ::phxkv::HashField* _internal_add_field();
  public:
  const ::phxkv::HashField& field(int index) const;
  ::phxkv::HashField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >&
      field() const;

  // int32 int_value = 2;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float float_value = 3;
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // .phxkv.HashRequest.enum_req req_type = 4;
  void clear_req_type();
  ::phxkv::HashRequest_enum_req req_type() const;
  void set_req_type(::phxkv::HashRequest_enum_req value);
  private:
  ::phxkv::HashRequest_enum_req _internal_req_type() const;
  void _internal_set_req_type(::phxkv::HashRequest_enum_req value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.HashRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField > field_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
  float float_value_;
  int req_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class HashField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.HashField) */ {
 public:
  inline HashField() : HashField(nullptr) {};
  virtual ~HashField();

  HashField(const HashField& from);
  HashField(HashField&& from) noexcept
    : HashField() {
    *this = ::std::move(from);
  }

  inline HashField& operator=(const HashField& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashField& operator=(HashField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashField* internal_default_instance() {
    return reinterpret_cast<const HashField*>(
               &_HashField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HashField& a, HashField& b) {
    a.Swap(&b);
  }
  inline void Swap(HashField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashField* New() const final {
    return CreateMaybeMessage<HashField>(nullptr);
  }

  HashField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashField& from);
  void MergeFrom(const HashField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.HashField";
  }
  protected:
  explicit HashField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldKeyFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // bytes field_key = 1;
  void clear_field_key();
  const std::string& field_key() const;
  void set_field_key(const std::string& value);
  void set_field_key(std::string&& value);
  void set_field_key(const char* value);
  void set_field_key(const void* value, size_t size);
  std::string* mutable_field_key();
  std::string* release_field_key();
  void set_allocated_field_key(std::string* field_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_key(
      std::string* field_key);
  private:
  const std::string& _internal_field_key() const;
  void _internal_set_field_key(const std::string& value);
  std::string* _internal_mutable_field_key();
  public:

  // bytes field_value = 2;
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const void* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_value(
      std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.HashField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_enum_code enum_code;
  static constexpr enum_code RES_SUCC =
    Response_enum_code_RES_SUCC;
  static constexpr enum_code RES_KEY_NOTEXIST =
    Response_enum_code_RES_KEY_NOTEXIST;
  static constexpr enum_code RES_SERVER_BUSY =
    Response_enum_code_RES_SERVER_BUSY;
  static constexpr enum_code PARAM_ERROR =
    Response_enum_code_PARAM_ERROR;
  static constexpr enum_code META_NOTEXIST =
    Response_enum_code_META_NOTEXIST;
  static constexpr enum_code ROCKSDB_ERR =
    Response_enum_code_ROCKSDB_ERR;
  static constexpr enum_code RES_KEY_EXISTS =
    Response_enum_code_RES_KEY_EXISTS;
  static constexpr enum_code RES_MASTER_REDIRECT =
    Response_enum_code_RES_MASTER_REDIRECT;
  static constexpr enum_code RES_NO_MASTER =
    Response_enum_code_RES_NO_MASTER;
  static constexpr enum_code RES_ERR =
    Response_enum_code_RES_ERR;
  static inline bool enum_code_IsValid(int value) {
    return Response_enum_code_IsValid(value);
  }
  static constexpr enum_code enum_code_MIN =
    Response_enum_code_enum_code_MIN;
  static constexpr enum_code enum_code_MAX =
    Response_enum_code_enum_code_MAX;
  static constexpr int enum_code_ARRAYSIZE =
    Response_enum_code_enum_code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  enum_code_descriptor() {
    return Response_enum_code_descriptor();
  }
  template<typename T>
  static inline const std::string& enum_code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, enum_code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function enum_code_Name.");
    return Response_enum_code_Name(enum_t_value);
  }
  static inline bool enum_code_Parse(const std::string& name,
      enum_code* value) {
    return Response_enum_code_Parse(name, value);
  }

  typedef Response_response_type response_type;
  static constexpr response_type STRING_RES =
    Response_response_type_STRING_RES;
  static constexpr response_type HASH_RES =
    Response_response_type_HASH_RES;
  static constexpr response_type LIST_RES =
    Response_response_type_LIST_RES;
  static constexpr response_type SET_RES =
    Response_response_type_SET_RES;
  static constexpr response_type ZSET_RES =
    Response_response_type_ZSET_RES;
  static inline bool response_type_IsValid(int value) {
    return Response_response_type_IsValid(value);
  }
  static constexpr response_type response_type_MIN =
    Response_response_type_response_type_MIN;
  static constexpr response_type response_type_MAX =
    Response_response_type_response_type_MAX;
  static constexpr int response_type_ARRAYSIZE =
    Response_response_type_response_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  response_type_descriptor() {
    return Response_response_type_descriptor();
  }
  template<typename T>
  static inline const std::string& response_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, response_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function response_type_Name.");
    return Response_response_type_Name(enum_t_value);
  }
  static inline bool response_type_Parse(const std::string& name,
      response_type* value) {
    return Response_response_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetMessageFieldNumber = 2,
    kSubMapFieldNumber = 6,
    kHashResponseFieldNumber = 7,
    kListResponseFieldNumber = 8,
    kSetResponseFieldNumber = 9,
    kZsetResponseFieldNumber = 10,
    kRetCodeFieldNumber = 1,
    kExistFieldNumber = 4,
    kLengthFieldNumber = 3,
    kDataTypeFieldNumber = 5,
  };
  // bytes ret_message = 2;
  void clear_ret_message();
  const std::string& ret_message() const;
  void set_ret_message(const std::string& value);
  void set_ret_message(std::string&& value);
  void set_ret_message(const char* value);
  void set_ret_message(const void* value, size_t size);
  std::string* mutable_ret_message();
  std::string* release_ret_message();
  void set_allocated_ret_message(std::string* ret_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ret_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ret_message(
      std::string* ret_message);
  private:
  const std::string& _internal_ret_message() const;
  void _internal_set_ret_message(const std::string& value);
  std::string* _internal_mutable_ret_message();
  public:

  // .phxkv.GroupsMapMsg subMap = 6;
  bool has_submap() const;
  private:
  bool _internal_has_submap() const;
  public:
  void clear_submap();
  const ::phxkv::GroupsMapMsg& submap() const;
  ::phxkv::GroupsMapMsg* release_submap();
  ::phxkv::GroupsMapMsg* mutable_submap();
  void set_allocated_submap(::phxkv::GroupsMapMsg* submap);
  private:
  const ::phxkv::GroupsMapMsg& _internal_submap() const;
  ::phxkv::GroupsMapMsg* _internal_mutable_submap();
  public:
  void unsafe_arena_set_allocated_submap(
      ::phxkv::GroupsMapMsg* submap);
  ::phxkv::GroupsMapMsg* unsafe_arena_release_submap();

  // .phxkv.HashResponse hash_response = 7;
  bool has_hash_response() const;
  private:
  bool _internal_has_hash_response() const;
  public:
  void clear_hash_response();
  const ::phxkv::HashResponse& hash_response() const;
  ::phxkv::HashResponse* release_hash_response();
  ::phxkv::HashResponse* mutable_hash_response();
  void set_allocated_hash_response(::phxkv::HashResponse* hash_response);
  private:
  const ::phxkv::HashResponse& _internal_hash_response() const;
  ::phxkv::HashResponse* _internal_mutable_hash_response();
  public:
  void unsafe_arena_set_allocated_hash_response(
      ::phxkv::HashResponse* hash_response);
  ::phxkv::HashResponse* unsafe_arena_release_hash_response();

  // .phxkv.ListResponse list_response = 8;
  bool has_list_response() const;
  private:
  bool _internal_has_list_response() const;
  public:
  void clear_list_response();
  const ::phxkv::ListResponse& list_response() const;
  ::phxkv::ListResponse* release_list_response();
  ::phxkv::ListResponse* mutable_list_response();
  void set_allocated_list_response(::phxkv::ListResponse* list_response);
  private:
  const ::phxkv::ListResponse& _internal_list_response() const;
  ::phxkv::ListResponse* _internal_mutable_list_response();
  public:
  void unsafe_arena_set_allocated_list_response(
      ::phxkv::ListResponse* list_response);
  ::phxkv::ListResponse* unsafe_arena_release_list_response();

  // .phxkv.SetResponse set_response = 9;
  bool has_set_response() const;
  private:
  bool _internal_has_set_response() const;
  public:
  void clear_set_response();
  const ::phxkv::SetResponse& set_response() const;
  ::phxkv::SetResponse* release_set_response();
  ::phxkv::SetResponse* mutable_set_response();
  void set_allocated_set_response(::phxkv::SetResponse* set_response);
  private:
  const ::phxkv::SetResponse& _internal_set_response() const;
  ::phxkv::SetResponse* _internal_mutable_set_response();
  public:
  void unsafe_arena_set_allocated_set_response(
      ::phxkv::SetResponse* set_response);
  ::phxkv::SetResponse* unsafe_arena_release_set_response();

  // .phxkv.ZsetResponse zset_response = 10;
  bool has_zset_response() const;
  private:
  bool _internal_has_zset_response() const;
  public:
  void clear_zset_response();
  const ::phxkv::ZsetResponse& zset_response() const;
  ::phxkv::ZsetResponse* release_zset_response();
  ::phxkv::ZsetResponse* mutable_zset_response();
  void set_allocated_zset_response(::phxkv::ZsetResponse* zset_response);
  private:
  const ::phxkv::ZsetResponse& _internal_zset_response() const;
  ::phxkv::ZsetResponse* _internal_mutable_zset_response();
  public:
  void unsafe_arena_set_allocated_zset_response(
      ::phxkv::ZsetResponse* zset_response);
  ::phxkv::ZsetResponse* unsafe_arena_release_zset_response();

  // .phxkv.Response.enum_code ret_code = 1;
  void clear_ret_code();
  ::phxkv::Response_enum_code ret_code() const;
  void set_ret_code(::phxkv::Response_enum_code value);
  private:
  ::phxkv::Response_enum_code _internal_ret_code() const;
  void _internal_set_ret_code(::phxkv::Response_enum_code value);
  public:

  // bool exist = 4;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // uint64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .phxkv.Response.response_type data_type = 5;
  void clear_data_type();
  ::phxkv::Response_response_type data_type() const;
  void set_data_type(::phxkv::Response_response_type value);
  private:
  ::phxkv::Response_response_type _internal_data_type() const;
  void _internal_set_data_type(::phxkv::Response_response_type value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_message_;
  ::phxkv::GroupsMapMsg* submap_;
  ::phxkv::HashResponse* hash_response_;
  ::phxkv::ListResponse* list_response_;
  ::phxkv::SetResponse* set_response_;
  ::phxkv::ZsetResponse* zset_response_;
  int ret_code_;
  bool exist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class HashResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.HashResponse) */ {
 public:
  inline HashResponse() : HashResponse(nullptr) {};
  virtual ~HashResponse();

  HashResponse(const HashResponse& from);
  HashResponse(HashResponse&& from) noexcept
    : HashResponse() {
    *this = ::std::move(from);
  }

  inline HashResponse& operator=(const HashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashResponse& operator=(HashResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashResponse* internal_default_instance() {
    return reinterpret_cast<const HashResponse*>(
               &_HashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(HashResponse& a, HashResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HashResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashResponse* New() const final {
    return CreateMaybeMessage<HashResponse>(nullptr);
  }

  HashResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashResponse& from);
  void MergeFrom(const HashResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.HashResponse";
  }
  protected:
  explicit HashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 4,
  };
  // repeated .phxkv.HashField field = 4;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::phxkv::HashField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >*
      mutable_field();
  private:
  const ::phxkv::HashField& _internal_field(int index) const;
  ::phxkv::HashField* _internal_add_field();
  public:
  const ::phxkv::HashField& field(int index) const;
  ::phxkv::HashField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >&
      field() const;

  // @@protoc_insertion_point(class_scope:phxkv.HashResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class ListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {};
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListRequest_enum_req enum_req;
  static constexpr enum_req LIST_LPOP =
    ListRequest_enum_req_LIST_LPOP;
  static constexpr enum_req LIST_RPOP =
    ListRequest_enum_req_LIST_RPOP;
  static constexpr enum_req LIST_RPOP_LPUSH =
    ListRequest_enum_req_LIST_RPOP_LPUSH;
  static constexpr enum_req LIST_INDEX =
    ListRequest_enum_req_LIST_INDEX;
  static constexpr enum_req LIST_INSERT =
    ListRequest_enum_req_LIST_INSERT;
  static constexpr enum_req LIST_LENGTH =
    ListRequest_enum_req_LIST_LENGTH;
  static constexpr enum_req LIST_LPUSH =
    ListRequest_enum_req_LIST_LPUSH;
  static constexpr enum_req LIST_LPUSHX =
    ListRequest_enum_req_LIST_LPUSHX;
  static constexpr enum_req LIST_RANGE =
    ListRequest_enum_req_LIST_RANGE;
  static constexpr enum_req LIST_REM =
    ListRequest_enum_req_LIST_REM;
  static constexpr enum_req LIST_RPUSH =
    ListRequest_enum_req_LIST_RPUSH;
  static constexpr enum_req LIST_RPUSHX =
    ListRequest_enum_req_LIST_RPUSHX;
  static constexpr enum_req LIST_SET =
    ListRequest_enum_req_LIST_SET;
  static constexpr enum_req LIST_TRIM =
    ListRequest_enum_req_LIST_TRIM;
  static inline bool enum_req_IsValid(int value) {
    return ListRequest_enum_req_IsValid(value);
  }
  static constexpr enum_req enum_req_MIN =
    ListRequest_enum_req_enum_req_MIN;
  static constexpr enum_req enum_req_MAX =
    ListRequest_enum_req_enum_req_MAX;
  static constexpr int enum_req_ARRAYSIZE =
    ListRequest_enum_req_enum_req_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  enum_req_descriptor() {
    return ListRequest_enum_req_descriptor();
  }
  template<typename T>
  static inline const std::string& enum_req_Name(T enum_t_value) {
    static_assert(::std::is_same<T, enum_req>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function enum_req_Name.");
    return ListRequest_enum_req_Name(enum_t_value);
  }
  static inline bool enum_req_Parse(const std::string& name,
      enum_req* value) {
    return ListRequest_enum_req_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kPivotFieldNumber = 8,
    kSrcListFieldNumber = 9,
    kReqTypeFieldNumber = 1,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kIndexFieldNumber = 5,
    kCountFieldNumber = 6,
    kPosFlagFieldNumber = 7,
  };
  // repeated bytes field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // bytes pivot = 8;
  void clear_pivot();
  const std::string& pivot() const;
  void set_pivot(const std::string& value);
  void set_pivot(std::string&& value);
  void set_pivot(const char* value);
  void set_pivot(const void* value, size_t size);
  std::string* mutable_pivot();
  std::string* release_pivot();
  void set_allocated_pivot(std::string* pivot);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pivot();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pivot(
      std::string* pivot);
  private:
  const std::string& _internal_pivot() const;
  void _internal_set_pivot(const std::string& value);
  std::string* _internal_mutable_pivot();
  public:

  // bytes src_list = 9;
  void clear_src_list();
  const std::string& src_list() const;
  void set_src_list(const std::string& value);
  void set_src_list(std::string&& value);
  void set_src_list(const char* value);
  void set_src_list(const void* value, size_t size);
  std::string* mutable_src_list();
  std::string* release_src_list();
  void set_allocated_src_list(std::string* src_list);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src_list();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src_list(
      std::string* src_list);
  private:
  const std::string& _internal_src_list() const;
  void _internal_set_src_list(const std::string& value);
  std::string* _internal_mutable_src_list();
  public:

  // .phxkv.ListRequest.enum_req req_type = 1;
  void clear_req_type();
  ::phxkv::ListRequest_enum_req req_type() const;
  void set_req_type(::phxkv::ListRequest_enum_req value);
  private:
  ::phxkv::ListRequest_enum_req _internal_req_type() const;
  void _internal_set_req_type(::phxkv::ListRequest_enum_req value);
  public:

  // int32 start = 3;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 4;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 5;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 6;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pos_flag = 7;
  void clear_pos_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_flag() const;
  void set_pos_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_flag() const;
  void _internal_set_pos_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pivot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_list_;
  int req_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class ListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {};
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(nullptr);
  }

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated bytes field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class SetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.SetRequest) */ {
 public:
  inline SetRequest() : SetRequest(nullptr) {};
  virtual ~SetRequest();

  SetRequest(const SetRequest& from);
  SetRequest(SetRequest&& from) noexcept
    : SetRequest() {
    *this = ::std::move(from);
  }

  inline SetRequest& operator=(const SetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRequest& operator=(SetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRequest* internal_default_instance() {
    return reinterpret_cast<const SetRequest*>(
               &_SetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetRequest& a, SetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRequest* New() const final {
    return CreateMaybeMessage<SetRequest>(nullptr);
  }

  SetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRequest& from);
  void MergeFrom(const SetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.SetRequest";
  }
  protected:
  explicit SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetRequest_enum_req enum_req;
  static constexpr enum_req SET_ADD =
    SetRequest_enum_req_SET_ADD;
  static constexpr enum_req SET_REM =
    SetRequest_enum_req_SET_REM;
  static constexpr enum_req SET_CARD =
    SetRequest_enum_req_SET_CARD;
  static constexpr enum_req SET_MEMBERS =
    SetRequest_enum_req_SET_MEMBERS;
  static constexpr enum_req SET_UNONSTORE =
    SetRequest_enum_req_SET_UNONSTORE;
  static constexpr enum_req SET_UNION =
    SetRequest_enum_req_SET_UNION;
  static constexpr enum_req SET_INTERSTORE =
    SetRequest_enum_req_SET_INTERSTORE;
  static constexpr enum_req SET_INTER =
    SetRequest_enum_req_SET_INTER;
  static constexpr enum_req SET_DIFFSTORE =
    SetRequest_enum_req_SET_DIFFSTORE;
  static constexpr enum_req SET_DIFF =
    SetRequest_enum_req_SET_DIFF;
  static constexpr enum_req SET_ISMEMBER =
    SetRequest_enum_req_SET_ISMEMBER;
  static constexpr enum_req SET_POP =
    SetRequest_enum_req_SET_POP;
  static constexpr enum_req SET_RANDMEMBER =
    SetRequest_enum_req_SET_RANDMEMBER;
  static constexpr enum_req SET_MOVE =
    SetRequest_enum_req_SET_MOVE;
  static inline bool enum_req_IsValid(int value) {
    return SetRequest_enum_req_IsValid(value);
  }
  static constexpr enum_req enum_req_MIN =
    SetRequest_enum_req_enum_req_MIN;
  static constexpr enum_req enum_req_MAX =
    SetRequest_enum_req_enum_req_MAX;
  static constexpr int enum_req_ARRAYSIZE =
    SetRequest_enum_req_enum_req_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  enum_req_descriptor() {
    return SetRequest_enum_req_descriptor();
  }
  template<typename T>
  static inline const std::string& enum_req_Name(T enum_t_value) {
    static_assert(::std::is_same<T, enum_req>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function enum_req_Name.");
    return SetRequest_enum_req_Name(enum_t_value);
  }
  static inline bool enum_req_Parse(const std::string& name,
      enum_req* value) {
    return SetRequest_enum_req_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kSrcSetFieldNumber = 3,
    kReqTypeFieldNumber = 1,
  };
  // repeated bytes field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // repeated bytes src_set = 3;
  int src_set_size() const;
  private:
  int _internal_src_set_size() const;
  public:
  void clear_src_set();
  const std::string& src_set(int index) const;
  std::string* mutable_src_set(int index);
  void set_src_set(int index, const std::string& value);
  void set_src_set(int index, std::string&& value);
  void set_src_set(int index, const char* value);
  void set_src_set(int index, const void* value, size_t size);
  std::string* add_src_set();
  void add_src_set(const std::string& value);
  void add_src_set(std::string&& value);
  void add_src_set(const char* value);
  void add_src_set(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& src_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_src_set();
  private:
  const std::string& _internal_src_set(int index) const;
  std::string* _internal_add_src_set();
  public:

  // .phxkv.SetRequest.enum_req req_type = 1;
  void clear_req_type();
  ::phxkv::SetRequest_enum_req req_type() const;
  void set_req_type(::phxkv::SetRequest_enum_req value);
  private:
  ::phxkv::SetRequest_enum_req _internal_req_type() const;
  void _internal_set_req_type(::phxkv::SetRequest_enum_req value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.SetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> src_set_;
  int req_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class SetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.SetResponse) */ {
 public:
  inline SetResponse() : SetResponse(nullptr) {};
  virtual ~SetResponse();

  SetResponse(const SetResponse& from);
  SetResponse(SetResponse&& from) noexcept
    : SetResponse() {
    *this = ::std::move(from);
  }

  inline SetResponse& operator=(const SetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResponse& operator=(SetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResponse* internal_default_instance() {
    return reinterpret_cast<const SetResponse*>(
               &_SetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetResponse& a, SetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResponse* New() const final {
    return CreateMaybeMessage<SetResponse>(nullptr);
  }

  SetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResponse& from);
  void MergeFrom(const SetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.SetResponse";
  }
  protected:
  explicit SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated bytes field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.SetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class ZsetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.ZsetRequest) */ {
 public:
  inline ZsetRequest() : ZsetRequest(nullptr) {};
  virtual ~ZsetRequest();

  ZsetRequest(const ZsetRequest& from);
  ZsetRequest(ZsetRequest&& from) noexcept
    : ZsetRequest() {
    *this = ::std::move(from);
  }

  inline ZsetRequest& operator=(const ZsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZsetRequest& operator=(ZsetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZsetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZsetRequest* internal_default_instance() {
    return reinterpret_cast<const ZsetRequest*>(
               &_ZsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ZsetRequest& a, ZsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZsetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZsetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZsetRequest* New() const final {
    return CreateMaybeMessage<ZsetRequest>(nullptr);
  }

  ZsetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZsetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZsetRequest& from);
  void MergeFrom(const ZsetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZsetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.ZsetRequest";
  }
  protected:
  explicit ZsetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ZsetRequest_enum_req enum_req;
  static constexpr enum_req ZSET_ADD =
    ZsetRequest_enum_req_ZSET_ADD;
  static constexpr enum_req ZSET_CARD =
    ZsetRequest_enum_req_ZSET_CARD;
  static constexpr enum_req ZSET_COUNT =
    ZsetRequest_enum_req_ZSET_COUNT;
  static constexpr enum_req ZSET_INCRBY =
    ZsetRequest_enum_req_ZSET_INCRBY;
  static constexpr enum_req ZSET_RANGE =
    ZsetRequest_enum_req_ZSET_RANGE;
  static constexpr enum_req ZSET_UNIONSTORE =
    ZsetRequest_enum_req_ZSET_UNIONSTORE;
  static constexpr enum_req ZSET_INTERSTORE =
    ZsetRequest_enum_req_ZSET_INTERSTORE;
  static constexpr enum_req ZSET_RANGEBYSCORE =
    ZsetRequest_enum_req_ZSET_RANGEBYSCORE;
  static constexpr enum_req ZSET_REM =
    ZsetRequest_enum_req_ZSET_REM;
  static constexpr enum_req ZSET_RANK =
    ZsetRequest_enum_req_ZSET_RANK;
  static constexpr enum_req ZSET_REVRANK =
    ZsetRequest_enum_req_ZSET_REVRANK;
  static constexpr enum_req ZSET_SCORE =
    ZsetRequest_enum_req_ZSET_SCORE;
  static constexpr enum_req ZSET_REVRANGE =
    ZsetRequest_enum_req_ZSET_REVRANGE;
  static constexpr enum_req ZSET_REVRANGEBYSCORE =
    ZsetRequest_enum_req_ZSET_REVRANGEBYSCORE;
  static constexpr enum_req ZSET_REM_RANGEBYRANK =
    ZsetRequest_enum_req_ZSET_REM_RANGEBYRANK;
  static constexpr enum_req ZSET_REM_RANGEBYSCORE =
    ZsetRequest_enum_req_ZSET_REM_RANGEBYSCORE;
  static inline bool enum_req_IsValid(int value) {
    return ZsetRequest_enum_req_IsValid(value);
  }
  static constexpr enum_req enum_req_MIN =
    ZsetRequest_enum_req_enum_req_MIN;
  static constexpr enum_req enum_req_MAX =
    ZsetRequest_enum_req_enum_req_MAX;
  static constexpr int enum_req_ARRAYSIZE =
    ZsetRequest_enum_req_enum_req_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  enum_req_descriptor() {
    return ZsetRequest_enum_req_descriptor();
  }
  template<typename T>
  static inline const std::string& enum_req_Name(T enum_t_value) {
    static_assert(::std::is_same<T, enum_req>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function enum_req_Name.");
    return ZsetRequest_enum_req_Name(enum_t_value);
  }
  static inline bool enum_req_Parse(const std::string& name,
      enum_req* value) {
    return ZsetRequest_enum_req_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldKeyFieldNumber = 2,
    kFieldScoreFieldNumber = 3,
    kSrcSetFieldNumber = 7,
    kMinFieldNumber = 4,
    kMaxFieldNumber = 5,
    kIncrscoreFieldNumber = 6,
    kStartPosFieldNumber = 8,
    kEndPosFieldNumber = 9,
    kOffsetFieldNumber = 10,
    kCountFieldNumber = 11,
    kReqTypeFieldNumber = 1,
  };
  // repeated .phxkv.ZsetField field_key = 2;
  int field_key_size() const;
  private:
  int _internal_field_key_size() const;
  public:
  void clear_field_key();
  ::phxkv::ZsetField* mutable_field_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
      mutable_field_key();
  private:
  const ::phxkv::ZsetField& _internal_field_key(int index) const;
  ::phxkv::ZsetField* _internal_add_field_key();
  public:
  const ::phxkv::ZsetField& field_key(int index) const;
  ::phxkv::ZsetField* add_field_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
      field_key() const;

  // repeated .phxkv.ZsetField field_score = 3;
  int field_score_size() const;
  private:
  int _internal_field_score_size() const;
  public:
  void clear_field_score();
  ::phxkv::ZsetField* mutable_field_score(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
      mutable_field_score();
  private:
  const ::phxkv::ZsetField& _internal_field_score(int index) const;
  ::phxkv::ZsetField* _internal_add_field_score();
  public:
  const ::phxkv::ZsetField& field_score(int index) const;
  ::phxkv::ZsetField* add_field_score();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
      field_score() const;

  // repeated bytes src_set = 7;
  int src_set_size() const;
  private:
  int _internal_src_set_size() const;
  public:
  void clear_src_set();
  const std::string& src_set(int index) const;
  std::string* mutable_src_set(int index);
  void set_src_set(int index, const std::string& value);
  void set_src_set(int index, std::string&& value);
  void set_src_set(int index, const char* value);
  void set_src_set(int index, const void* value, size_t size);
  std::string* add_src_set();
  void add_src_set(const std::string& value);
  void add_src_set(std::string&& value);
  void add_src_set(const char* value);
  void add_src_set(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& src_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_src_set();
  private:
  const std::string& _internal_src_set(int index) const;
  std::string* _internal_add_src_set();
  public:

  // int64 min = 4;
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int64 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max = 5;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 incrscore = 6;
  void clear_incrscore();
  ::PROTOBUF_NAMESPACE_ID::int64 incrscore() const;
  void set_incrscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_incrscore() const;
  void _internal_set_incrscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_pos = 8;
  void clear_start_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 start_pos() const;
  void set_start_pos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_pos() const;
  void _internal_set_start_pos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_pos = 9;
  void clear_end_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 end_pos() const;
  void set_end_pos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_pos() const;
  void _internal_set_end_pos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 10;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 11;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .phxkv.ZsetRequest.enum_req req_type = 1;
  void clear_req_type();
  ::phxkv::ZsetRequest_enum_req req_type() const;
  void set_req_type(::phxkv::ZsetRequest_enum_req value);
  private:
  ::phxkv::ZsetRequest_enum_req _internal_req_type() const;
  void _internal_set_req_type(::phxkv::ZsetRequest_enum_req value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.ZsetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField > field_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField > field_score_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> src_set_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_;
  ::PROTOBUF_NAMESPACE_ID::int64 incrscore_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  int req_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class ZsetField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.ZsetField) */ {
 public:
  inline ZsetField() : ZsetField(nullptr) {};
  virtual ~ZsetField();

  ZsetField(const ZsetField& from);
  ZsetField(ZsetField&& from) noexcept
    : ZsetField() {
    *this = ::std::move(from);
  }

  inline ZsetField& operator=(const ZsetField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZsetField& operator=(ZsetField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZsetField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZsetField* internal_default_instance() {
    return reinterpret_cast<const ZsetField*>(
               &_ZsetField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ZsetField& a, ZsetField& b) {
    a.Swap(&b);
  }
  inline void Swap(ZsetField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZsetField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZsetField* New() const final {
    return CreateMaybeMessage<ZsetField>(nullptr);
  }

  ZsetField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZsetField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZsetField& from);
  void MergeFrom(const ZsetField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZsetField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.ZsetField";
  }
  protected:
  explicit ZsetField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldKeyFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // bytes field_key = 1;
  void clear_field_key();
  const std::string& field_key() const;
  void set_field_key(const std::string& value);
  void set_field_key(std::string&& value);
  void set_field_key(const char* value);
  void set_field_key(const void* value, size_t size);
  std::string* mutable_field_key();
  std::string* release_field_key();
  void set_allocated_field_key(std::string* field_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_key(
      std::string* field_key);
  private:
  const std::string& _internal_field_key() const;
  void _internal_set_field_key(const std::string& value);
  std::string* _internal_mutable_field_key();
  public:

  // bytes field_value = 2;
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const void* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_value(
      std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // @@protoc_insertion_point(class_scope:phxkv.ZsetField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// -------------------------------------------------------------------

class ZsetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxkv.ZsetResponse) */ {
 public:
  inline ZsetResponse() : ZsetResponse(nullptr) {};
  virtual ~ZsetResponse();

  ZsetResponse(const ZsetResponse& from);
  ZsetResponse(ZsetResponse&& from) noexcept
    : ZsetResponse() {
    *this = ::std::move(from);
  }

  inline ZsetResponse& operator=(const ZsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZsetResponse& operator=(ZsetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZsetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZsetResponse* internal_default_instance() {
    return reinterpret_cast<const ZsetResponse*>(
               &_ZsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ZsetResponse& a, ZsetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZsetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZsetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZsetResponse* New() const final {
    return CreateMaybeMessage<ZsetResponse>(nullptr);
  }

  ZsetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZsetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZsetResponse& from);
  void MergeFrom(const ZsetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZsetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxkv.ZsetResponse";
  }
  protected:
  explicit ZsetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxkv_2eproto);
    return ::descriptor_table_phxkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kMemRankFieldNumber = 2,
    kMemScoreFieldNumber = 3,
  };
  // repeated .phxkv.ZsetField field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::phxkv::ZsetField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
      mutable_field();
  private:
  const ::phxkv::ZsetField& _internal_field(int index) const;
  ::phxkv::ZsetField* _internal_add_field();
  public:
  const ::phxkv::ZsetField& field(int index) const;
  ::phxkv::ZsetField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
      field() const;

  // int64 mem_rank = 2;
  void clear_mem_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_rank() const;
  void set_mem_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mem_rank() const;
  void _internal_set_mem_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mem_score = 3;
  void clear_mem_score();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_score() const;
  void set_mem_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mem_score() const;
  void _internal_set_mem_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:phxkv.ZsetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField > field_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxkv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DropMastReq

// int32 cnt = 1;
inline void DropMastReq::clear_cnt() {
  cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropMastReq::_internal_cnt() const {
  return cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropMastReq::cnt() const {
  // @@protoc_insertion_point(field_get:phxkv.DropMastReq.cnt)
  return _internal_cnt();
}
inline void DropMastReq::_internal_set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cnt_ = value;
}
inline void DropMastReq::set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:phxkv.DropMastReq.cnt)
}

// -------------------------------------------------------------------

// DropMastRes

// int32 ret = 1;
inline void DropMastRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropMastRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropMastRes::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.DropMastRes.ret)
  return _internal_ret();
}
inline void DropMastRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void DropMastRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.DropMastRes.ret)
}

// -------------------------------------------------------------------

// BemasterReq

// int32 flag = 1;
inline void BemasterReq::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BemasterReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BemasterReq::flag() const {
  // @@protoc_insertion_point(field_get:phxkv.BemasterReq.flag)
  return _internal_flag();
}
inline void BemasterReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void BemasterReq::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:phxkv.BemasterReq.flag)
}

// -------------------------------------------------------------------

// BemasterRes

// int32 ret = 1;
inline void BemasterRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BemasterRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BemasterRes::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.BemasterRes.ret)
  return _internal_ret();
}
inline void BemasterRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void BemasterRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.BemasterRes.ret)
}

// -------------------------------------------------------------------

// GroupListReq

// int32 groupcnt = 1;
inline void GroupListReq::clear_groupcnt() {
  groupcnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupListReq::_internal_groupcnt() const {
  return groupcnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupListReq::groupcnt() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupListReq.groupcnt)
  return _internal_groupcnt();
}
inline void GroupListReq::_internal_set_groupcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupcnt_ = value;
}
inline void GroupListReq::set_groupcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupcnt(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupListReq.groupcnt)
}

// -------------------------------------------------------------------

// GroupListRes

// int32 ret = 1;
inline void GroupListRes::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupListRes::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupListRes::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupListRes.ret)
  return _internal_ret();
}
inline void GroupListRes::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GroupListRes::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupListRes.ret)
}

// .phxkv.GroupsMapMsg subMap = 2;
inline bool GroupListRes::_internal_has_submap() const {
  return this != internal_default_instance() && submap_ != nullptr;
}
inline bool GroupListRes::has_submap() const {
  return _internal_has_submap();
}
inline void GroupListRes::clear_submap() {
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
inline const ::phxkv::GroupsMapMsg& GroupListRes::_internal_submap() const {
  const ::phxkv::GroupsMapMsg* p = submap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::GroupsMapMsg*>(
      &::phxkv::_GroupsMapMsg_default_instance_);
}
inline const ::phxkv::GroupsMapMsg& GroupListRes::submap() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupListRes.subMap)
  return _internal_submap();
}
inline void GroupListRes::unsafe_arena_set_allocated_submap(
    ::phxkv::GroupsMapMsg* submap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_);
  }
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.GroupListRes.subMap)
}
inline ::phxkv::GroupsMapMsg* GroupListRes::release_submap() {
  auto temp = unsafe_arena_release_submap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::GroupsMapMsg* GroupListRes::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_release:phxkv.GroupListRes.subMap)
  
  ::phxkv::GroupsMapMsg* temp = submap_;
  submap_ = nullptr;
  return temp;
}
inline ::phxkv::GroupsMapMsg* GroupListRes::_internal_mutable_submap() {
  
  if (submap_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::GroupsMapMsg>(GetArena());
    submap_ = p;
  }
  return submap_;
}
inline ::phxkv::GroupsMapMsg* GroupListRes::mutable_submap() {
  // @@protoc_insertion_point(field_mutable:phxkv.GroupListRes.subMap)
  return _internal_mutable_submap();
}
inline void GroupListRes::set_allocated_submap(::phxkv::GroupsMapMsg* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submap_;
  }
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submap);
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:phxkv.GroupListRes.subMap)
}

// -------------------------------------------------------------------

// KVOperator

// string key = 1;
inline void KVOperator::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KVOperator::key() const {
  // @@protoc_insertion_point(field_get:phxkv.KVOperator.key)
  return _internal_key();
}
inline void KVOperator::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxkv.KVOperator.key)
}
inline std::string* KVOperator::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVOperator.key)
  return _internal_mutable_key();
}
inline const std::string& KVOperator::_internal_key() const {
  return key_.Get();
}
inline void KVOperator::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KVOperator::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KVOperator.key)
}
inline void KVOperator::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KVOperator.key)
}
inline void KVOperator::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KVOperator.key)
}
inline std::string* KVOperator::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KVOperator::release_key() {
  // @@protoc_insertion_point(field_release:phxkv.KVOperator.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KVOperator::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVOperator.key)
}
inline std::string* KVOperator::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KVOperator.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KVOperator::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVOperator.key)
}

// bytes value = 2;
inline void KVOperator::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KVOperator::value() const {
  // @@protoc_insertion_point(field_get:phxkv.KVOperator.value)
  return _internal_value();
}
inline void KVOperator::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:phxkv.KVOperator.value)
}
inline std::string* KVOperator::mutable_value() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVOperator.value)
  return _internal_mutable_value();
}
inline const std::string& KVOperator::_internal_value() const {
  return value_.Get();
}
inline void KVOperator::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KVOperator::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KVOperator.value)
}
inline void KVOperator::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KVOperator.value)
}
inline void KVOperator::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KVOperator.value)
}
inline std::string* KVOperator::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KVOperator::release_value() {
  // @@protoc_insertion_point(field_release:phxkv.KVOperator.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KVOperator::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVOperator.value)
}
inline std::string* KVOperator::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KVOperator.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KVOperator::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVOperator.value)
}

// uint32 operator = 3;
inline void KVOperator::clear_operator_() {
  operator__ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KVOperator::_internal_operator_() const {
  return operator__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KVOperator::operator_() const {
  // @@protoc_insertion_point(field_get:phxkv.KVOperator.operator)
  return _internal_operator_();
}
inline void KVOperator::_internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operator__ = value;
}
inline void KVOperator::set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:phxkv.KVOperator.operator)
}

// uint32 groupid = 4;
inline void KVOperator::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KVOperator::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KVOperator::groupid() const {
  // @@protoc_insertion_point(field_get:phxkv.KVOperator.groupid)
  return _internal_groupid();
}
inline void KVOperator::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void KVOperator::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:phxkv.KVOperator.groupid)
}

// -------------------------------------------------------------------

// KVResponse

// bytes data = 1;
inline void KVResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KVResponse::data() const {
  // @@protoc_insertion_point(field_get:phxkv.KVResponse.data)
  return _internal_data();
}
inline void KVResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:phxkv.KVResponse.data)
}
inline std::string* KVResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVResponse.data)
  return _internal_mutable_data();
}
inline const std::string& KVResponse::_internal_data() const {
  return data_.Get();
}
inline void KVResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KVResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KVResponse.data)
}
inline void KVResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KVResponse.data)
}
inline void KVResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KVResponse.data)
}
inline std::string* KVResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KVResponse::release_data() {
  // @@protoc_insertion_point(field_release:phxkv.KVResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KVResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVResponse.data)
}
inline std::string* KVResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KVResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KVResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVResponse.data)
}

// int32 ret = 2;
inline void KVResponse::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KVResponse::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KVResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.KVResponse.ret)
  return _internal_ret();
}
inline void KVResponse::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void KVResponse::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.KVResponse.ret)
}

// .phxkv.GroupsMapMsg subMap = 3;
inline bool KVResponse::_internal_has_submap() const {
  return this != internal_default_instance() && submap_ != nullptr;
}
inline bool KVResponse::has_submap() const {
  return _internal_has_submap();
}
inline void KVResponse::clear_submap() {
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
inline const ::phxkv::GroupsMapMsg& KVResponse::_internal_submap() const {
  const ::phxkv::GroupsMapMsg* p = submap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::GroupsMapMsg*>(
      &::phxkv::_GroupsMapMsg_default_instance_);
}
inline const ::phxkv::GroupsMapMsg& KVResponse::submap() const {
  // @@protoc_insertion_point(field_get:phxkv.KVResponse.subMap)
  return _internal_submap();
}
inline void KVResponse::unsafe_arena_set_allocated_submap(
    ::phxkv::GroupsMapMsg* submap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_);
  }
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVResponse.subMap)
}
inline ::phxkv::GroupsMapMsg* KVResponse::release_submap() {
  auto temp = unsafe_arena_release_submap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::GroupsMapMsg* KVResponse::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_release:phxkv.KVResponse.subMap)
  
  ::phxkv::GroupsMapMsg* temp = submap_;
  submap_ = nullptr;
  return temp;
}
inline ::phxkv::GroupsMapMsg* KVResponse::_internal_mutable_submap() {
  
  if (submap_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::GroupsMapMsg>(GetArena());
    submap_ = p;
  }
  return submap_;
}
inline ::phxkv::GroupsMapMsg* KVResponse::mutable_submap() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVResponse.subMap)
  return _internal_mutable_submap();
}
inline void KVResponse::set_allocated_submap(::phxkv::GroupsMapMsg* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submap_;
  }
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submap);
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVResponse.subMap)
}

// -------------------------------------------------------------------

// GroupsMapMsg

// int32 ret = 1;
inline void GroupsMapMsg::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupsMapMsg::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupsMapMsg::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupsMapMsg.ret)
  return _internal_ret();
}
inline void GroupsMapMsg::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GroupsMapMsg::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupsMapMsg.ret)
}

// repeated .phxkv.GroupMsg subGroup = 2;
inline int GroupsMapMsg::_internal_subgroup_size() const {
  return subgroup_.size();
}
inline int GroupsMapMsg::subgroup_size() const {
  return _internal_subgroup_size();
}
inline void GroupsMapMsg::clear_subgroup() {
  subgroup_.Clear();
}
inline ::phxkv::GroupMsg* GroupsMapMsg::mutable_subgroup(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.GroupsMapMsg.subGroup)
  return subgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::GroupMsg >*
GroupsMapMsg::mutable_subgroup() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.GroupsMapMsg.subGroup)
  return &subgroup_;
}
inline const ::phxkv::GroupMsg& GroupsMapMsg::_internal_subgroup(int index) const {
  return subgroup_.Get(index);
}
inline const ::phxkv::GroupMsg& GroupsMapMsg::subgroup(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.GroupsMapMsg.subGroup)
  return _internal_subgroup(index);
}
inline ::phxkv::GroupMsg* GroupsMapMsg::_internal_add_subgroup() {
  return subgroup_.Add();
}
inline ::phxkv::GroupMsg* GroupsMapMsg::add_subgroup() {
  // @@protoc_insertion_point(field_add:phxkv.GroupsMapMsg.subGroup)
  return _internal_add_subgroup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::GroupMsg >&
GroupsMapMsg::subgroup() const {
  // @@protoc_insertion_point(field_list:phxkv.GroupsMapMsg.subGroup)
  return subgroup_;
}

// -------------------------------------------------------------------

// GroupMsg

// int32 ret = 1;
inline void GroupMsg::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupMsg.ret)
  return _internal_ret();
}
inline void GroupMsg::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GroupMsg::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupMsg.ret)
}

// int32 groupid = 2;
inline void GroupMsg::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::groupid() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupMsg.groupid)
  return _internal_groupid();
}
inline void GroupMsg::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void GroupMsg::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupMsg.groupid)
}

// bytes masterip = 3;
inline void GroupMsg::clear_masterip() {
  masterip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMsg::masterip() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupMsg.masterip)
  return _internal_masterip();
}
inline void GroupMsg::set_masterip(const std::string& value) {
  _internal_set_masterip(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupMsg.masterip)
}
inline std::string* GroupMsg::mutable_masterip() {
  // @@protoc_insertion_point(field_mutable:phxkv.GroupMsg.masterip)
  return _internal_mutable_masterip();
}
inline const std::string& GroupMsg::_internal_masterip() const {
  return masterip_.Get();
}
inline void GroupMsg::_internal_set_masterip(const std::string& value) {
  
  masterip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMsg::set_masterip(std::string&& value) {
  
  masterip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.GroupMsg.masterip)
}
inline void GroupMsg::set_masterip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masterip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.GroupMsg.masterip)
}
inline void GroupMsg::set_masterip(const void* value,
    size_t size) {
  
  masterip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.GroupMsg.masterip)
}
inline std::string* GroupMsg::_internal_mutable_masterip() {
  
  return masterip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMsg::release_masterip() {
  // @@protoc_insertion_point(field_release:phxkv.GroupMsg.masterip)
  return masterip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMsg::set_allocated_masterip(std::string* masterip) {
  if (masterip != nullptr) {
    
  } else {
    
  }
  masterip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masterip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.GroupMsg.masterip)
}
inline std::string* GroupMsg::unsafe_arena_release_masterip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.GroupMsg.masterip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return masterip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupMsg::unsafe_arena_set_allocated_masterip(
    std::string* masterip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (masterip != nullptr) {
    
  } else {
    
  }
  masterip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      masterip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.GroupMsg.masterip)
}

// int32 masterport = 4;
inline void GroupMsg::clear_masterport() {
  masterport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_masterport() const {
  return masterport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::masterport() const {
  // @@protoc_insertion_point(field_get:phxkv.GroupMsg.masterport)
  return _internal_masterport();
}
inline void GroupMsg::_internal_set_masterport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  masterport_ = value;
}
inline void GroupMsg::set_masterport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_masterport(value);
  // @@protoc_insertion_point(field_set:phxkv.GroupMsg.masterport)
}

// -------------------------------------------------------------------

// KvBatchPutRequest

// repeated .phxkv.KvBatchPutSubRequest subs = 1;
inline int KvBatchPutRequest::_internal_subs_size() const {
  return subs_.size();
}
inline int KvBatchPutRequest::subs_size() const {
  return _internal_subs_size();
}
inline void KvBatchPutRequest::clear_subs() {
  subs_.Clear();
}
inline ::phxkv::KvBatchPutSubRequest* KvBatchPutRequest::mutable_subs(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchPutRequest.subs)
  return subs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchPutSubRequest >*
KvBatchPutRequest::mutable_subs() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.KvBatchPutRequest.subs)
  return &subs_;
}
inline const ::phxkv::KvBatchPutSubRequest& KvBatchPutRequest::_internal_subs(int index) const {
  return subs_.Get(index);
}
inline const ::phxkv::KvBatchPutSubRequest& KvBatchPutRequest::subs(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutRequest.subs)
  return _internal_subs(index);
}
inline ::phxkv::KvBatchPutSubRequest* KvBatchPutRequest::_internal_add_subs() {
  return subs_.Add();
}
inline ::phxkv::KvBatchPutSubRequest* KvBatchPutRequest::add_subs() {
  // @@protoc_insertion_point(field_add:phxkv.KvBatchPutRequest.subs)
  return _internal_add_subs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchPutSubRequest >&
KvBatchPutRequest::subs() const {
  // @@protoc_insertion_point(field_list:phxkv.KvBatchPutRequest.subs)
  return subs_;
}

// uint32 operator = 2;
inline void KvBatchPutRequest::clear_operator_() {
  operator__ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchPutRequest::_internal_operator_() const {
  return operator__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchPutRequest::operator_() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutRequest.operator)
  return _internal_operator_();
}
inline void KvBatchPutRequest::_internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operator__ = value;
}
inline void KvBatchPutRequest::set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchPutRequest.operator)
}

// uint32 groupid = 3;
inline void KvBatchPutRequest::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchPutRequest::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchPutRequest::groupid() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutRequest.groupid)
  return _internal_groupid();
}
inline void KvBatchPutRequest::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void KvBatchPutRequest::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchPutRequest.groupid)
}

// -------------------------------------------------------------------

// KvBatchPutSubRequest

// bytes key = 1;
inline void KvBatchPutSubRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchPutSubRequest::key() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutSubRequest.key)
  return _internal_key();
}
inline void KvBatchPutSubRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchPutSubRequest.key)
}
inline std::string* KvBatchPutSubRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchPutSubRequest.key)
  return _internal_mutable_key();
}
inline const std::string& KvBatchPutSubRequest::_internal_key() const {
  return key_.Get();
}
inline void KvBatchPutSubRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchPutSubRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchPutSubRequest.key)
}
inline void KvBatchPutSubRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchPutSubRequest.key)
}
inline void KvBatchPutSubRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchPutSubRequest.key)
}
inline std::string* KvBatchPutSubRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchPutSubRequest::release_key() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchPutSubRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchPutSubRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchPutSubRequest.key)
}
inline std::string* KvBatchPutSubRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchPutSubRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchPutSubRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchPutSubRequest.key)
}

// bytes value = 2;
inline void KvBatchPutSubRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchPutSubRequest::value() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutSubRequest.value)
  return _internal_value();
}
inline void KvBatchPutSubRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchPutSubRequest.value)
}
inline std::string* KvBatchPutSubRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchPutSubRequest.value)
  return _internal_mutable_value();
}
inline const std::string& KvBatchPutSubRequest::_internal_value() const {
  return value_.Get();
}
inline void KvBatchPutSubRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchPutSubRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchPutSubRequest.value)
}
inline void KvBatchPutSubRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchPutSubRequest.value)
}
inline void KvBatchPutSubRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchPutSubRequest.value)
}
inline std::string* KvBatchPutSubRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchPutSubRequest::release_value() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchPutSubRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchPutSubRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchPutSubRequest.value)
}
inline std::string* KvBatchPutSubRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchPutSubRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchPutSubRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchPutSubRequest.value)
}

// -------------------------------------------------------------------

// KvBatchPutResponse

// int32 ret = 1;
inline void KvBatchPutResponse::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchPutResponse::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchPutResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutResponse.ret)
  return _internal_ret();
}
inline void KvBatchPutResponse::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void KvBatchPutResponse::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchPutResponse.ret)
}

// .phxkv.GroupsMapMsg subMap = 2;
inline bool KvBatchPutResponse::_internal_has_submap() const {
  return this != internal_default_instance() && submap_ != nullptr;
}
inline bool KvBatchPutResponse::has_submap() const {
  return _internal_has_submap();
}
inline void KvBatchPutResponse::clear_submap() {
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
inline const ::phxkv::GroupsMapMsg& KvBatchPutResponse::_internal_submap() const {
  const ::phxkv::GroupsMapMsg* p = submap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::GroupsMapMsg*>(
      &::phxkv::_GroupsMapMsg_default_instance_);
}
inline const ::phxkv::GroupsMapMsg& KvBatchPutResponse::submap() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchPutResponse.subMap)
  return _internal_submap();
}
inline void KvBatchPutResponse::unsafe_arena_set_allocated_submap(
    ::phxkv::GroupsMapMsg* submap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_);
  }
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchPutResponse.subMap)
}
inline ::phxkv::GroupsMapMsg* KvBatchPutResponse::release_submap() {
  auto temp = unsafe_arena_release_submap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::GroupsMapMsg* KvBatchPutResponse::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchPutResponse.subMap)
  
  ::phxkv::GroupsMapMsg* temp = submap_;
  submap_ = nullptr;
  return temp;
}
inline ::phxkv::GroupsMapMsg* KvBatchPutResponse::_internal_mutable_submap() {
  
  if (submap_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::GroupsMapMsg>(GetArena());
    submap_ = p;
  }
  return submap_;
}
inline ::phxkv::GroupsMapMsg* KvBatchPutResponse::mutable_submap() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchPutResponse.subMap)
  return _internal_mutable_submap();
}
inline void KvBatchPutResponse::set_allocated_submap(::phxkv::GroupsMapMsg* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submap_;
  }
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submap);
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchPutResponse.subMap)
}

// -------------------------------------------------------------------

// KvBatchGetRequest

// repeated .phxkv.KvBatchGetSubRequest subs = 1;
inline int KvBatchGetRequest::_internal_subs_size() const {
  return subs_.size();
}
inline int KvBatchGetRequest::subs_size() const {
  return _internal_subs_size();
}
inline void KvBatchGetRequest::clear_subs() {
  subs_.Clear();
}
inline ::phxkv::KvBatchGetSubRequest* KvBatchGetRequest::mutable_subs(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetRequest.subs)
  return subs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubRequest >*
KvBatchGetRequest::mutable_subs() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.KvBatchGetRequest.subs)
  return &subs_;
}
inline const ::phxkv::KvBatchGetSubRequest& KvBatchGetRequest::_internal_subs(int index) const {
  return subs_.Get(index);
}
inline const ::phxkv::KvBatchGetSubRequest& KvBatchGetRequest::subs(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetRequest.subs)
  return _internal_subs(index);
}
inline ::phxkv::KvBatchGetSubRequest* KvBatchGetRequest::_internal_add_subs() {
  return subs_.Add();
}
inline ::phxkv::KvBatchGetSubRequest* KvBatchGetRequest::add_subs() {
  // @@protoc_insertion_point(field_add:phxkv.KvBatchGetRequest.subs)
  return _internal_add_subs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubRequest >&
KvBatchGetRequest::subs() const {
  // @@protoc_insertion_point(field_list:phxkv.KvBatchGetRequest.subs)
  return subs_;
}

// uint32 operator = 2;
inline void KvBatchGetRequest::clear_operator_() {
  operator__ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchGetRequest::_internal_operator_() const {
  return operator__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchGetRequest::operator_() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetRequest.operator)
  return _internal_operator_();
}
inline void KvBatchGetRequest::_internal_set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operator__ = value;
}
inline void KvBatchGetRequest::set_operator_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetRequest.operator)
}

// uint32 groupid = 3;
inline void KvBatchGetRequest::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchGetRequest::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KvBatchGetRequest::groupid() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetRequest.groupid)
  return _internal_groupid();
}
inline void KvBatchGetRequest::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void KvBatchGetRequest::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetRequest.groupid)
}

// -------------------------------------------------------------------

// KvBatchGetSubRequest

// bytes key = 1;
inline void KvBatchGetSubRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchGetSubRequest::key() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetSubRequest.key)
  return _internal_key();
}
inline void KvBatchGetSubRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetSubRequest.key)
}
inline std::string* KvBatchGetSubRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetSubRequest.key)
  return _internal_mutable_key();
}
inline const std::string& KvBatchGetSubRequest::_internal_key() const {
  return key_.Get();
}
inline void KvBatchGetSubRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchGetSubRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchGetSubRequest.key)
}
inline void KvBatchGetSubRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchGetSubRequest.key)
}
inline void KvBatchGetSubRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchGetSubRequest.key)
}
inline std::string* KvBatchGetSubRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchGetSubRequest::release_key() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchGetSubRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchGetSubRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchGetSubRequest.key)
}
inline std::string* KvBatchGetSubRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchGetSubRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchGetSubRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchGetSubRequest.key)
}

// -------------------------------------------------------------------

// KvBatchGetResponse

// int32 ret = 1;
inline void KvBatchGetResponse::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchGetResponse::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchGetResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetResponse.ret)
  return _internal_ret();
}
inline void KvBatchGetResponse::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void KvBatchGetResponse::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetResponse.ret)
}

// repeated .phxkv.KvBatchGetSubResponse values = 2;
inline int KvBatchGetResponse::_internal_values_size() const {
  return values_.size();
}
inline int KvBatchGetResponse::values_size() const {
  return _internal_values_size();
}
inline void KvBatchGetResponse::clear_values() {
  values_.Clear();
}
inline ::phxkv::KvBatchGetSubResponse* KvBatchGetResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetResponse.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubResponse >*
KvBatchGetResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.KvBatchGetResponse.values)
  return &values_;
}
inline const ::phxkv::KvBatchGetSubResponse& KvBatchGetResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::phxkv::KvBatchGetSubResponse& KvBatchGetResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetResponse.values)
  return _internal_values(index);
}
inline ::phxkv::KvBatchGetSubResponse* KvBatchGetResponse::_internal_add_values() {
  return values_.Add();
}
inline ::phxkv::KvBatchGetSubResponse* KvBatchGetResponse::add_values() {
  // @@protoc_insertion_point(field_add:phxkv.KvBatchGetResponse.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::KvBatchGetSubResponse >&
KvBatchGetResponse::values() const {
  // @@protoc_insertion_point(field_list:phxkv.KvBatchGetResponse.values)
  return values_;
}

// .phxkv.GroupsMapMsg subMap = 3;
inline bool KvBatchGetResponse::_internal_has_submap() const {
  return this != internal_default_instance() && submap_ != nullptr;
}
inline bool KvBatchGetResponse::has_submap() const {
  return _internal_has_submap();
}
inline void KvBatchGetResponse::clear_submap() {
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
inline const ::phxkv::GroupsMapMsg& KvBatchGetResponse::_internal_submap() const {
  const ::phxkv::GroupsMapMsg* p = submap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::GroupsMapMsg*>(
      &::phxkv::_GroupsMapMsg_default_instance_);
}
inline const ::phxkv::GroupsMapMsg& KvBatchGetResponse::submap() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetResponse.subMap)
  return _internal_submap();
}
inline void KvBatchGetResponse::unsafe_arena_set_allocated_submap(
    ::phxkv::GroupsMapMsg* submap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_);
  }
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchGetResponse.subMap)
}
inline ::phxkv::GroupsMapMsg* KvBatchGetResponse::release_submap() {
  auto temp = unsafe_arena_release_submap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::GroupsMapMsg* KvBatchGetResponse::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchGetResponse.subMap)
  
  ::phxkv::GroupsMapMsg* temp = submap_;
  submap_ = nullptr;
  return temp;
}
inline ::phxkv::GroupsMapMsg* KvBatchGetResponse::_internal_mutable_submap() {
  
  if (submap_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::GroupsMapMsg>(GetArena());
    submap_ = p;
  }
  return submap_;
}
inline ::phxkv::GroupsMapMsg* KvBatchGetResponse::mutable_submap() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetResponse.subMap)
  return _internal_mutable_submap();
}
inline void KvBatchGetResponse::set_allocated_submap(::phxkv::GroupsMapMsg* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submap_;
  }
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submap);
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchGetResponse.subMap)
}

// -------------------------------------------------------------------

// KvBatchGetSubResponse

// int32 ret = 1;
inline void KvBatchGetSubResponse::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchGetSubResponse::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KvBatchGetSubResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetSubResponse.ret)
  return _internal_ret();
}
inline void KvBatchGetSubResponse::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void KvBatchGetSubResponse::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetSubResponse.ret)
}

// bytes key = 2;
inline void KvBatchGetSubResponse::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchGetSubResponse::key() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetSubResponse.key)
  return _internal_key();
}
inline void KvBatchGetSubResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetSubResponse.key)
}
inline std::string* KvBatchGetSubResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetSubResponse.key)
  return _internal_mutable_key();
}
inline const std::string& KvBatchGetSubResponse::_internal_key() const {
  return key_.Get();
}
inline void KvBatchGetSubResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchGetSubResponse::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchGetSubResponse.key)
}
inline void KvBatchGetSubResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchGetSubResponse.key)
}
inline void KvBatchGetSubResponse::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchGetSubResponse.key)
}
inline std::string* KvBatchGetSubResponse::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchGetSubResponse::release_key() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchGetSubResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchGetSubResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchGetSubResponse.key)
}
inline std::string* KvBatchGetSubResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchGetSubResponse.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchGetSubResponse::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchGetSubResponse.key)
}

// bytes value = 3;
inline void KvBatchGetSubResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchGetSubResponse::value() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetSubResponse.value)
  return _internal_value();
}
inline void KvBatchGetSubResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetSubResponse.value)
}
inline std::string* KvBatchGetSubResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetSubResponse.value)
  return _internal_mutable_value();
}
inline const std::string& KvBatchGetSubResponse::_internal_value() const {
  return value_.Get();
}
inline void KvBatchGetSubResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchGetSubResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchGetSubResponse.value)
}
inline void KvBatchGetSubResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchGetSubResponse.value)
}
inline void KvBatchGetSubResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchGetSubResponse.value)
}
inline std::string* KvBatchGetSubResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchGetSubResponse::release_value() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchGetSubResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchGetSubResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchGetSubResponse.value)
}
inline std::string* KvBatchGetSubResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchGetSubResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchGetSubResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchGetSubResponse.value)
}

// bytes data = 4;
inline void KvBatchGetSubResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KvBatchGetSubResponse::data() const {
  // @@protoc_insertion_point(field_get:phxkv.KvBatchGetSubResponse.data)
  return _internal_data();
}
inline void KvBatchGetSubResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:phxkv.KvBatchGetSubResponse.data)
}
inline std::string* KvBatchGetSubResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:phxkv.KvBatchGetSubResponse.data)
  return _internal_mutable_data();
}
inline const std::string& KvBatchGetSubResponse::_internal_data() const {
  return data_.Get();
}
inline void KvBatchGetSubResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KvBatchGetSubResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.KvBatchGetSubResponse.data)
}
inline void KvBatchGetSubResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.KvBatchGetSubResponse.data)
}
inline void KvBatchGetSubResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.KvBatchGetSubResponse.data)
}
inline std::string* KvBatchGetSubResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KvBatchGetSubResponse::release_data() {
  // @@protoc_insertion_point(field_release:phxkv.KvBatchGetSubResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvBatchGetSubResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.KvBatchGetSubResponse.data)
}
inline std::string* KvBatchGetSubResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.KvBatchGetSubResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KvBatchGetSubResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KvBatchGetSubResponse.data)
}

// -------------------------------------------------------------------

// KVMessage

// .phxkv.KVMessage.Type type = 1;
inline void KVMessage::clear_type() {
  type_ = 0;
}
inline ::phxkv::KVMessage_Type KVMessage::_internal_type() const {
  return static_cast< ::phxkv::KVMessage_Type >(type_);
}
inline ::phxkv::KVMessage_Type KVMessage::type() const {
  // @@protoc_insertion_point(field_get:phxkv.KVMessage.type)
  return _internal_type();
}
inline void KVMessage::_internal_set_type(::phxkv::KVMessage_Type value) {
  
  type_ = value;
}
inline void KVMessage::set_type(::phxkv::KVMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:phxkv.KVMessage.type)
}

// .phxkv.KVOperator PutOpt = 2;
inline bool KVMessage::_internal_has_putopt() const {
  return this != internal_default_instance() && putopt_ != nullptr;
}
inline bool KVMessage::has_putopt() const {
  return _internal_has_putopt();
}
inline void KVMessage::clear_putopt() {
  if (GetArena() == nullptr && putopt_ != nullptr) {
    delete putopt_;
  }
  putopt_ = nullptr;
}
inline const ::phxkv::KVOperator& KVMessage::_internal_putopt() const {
  const ::phxkv::KVOperator* p = putopt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::KVOperator*>(
      &::phxkv::_KVOperator_default_instance_);
}
inline const ::phxkv::KVOperator& KVMessage::putopt() const {
  // @@protoc_insertion_point(field_get:phxkv.KVMessage.PutOpt)
  return _internal_putopt();
}
inline void KVMessage::unsafe_arena_set_allocated_putopt(
    ::phxkv::KVOperator* putopt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(putopt_);
  }
  putopt_ = putopt;
  if (putopt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVMessage.PutOpt)
}
inline ::phxkv::KVOperator* KVMessage::release_putopt() {
  auto temp = unsafe_arena_release_putopt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::KVOperator* KVMessage::unsafe_arena_release_putopt() {
  // @@protoc_insertion_point(field_release:phxkv.KVMessage.PutOpt)
  
  ::phxkv::KVOperator* temp = putopt_;
  putopt_ = nullptr;
  return temp;
}
inline ::phxkv::KVOperator* KVMessage::_internal_mutable_putopt() {
  
  if (putopt_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::KVOperator>(GetArena());
    putopt_ = p;
  }
  return putopt_;
}
inline ::phxkv::KVOperator* KVMessage::mutable_putopt() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVMessage.PutOpt)
  return _internal_mutable_putopt();
}
inline void KVMessage::set_allocated_putopt(::phxkv::KVOperator* putopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete putopt_;
  }
  if (putopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(putopt);
    if (message_arena != submessage_arena) {
      putopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, putopt, submessage_arena);
    }
    
  } else {
    
  }
  putopt_ = putopt;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVMessage.PutOpt)
}

// .phxkv.KvBatchPutRequest BatchPutOpt = 3;
inline bool KVMessage::_internal_has_batchputopt() const {
  return this != internal_default_instance() && batchputopt_ != nullptr;
}
inline bool KVMessage::has_batchputopt() const {
  return _internal_has_batchputopt();
}
inline void KVMessage::clear_batchputopt() {
  if (GetArena() == nullptr && batchputopt_ != nullptr) {
    delete batchputopt_;
  }
  batchputopt_ = nullptr;
}
inline const ::phxkv::KvBatchPutRequest& KVMessage::_internal_batchputopt() const {
  const ::phxkv::KvBatchPutRequest* p = batchputopt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::KvBatchPutRequest*>(
      &::phxkv::_KvBatchPutRequest_default_instance_);
}
inline const ::phxkv::KvBatchPutRequest& KVMessage::batchputopt() const {
  // @@protoc_insertion_point(field_get:phxkv.KVMessage.BatchPutOpt)
  return _internal_batchputopt();
}
inline void KVMessage::unsafe_arena_set_allocated_batchputopt(
    ::phxkv::KvBatchPutRequest* batchputopt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batchputopt_);
  }
  batchputopt_ = batchputopt;
  if (batchputopt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVMessage.BatchPutOpt)
}
inline ::phxkv::KvBatchPutRequest* KVMessage::release_batchputopt() {
  auto temp = unsafe_arena_release_batchputopt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::KvBatchPutRequest* KVMessage::unsafe_arena_release_batchputopt() {
  // @@protoc_insertion_point(field_release:phxkv.KVMessage.BatchPutOpt)
  
  ::phxkv::KvBatchPutRequest* temp = batchputopt_;
  batchputopt_ = nullptr;
  return temp;
}
inline ::phxkv::KvBatchPutRequest* KVMessage::_internal_mutable_batchputopt() {
  
  if (batchputopt_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::KvBatchPutRequest>(GetArena());
    batchputopt_ = p;
  }
  return batchputopt_;
}
inline ::phxkv::KvBatchPutRequest* KVMessage::mutable_batchputopt() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVMessage.BatchPutOpt)
  return _internal_mutable_batchputopt();
}
inline void KVMessage::set_allocated_batchputopt(::phxkv::KvBatchPutRequest* batchputopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete batchputopt_;
  }
  if (batchputopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(batchputopt);
    if (message_arena != submessage_arena) {
      batchputopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batchputopt, submessage_arena);
    }
    
  } else {
    
  }
  batchputopt_ = batchputopt;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVMessage.BatchPutOpt)
}

// .phxkv.Request RequestOpt = 4;
inline bool KVMessage::_internal_has_requestopt() const {
  return this != internal_default_instance() && requestopt_ != nullptr;
}
inline bool KVMessage::has_requestopt() const {
  return _internal_has_requestopt();
}
inline void KVMessage::clear_requestopt() {
  if (GetArena() == nullptr && requestopt_ != nullptr) {
    delete requestopt_;
  }
  requestopt_ = nullptr;
}
inline const ::phxkv::Request& KVMessage::_internal_requestopt() const {
  const ::phxkv::Request* p = requestopt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::Request*>(
      &::phxkv::_Request_default_instance_);
}
inline const ::phxkv::Request& KVMessage::requestopt() const {
  // @@protoc_insertion_point(field_get:phxkv.KVMessage.RequestOpt)
  return _internal_requestopt();
}
inline void KVMessage::unsafe_arena_set_allocated_requestopt(
    ::phxkv::Request* requestopt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestopt_);
  }
  requestopt_ = requestopt;
  if (requestopt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.KVMessage.RequestOpt)
}
inline ::phxkv::Request* KVMessage::release_requestopt() {
  auto temp = unsafe_arena_release_requestopt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::Request* KVMessage::unsafe_arena_release_requestopt() {
  // @@protoc_insertion_point(field_release:phxkv.KVMessage.RequestOpt)
  
  ::phxkv::Request* temp = requestopt_;
  requestopt_ = nullptr;
  return temp;
}
inline ::phxkv::Request* KVMessage::_internal_mutable_requestopt() {
  
  if (requestopt_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::Request>(GetArena());
    requestopt_ = p;
  }
  return requestopt_;
}
inline ::phxkv::Request* KVMessage::mutable_requestopt() {
  // @@protoc_insertion_point(field_mutable:phxkv.KVMessage.RequestOpt)
  return _internal_mutable_requestopt();
}
inline void KVMessage::set_allocated_requestopt(::phxkv::Request* requestopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestopt_;
  }
  if (requestopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestopt);
    if (message_arena != submessage_arena) {
      requestopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestopt, submessage_arena);
    }
    
  } else {
    
  }
  requestopt_ = requestopt;
  // @@protoc_insertion_point(field_set_allocated:phxkv.KVMessage.RequestOpt)
}

// -------------------------------------------------------------------

// Request

// uint32 groupid = 1;
inline void Request::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::groupid() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.groupid)
  return _internal_groupid();
}
inline void Request::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void Request::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:phxkv.Request.groupid)
}

// .phxkv.Request.req_type data_type = 2;
inline void Request::clear_data_type() {
  data_type_ = 0;
}
inline ::phxkv::Request_req_type Request::_internal_data_type() const {
  return static_cast< ::phxkv::Request_req_type >(data_type_);
}
inline ::phxkv::Request_req_type Request::data_type() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.data_type)
  return _internal_data_type();
}
inline void Request::_internal_set_data_type(::phxkv::Request_req_type value) {
  
  data_type_ = value;
}
inline void Request::set_data_type(::phxkv::Request_req_type value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:phxkv.Request.data_type)
}

// bytes key = 3;
inline void Request::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::key() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.key)
  return _internal_key();
}
inline void Request::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxkv.Request.key)
}
inline std::string* Request::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.Request.key)
  return _internal_mutable_key();
}
inline const std::string& Request::_internal_key() const {
  return key_.Get();
}
inline void Request::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.Request.key)
}
inline void Request::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.Request.key)
}
inline void Request::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.Request.key)
}
inline std::string* Request::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_key() {
  // @@protoc_insertion_point(field_release:phxkv.Request.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.Request.key)
}
inline std::string* Request::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.Request.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Request.key)
}

// uint32 ttl = 4;
inline void Request::clear_ttl() {
  ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::ttl() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.ttl)
  return _internal_ttl();
}
inline void Request::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ttl_ = value;
}
inline void Request::set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:phxkv.Request.ttl)
}

// .phxkv.HashRequest hash_req = 5;
inline bool Request::_internal_has_hash_req() const {
  return this != internal_default_instance() && hash_req_ != nullptr;
}
inline bool Request::has_hash_req() const {
  return _internal_has_hash_req();
}
inline void Request::clear_hash_req() {
  if (GetArena() == nullptr && hash_req_ != nullptr) {
    delete hash_req_;
  }
  hash_req_ = nullptr;
}
inline const ::phxkv::HashRequest& Request::_internal_hash_req() const {
  const ::phxkv::HashRequest* p = hash_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::HashRequest*>(
      &::phxkv::_HashRequest_default_instance_);
}
inline const ::phxkv::HashRequest& Request::hash_req() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.hash_req)
  return _internal_hash_req();
}
inline void Request::unsafe_arena_set_allocated_hash_req(
    ::phxkv::HashRequest* hash_req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_req_);
  }
  hash_req_ = hash_req;
  if (hash_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Request.hash_req)
}
inline ::phxkv::HashRequest* Request::release_hash_req() {
  auto temp = unsafe_arena_release_hash_req();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::HashRequest* Request::unsafe_arena_release_hash_req() {
  // @@protoc_insertion_point(field_release:phxkv.Request.hash_req)
  
  ::phxkv::HashRequest* temp = hash_req_;
  hash_req_ = nullptr;
  return temp;
}
inline ::phxkv::HashRequest* Request::_internal_mutable_hash_req() {
  
  if (hash_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::HashRequest>(GetArena());
    hash_req_ = p;
  }
  return hash_req_;
}
inline ::phxkv::HashRequest* Request::mutable_hash_req() {
  // @@protoc_insertion_point(field_mutable:phxkv.Request.hash_req)
  return _internal_mutable_hash_req();
}
inline void Request::set_allocated_hash_req(::phxkv::HashRequest* hash_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hash_req_;
  }
  if (hash_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hash_req);
    if (message_arena != submessage_arena) {
      hash_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_req, submessage_arena);
    }
    
  } else {
    
  }
  hash_req_ = hash_req;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Request.hash_req)
}

// .phxkv.ListRequest list_req = 6;
inline bool Request::_internal_has_list_req() const {
  return this != internal_default_instance() && list_req_ != nullptr;
}
inline bool Request::has_list_req() const {
  return _internal_has_list_req();
}
inline void Request::clear_list_req() {
  if (GetArena() == nullptr && list_req_ != nullptr) {
    delete list_req_;
  }
  list_req_ = nullptr;
}
inline const ::phxkv::ListRequest& Request::_internal_list_req() const {
  const ::phxkv::ListRequest* p = list_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::ListRequest*>(
      &::phxkv::_ListRequest_default_instance_);
}
inline const ::phxkv::ListRequest& Request::list_req() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.list_req)
  return _internal_list_req();
}
inline void Request::unsafe_arena_set_allocated_list_req(
    ::phxkv::ListRequest* list_req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_req_);
  }
  list_req_ = list_req;
  if (list_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Request.list_req)
}
inline ::phxkv::ListRequest* Request::release_list_req() {
  auto temp = unsafe_arena_release_list_req();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::ListRequest* Request::unsafe_arena_release_list_req() {
  // @@protoc_insertion_point(field_release:phxkv.Request.list_req)
  
  ::phxkv::ListRequest* temp = list_req_;
  list_req_ = nullptr;
  return temp;
}
inline ::phxkv::ListRequest* Request::_internal_mutable_list_req() {
  
  if (list_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::ListRequest>(GetArena());
    list_req_ = p;
  }
  return list_req_;
}
inline ::phxkv::ListRequest* Request::mutable_list_req() {
  // @@protoc_insertion_point(field_mutable:phxkv.Request.list_req)
  return _internal_mutable_list_req();
}
inline void Request::set_allocated_list_req(::phxkv::ListRequest* list_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_req_;
  }
  if (list_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_req);
    if (message_arena != submessage_arena) {
      list_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_req, submessage_arena);
    }
    
  } else {
    
  }
  list_req_ = list_req;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Request.list_req)
}

// .phxkv.SetRequest set_req = 7;
inline bool Request::_internal_has_set_req() const {
  return this != internal_default_instance() && set_req_ != nullptr;
}
inline bool Request::has_set_req() const {
  return _internal_has_set_req();
}
inline void Request::clear_set_req() {
  if (GetArena() == nullptr && set_req_ != nullptr) {
    delete set_req_;
  }
  set_req_ = nullptr;
}
inline const ::phxkv::SetRequest& Request::_internal_set_req() const {
  const ::phxkv::SetRequest* p = set_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::SetRequest*>(
      &::phxkv::_SetRequest_default_instance_);
}
inline const ::phxkv::SetRequest& Request::set_req() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.set_req)
  return _internal_set_req();
}
inline void Request::unsafe_arena_set_allocated_set_req(
    ::phxkv::SetRequest* set_req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_req_);
  }
  set_req_ = set_req;
  if (set_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Request.set_req)
}
inline ::phxkv::SetRequest* Request::release_set_req() {
  auto temp = unsafe_arena_release_set_req();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::SetRequest* Request::unsafe_arena_release_set_req() {
  // @@protoc_insertion_point(field_release:phxkv.Request.set_req)
  
  ::phxkv::SetRequest* temp = set_req_;
  set_req_ = nullptr;
  return temp;
}
inline ::phxkv::SetRequest* Request::_internal_mutable_set_req() {
  
  if (set_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::SetRequest>(GetArena());
    set_req_ = p;
  }
  return set_req_;
}
inline ::phxkv::SetRequest* Request::mutable_set_req() {
  // @@protoc_insertion_point(field_mutable:phxkv.Request.set_req)
  return _internal_mutable_set_req();
}
inline void Request::set_allocated_set_req(::phxkv::SetRequest* set_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_req_;
  }
  if (set_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_req);
    if (message_arena != submessage_arena) {
      set_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_req, submessage_arena);
    }
    
  } else {
    
  }
  set_req_ = set_req;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Request.set_req)
}

// .phxkv.ZsetRequest zset_req = 8;
inline bool Request::_internal_has_zset_req() const {
  return this != internal_default_instance() && zset_req_ != nullptr;
}
inline bool Request::has_zset_req() const {
  return _internal_has_zset_req();
}
inline void Request::clear_zset_req() {
  if (GetArena() == nullptr && zset_req_ != nullptr) {
    delete zset_req_;
  }
  zset_req_ = nullptr;
}
inline const ::phxkv::ZsetRequest& Request::_internal_zset_req() const {
  const ::phxkv::ZsetRequest* p = zset_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::ZsetRequest*>(
      &::phxkv::_ZsetRequest_default_instance_);
}
inline const ::phxkv::ZsetRequest& Request::zset_req() const {
  // @@protoc_insertion_point(field_get:phxkv.Request.zset_req)
  return _internal_zset_req();
}
inline void Request::unsafe_arena_set_allocated_zset_req(
    ::phxkv::ZsetRequest* zset_req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zset_req_);
  }
  zset_req_ = zset_req;
  if (zset_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Request.zset_req)
}
inline ::phxkv::ZsetRequest* Request::release_zset_req() {
  auto temp = unsafe_arena_release_zset_req();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::ZsetRequest* Request::unsafe_arena_release_zset_req() {
  // @@protoc_insertion_point(field_release:phxkv.Request.zset_req)
  
  ::phxkv::ZsetRequest* temp = zset_req_;
  zset_req_ = nullptr;
  return temp;
}
inline ::phxkv::ZsetRequest* Request::_internal_mutable_zset_req() {
  
  if (zset_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::ZsetRequest>(GetArena());
    zset_req_ = p;
  }
  return zset_req_;
}
inline ::phxkv::ZsetRequest* Request::mutable_zset_req() {
  // @@protoc_insertion_point(field_mutable:phxkv.Request.zset_req)
  return _internal_mutable_zset_req();
}
inline void Request::set_allocated_zset_req(::phxkv::ZsetRequest* zset_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zset_req_;
  }
  if (zset_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zset_req);
    if (message_arena != submessage_arena) {
      zset_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zset_req, submessage_arena);
    }
    
  } else {
    
  }
  zset_req_ = zset_req;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Request.zset_req)
}

// -------------------------------------------------------------------

// HashRequest

// repeated .phxkv.HashField field = 1;
inline int HashRequest::_internal_field_size() const {
  return field_.size();
}
inline int HashRequest::field_size() const {
  return _internal_field_size();
}
inline void HashRequest::clear_field() {
  field_.Clear();
}
inline ::phxkv::HashField* HashRequest::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.HashRequest.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >*
HashRequest::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.HashRequest.field)
  return &field_;
}
inline const ::phxkv::HashField& HashRequest::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::phxkv::HashField& HashRequest::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.HashRequest.field)
  return _internal_field(index);
}
inline ::phxkv::HashField* HashRequest::_internal_add_field() {
  return field_.Add();
}
inline ::phxkv::HashField* HashRequest::add_field() {
  // @@protoc_insertion_point(field_add:phxkv.HashRequest.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >&
HashRequest::field() const {
  // @@protoc_insertion_point(field_list:phxkv.HashRequest.field)
  return field_;
}

// int32 int_value = 2;
inline void HashRequest::clear_int_value() {
  int_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HashRequest::_internal_int_value() const {
  return int_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HashRequest::int_value() const {
  // @@protoc_insertion_point(field_get:phxkv.HashRequest.int_value)
  return _internal_int_value();
}
inline void HashRequest::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int_value_ = value;
}
inline void HashRequest::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:phxkv.HashRequest.int_value)
}

// float float_value = 3;
inline void HashRequest::clear_float_value() {
  float_value_ = 0;
}
inline float HashRequest::_internal_float_value() const {
  return float_value_;
}
inline float HashRequest::float_value() const {
  // @@protoc_insertion_point(field_get:phxkv.HashRequest.float_value)
  return _internal_float_value();
}
inline void HashRequest::_internal_set_float_value(float value) {
  
  float_value_ = value;
}
inline void HashRequest::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:phxkv.HashRequest.float_value)
}

// .phxkv.HashRequest.enum_req req_type = 4;
inline void HashRequest::clear_req_type() {
  req_type_ = 0;
}
inline ::phxkv::HashRequest_enum_req HashRequest::_internal_req_type() const {
  return static_cast< ::phxkv::HashRequest_enum_req >(req_type_);
}
inline ::phxkv::HashRequest_enum_req HashRequest::req_type() const {
  // @@protoc_insertion_point(field_get:phxkv.HashRequest.req_type)
  return _internal_req_type();
}
inline void HashRequest::_internal_set_req_type(::phxkv::HashRequest_enum_req value) {
  
  req_type_ = value;
}
inline void HashRequest::set_req_type(::phxkv::HashRequest_enum_req value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:phxkv.HashRequest.req_type)
}

// -------------------------------------------------------------------

// HashField

// bytes field_key = 1;
inline void HashField::clear_field_key() {
  field_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HashField::field_key() const {
  // @@protoc_insertion_point(field_get:phxkv.HashField.field_key)
  return _internal_field_key();
}
inline void HashField::set_field_key(const std::string& value) {
  _internal_set_field_key(value);
  // @@protoc_insertion_point(field_set:phxkv.HashField.field_key)
}
inline std::string* HashField::mutable_field_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.HashField.field_key)
  return _internal_mutable_field_key();
}
inline const std::string& HashField::_internal_field_key() const {
  return field_key_.Get();
}
inline void HashField::_internal_set_field_key(const std::string& value) {
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HashField::set_field_key(std::string&& value) {
  
  field_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.HashField.field_key)
}
inline void HashField::set_field_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.HashField.field_key)
}
inline void HashField::set_field_key(const void* value,
    size_t size) {
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.HashField.field_key)
}
inline std::string* HashField::_internal_mutable_field_key() {
  
  return field_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HashField::release_field_key() {
  // @@protoc_insertion_point(field_release:phxkv.HashField.field_key)
  return field_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HashField::set_allocated_field_key(std::string* field_key) {
  if (field_key != nullptr) {
    
  } else {
    
  }
  field_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.HashField.field_key)
}
inline std::string* HashField::unsafe_arena_release_field_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.HashField.field_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return field_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HashField::unsafe_arena_set_allocated_field_key(
    std::string* field_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_key != nullptr) {
    
  } else {
    
  }
  field_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.HashField.field_key)
}

// bytes field_value = 2;
inline void HashField::clear_field_value() {
  field_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HashField::field_value() const {
  // @@protoc_insertion_point(field_get:phxkv.HashField.field_value)
  return _internal_field_value();
}
inline void HashField::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:phxkv.HashField.field_value)
}
inline std::string* HashField::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:phxkv.HashField.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& HashField::_internal_field_value() const {
  return field_value_.Get();
}
inline void HashField::_internal_set_field_value(const std::string& value) {
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HashField::set_field_value(std::string&& value) {
  
  field_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.HashField.field_value)
}
inline void HashField::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.HashField.field_value)
}
inline void HashField::set_field_value(const void* value,
    size_t size) {
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.HashField.field_value)
}
inline std::string* HashField::_internal_mutable_field_value() {
  
  return field_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HashField::release_field_value() {
  // @@protoc_insertion_point(field_release:phxkv.HashField.field_value)
  return field_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HashField::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.HashField.field_value)
}
inline std::string* HashField::unsafe_arena_release_field_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.HashField.field_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return field_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HashField::unsafe_arena_set_allocated_field_value(
    std::string* field_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.HashField.field_value)
}

// -------------------------------------------------------------------

// Response

// .phxkv.Response.enum_code ret_code = 1;
inline void Response::clear_ret_code() {
  ret_code_ = 0;
}
inline ::phxkv::Response_enum_code Response::_internal_ret_code() const {
  return static_cast< ::phxkv::Response_enum_code >(ret_code_);
}
inline ::phxkv::Response_enum_code Response::ret_code() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.ret_code)
  return _internal_ret_code();
}
inline void Response::_internal_set_ret_code(::phxkv::Response_enum_code value) {
  
  ret_code_ = value;
}
inline void Response::set_ret_code(::phxkv::Response_enum_code value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:phxkv.Response.ret_code)
}

// bytes ret_message = 2;
inline void Response::clear_ret_message() {
  ret_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::ret_message() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.ret_message)
  return _internal_ret_message();
}
inline void Response::set_ret_message(const std::string& value) {
  _internal_set_ret_message(value);
  // @@protoc_insertion_point(field_set:phxkv.Response.ret_message)
}
inline std::string* Response::mutable_ret_message() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.ret_message)
  return _internal_mutable_ret_message();
}
inline const std::string& Response::_internal_ret_message() const {
  return ret_message_.Get();
}
inline void Response::_internal_set_ret_message(const std::string& value) {
  
  ret_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_ret_message(std::string&& value) {
  
  ret_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.Response.ret_message)
}
inline void Response::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.Response.ret_message)
}
inline void Response::set_ret_message(const void* value,
    size_t size) {
  
  ret_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.Response.ret_message)
}
inline std::string* Response::_internal_mutable_ret_message() {
  
  return ret_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_ret_message() {
  // @@protoc_insertion_point(field_release:phxkv.Response.ret_message)
  return ret_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_ret_message(std::string* ret_message) {
  if (ret_message != nullptr) {
    
  } else {
    
  }
  ret_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.ret_message)
}
inline std::string* Response::unsafe_arena_release_ret_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.Response.ret_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ret_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_ret_message(
    std::string* ret_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ret_message != nullptr) {
    
  } else {
    
  }
  ret_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ret_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.ret_message)
}

// uint64 length = 3;
inline void Response::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::length() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.length)
  return _internal_length();
}
inline void Response::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void Response::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:phxkv.Response.length)
}

// bool exist = 4;
inline void Response::clear_exist() {
  exist_ = false;
}
inline bool Response::_internal_exist() const {
  return exist_;
}
inline bool Response::exist() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.exist)
  return _internal_exist();
}
inline void Response::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void Response::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:phxkv.Response.exist)
}

// .phxkv.Response.response_type data_type = 5;
inline void Response::clear_data_type() {
  data_type_ = 0;
}
inline ::phxkv::Response_response_type Response::_internal_data_type() const {
  return static_cast< ::phxkv::Response_response_type >(data_type_);
}
inline ::phxkv::Response_response_type Response::data_type() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.data_type)
  return _internal_data_type();
}
inline void Response::_internal_set_data_type(::phxkv::Response_response_type value) {
  
  data_type_ = value;
}
inline void Response::set_data_type(::phxkv::Response_response_type value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:phxkv.Response.data_type)
}

// .phxkv.GroupsMapMsg subMap = 6;
inline bool Response::_internal_has_submap() const {
  return this != internal_default_instance() && submap_ != nullptr;
}
inline bool Response::has_submap() const {
  return _internal_has_submap();
}
inline void Response::clear_submap() {
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
inline const ::phxkv::GroupsMapMsg& Response::_internal_submap() const {
  const ::phxkv::GroupsMapMsg* p = submap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::GroupsMapMsg*>(
      &::phxkv::_GroupsMapMsg_default_instance_);
}
inline const ::phxkv::GroupsMapMsg& Response::submap() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.subMap)
  return _internal_submap();
}
inline void Response::unsafe_arena_set_allocated_submap(
    ::phxkv::GroupsMapMsg* submap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submap_);
  }
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.subMap)
}
inline ::phxkv::GroupsMapMsg* Response::release_submap() {
  auto temp = unsafe_arena_release_submap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::GroupsMapMsg* Response::unsafe_arena_release_submap() {
  // @@protoc_insertion_point(field_release:phxkv.Response.subMap)
  
  ::phxkv::GroupsMapMsg* temp = submap_;
  submap_ = nullptr;
  return temp;
}
inline ::phxkv::GroupsMapMsg* Response::_internal_mutable_submap() {
  
  if (submap_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::GroupsMapMsg>(GetArena());
    submap_ = p;
  }
  return submap_;
}
inline ::phxkv::GroupsMapMsg* Response::mutable_submap() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.subMap)
  return _internal_mutable_submap();
}
inline void Response::set_allocated_submap(::phxkv::GroupsMapMsg* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submap_;
  }
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submap);
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.subMap)
}

// .phxkv.HashResponse hash_response = 7;
inline bool Response::_internal_has_hash_response() const {
  return this != internal_default_instance() && hash_response_ != nullptr;
}
inline bool Response::has_hash_response() const {
  return _internal_has_hash_response();
}
inline void Response::clear_hash_response() {
  if (GetArena() == nullptr && hash_response_ != nullptr) {
    delete hash_response_;
  }
  hash_response_ = nullptr;
}
inline const ::phxkv::HashResponse& Response::_internal_hash_response() const {
  const ::phxkv::HashResponse* p = hash_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::HashResponse*>(
      &::phxkv::_HashResponse_default_instance_);
}
inline const ::phxkv::HashResponse& Response::hash_response() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.hash_response)
  return _internal_hash_response();
}
inline void Response::unsafe_arena_set_allocated_hash_response(
    ::phxkv::HashResponse* hash_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_response_);
  }
  hash_response_ = hash_response;
  if (hash_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.hash_response)
}
inline ::phxkv::HashResponse* Response::release_hash_response() {
  auto temp = unsafe_arena_release_hash_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::HashResponse* Response::unsafe_arena_release_hash_response() {
  // @@protoc_insertion_point(field_release:phxkv.Response.hash_response)
  
  ::phxkv::HashResponse* temp = hash_response_;
  hash_response_ = nullptr;
  return temp;
}
inline ::phxkv::HashResponse* Response::_internal_mutable_hash_response() {
  
  if (hash_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::HashResponse>(GetArena());
    hash_response_ = p;
  }
  return hash_response_;
}
inline ::phxkv::HashResponse* Response::mutable_hash_response() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.hash_response)
  return _internal_mutable_hash_response();
}
inline void Response::set_allocated_hash_response(::phxkv::HashResponse* hash_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hash_response_;
  }
  if (hash_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hash_response);
    if (message_arena != submessage_arena) {
      hash_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_response, submessage_arena);
    }
    
  } else {
    
  }
  hash_response_ = hash_response;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.hash_response)
}

// .phxkv.ListResponse list_response = 8;
inline bool Response::_internal_has_list_response() const {
  return this != internal_default_instance() && list_response_ != nullptr;
}
inline bool Response::has_list_response() const {
  return _internal_has_list_response();
}
inline void Response::clear_list_response() {
  if (GetArena() == nullptr && list_response_ != nullptr) {
    delete list_response_;
  }
  list_response_ = nullptr;
}
inline const ::phxkv::ListResponse& Response::_internal_list_response() const {
  const ::phxkv::ListResponse* p = list_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::ListResponse*>(
      &::phxkv::_ListResponse_default_instance_);
}
inline const ::phxkv::ListResponse& Response::list_response() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.list_response)
  return _internal_list_response();
}
inline void Response::unsafe_arena_set_allocated_list_response(
    ::phxkv::ListResponse* list_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_response_);
  }
  list_response_ = list_response;
  if (list_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.list_response)
}
inline ::phxkv::ListResponse* Response::release_list_response() {
  auto temp = unsafe_arena_release_list_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::ListResponse* Response::unsafe_arena_release_list_response() {
  // @@protoc_insertion_point(field_release:phxkv.Response.list_response)
  
  ::phxkv::ListResponse* temp = list_response_;
  list_response_ = nullptr;
  return temp;
}
inline ::phxkv::ListResponse* Response::_internal_mutable_list_response() {
  
  if (list_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::ListResponse>(GetArena());
    list_response_ = p;
  }
  return list_response_;
}
inline ::phxkv::ListResponse* Response::mutable_list_response() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.list_response)
  return _internal_mutable_list_response();
}
inline void Response::set_allocated_list_response(::phxkv::ListResponse* list_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_response_;
  }
  if (list_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_response);
    if (message_arena != submessage_arena) {
      list_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_response, submessage_arena);
    }
    
  } else {
    
  }
  list_response_ = list_response;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.list_response)
}

// .phxkv.SetResponse set_response = 9;
inline bool Response::_internal_has_set_response() const {
  return this != internal_default_instance() && set_response_ != nullptr;
}
inline bool Response::has_set_response() const {
  return _internal_has_set_response();
}
inline void Response::clear_set_response() {
  if (GetArena() == nullptr && set_response_ != nullptr) {
    delete set_response_;
  }
  set_response_ = nullptr;
}
inline const ::phxkv::SetResponse& Response::_internal_set_response() const {
  const ::phxkv::SetResponse* p = set_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::SetResponse*>(
      &::phxkv::_SetResponse_default_instance_);
}
inline const ::phxkv::SetResponse& Response::set_response() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.set_response)
  return _internal_set_response();
}
inline void Response::unsafe_arena_set_allocated_set_response(
    ::phxkv::SetResponse* set_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_response_);
  }
  set_response_ = set_response;
  if (set_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.set_response)
}
inline ::phxkv::SetResponse* Response::release_set_response() {
  auto temp = unsafe_arena_release_set_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::SetResponse* Response::unsafe_arena_release_set_response() {
  // @@protoc_insertion_point(field_release:phxkv.Response.set_response)
  
  ::phxkv::SetResponse* temp = set_response_;
  set_response_ = nullptr;
  return temp;
}
inline ::phxkv::SetResponse* Response::_internal_mutable_set_response() {
  
  if (set_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::SetResponse>(GetArena());
    set_response_ = p;
  }
  return set_response_;
}
inline ::phxkv::SetResponse* Response::mutable_set_response() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.set_response)
  return _internal_mutable_set_response();
}
inline void Response::set_allocated_set_response(::phxkv::SetResponse* set_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_response_;
  }
  if (set_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_response);
    if (message_arena != submessage_arena) {
      set_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_response, submessage_arena);
    }
    
  } else {
    
  }
  set_response_ = set_response;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.set_response)
}

// .phxkv.ZsetResponse zset_response = 10;
inline bool Response::_internal_has_zset_response() const {
  return this != internal_default_instance() && zset_response_ != nullptr;
}
inline bool Response::has_zset_response() const {
  return _internal_has_zset_response();
}
inline void Response::clear_zset_response() {
  if (GetArena() == nullptr && zset_response_ != nullptr) {
    delete zset_response_;
  }
  zset_response_ = nullptr;
}
inline const ::phxkv::ZsetResponse& Response::_internal_zset_response() const {
  const ::phxkv::ZsetResponse* p = zset_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxkv::ZsetResponse*>(
      &::phxkv::_ZsetResponse_default_instance_);
}
inline const ::phxkv::ZsetResponse& Response::zset_response() const {
  // @@protoc_insertion_point(field_get:phxkv.Response.zset_response)
  return _internal_zset_response();
}
inline void Response::unsafe_arena_set_allocated_zset_response(
    ::phxkv::ZsetResponse* zset_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zset_response_);
  }
  zset_response_ = zset_response;
  if (zset_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.Response.zset_response)
}
inline ::phxkv::ZsetResponse* Response::release_zset_response() {
  auto temp = unsafe_arena_release_zset_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxkv::ZsetResponse* Response::unsafe_arena_release_zset_response() {
  // @@protoc_insertion_point(field_release:phxkv.Response.zset_response)
  
  ::phxkv::ZsetResponse* temp = zset_response_;
  zset_response_ = nullptr;
  return temp;
}
inline ::phxkv::ZsetResponse* Response::_internal_mutable_zset_response() {
  
  if (zset_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxkv::ZsetResponse>(GetArena());
    zset_response_ = p;
  }
  return zset_response_;
}
inline ::phxkv::ZsetResponse* Response::mutable_zset_response() {
  // @@protoc_insertion_point(field_mutable:phxkv.Response.zset_response)
  return _internal_mutable_zset_response();
}
inline void Response::set_allocated_zset_response(::phxkv::ZsetResponse* zset_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zset_response_;
  }
  if (zset_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zset_response);
    if (message_arena != submessage_arena) {
      zset_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zset_response, submessage_arena);
    }
    
  } else {
    
  }
  zset_response_ = zset_response;
  // @@protoc_insertion_point(field_set_allocated:phxkv.Response.zset_response)
}

// -------------------------------------------------------------------

// HashResponse

// repeated .phxkv.HashField field = 4;
inline int HashResponse::_internal_field_size() const {
  return field_.size();
}
inline int HashResponse::field_size() const {
  return _internal_field_size();
}
inline void HashResponse::clear_field() {
  field_.Clear();
}
inline ::phxkv::HashField* HashResponse::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.HashResponse.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >*
HashResponse::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.HashResponse.field)
  return &field_;
}
inline const ::phxkv::HashField& HashResponse::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::phxkv::HashField& HashResponse::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.HashResponse.field)
  return _internal_field(index);
}
inline ::phxkv::HashField* HashResponse::_internal_add_field() {
  return field_.Add();
}
inline ::phxkv::HashField* HashResponse::add_field() {
  // @@protoc_insertion_point(field_add:phxkv.HashResponse.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::HashField >&
HashResponse::field() const {
  // @@protoc_insertion_point(field_list:phxkv.HashResponse.field)
  return field_;
}

// -------------------------------------------------------------------

// ListRequest

// .phxkv.ListRequest.enum_req req_type = 1;
inline void ListRequest::clear_req_type() {
  req_type_ = 0;
}
inline ::phxkv::ListRequest_enum_req ListRequest::_internal_req_type() const {
  return static_cast< ::phxkv::ListRequest_enum_req >(req_type_);
}
inline ::phxkv::ListRequest_enum_req ListRequest::req_type() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.req_type)
  return _internal_req_type();
}
inline void ListRequest::_internal_set_req_type(::phxkv::ListRequest_enum_req value) {
  
  req_type_ = value;
}
inline void ListRequest::set_req_type(::phxkv::ListRequest_enum_req value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.req_type)
}

// repeated bytes field = 2;
inline int ListRequest::_internal_field_size() const {
  return field_.size();
}
inline int ListRequest::field_size() const {
  return _internal_field_size();
}
inline void ListRequest::clear_field() {
  field_.Clear();
}
inline std::string* ListRequest::add_field() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.ListRequest.field)
  return _internal_add_field();
}
inline const std::string& ListRequest::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& ListRequest::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.field)
  return _internal_field(index);
}
inline std::string* ListRequest::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ListRequest.field)
  return field_.Mutable(index);
}
inline void ListRequest::set_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.field)
  field_.Mutable(index)->assign(value);
}
inline void ListRequest::set_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.field)
  field_.Mutable(index)->assign(std::move(value));
}
inline void ListRequest::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.ListRequest.field)
}
inline void ListRequest::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.ListRequest.field)
}
inline std::string* ListRequest::_internal_add_field() {
  return field_.Add();
}
inline void ListRequest::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.ListRequest.field)
}
inline void ListRequest::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.ListRequest.field)
}
inline void ListRequest::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.ListRequest.field)
}
inline void ListRequest::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.ListRequest.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRequest::field() const {
  // @@protoc_insertion_point(field_list:phxkv.ListRequest.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRequest::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ListRequest.field)
  return &field_;
}

// int32 start = 3;
inline void ListRequest::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::start() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.start)
  return _internal_start();
}
inline void ListRequest::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ListRequest::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.start)
}

// int32 end = 4;
inline void ListRequest::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::end() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.end)
  return _internal_end();
}
inline void ListRequest::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void ListRequest::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.end)
}

// int32 index = 5;
inline void ListRequest::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::index() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.index)
  return _internal_index();
}
inline void ListRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ListRequest::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.index)
}

// int32 count = 6;
inline void ListRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::count() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.count)
  return _internal_count();
}
inline void ListRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ListRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.count)
}

// int32 pos_flag = 7;
inline void ListRequest::clear_pos_flag() {
  pos_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_pos_flag() const {
  return pos_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::pos_flag() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.pos_flag)
  return _internal_pos_flag();
}
inline void ListRequest::_internal_set_pos_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_flag_ = value;
}
inline void ListRequest::set_pos_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_flag(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.pos_flag)
}

// bytes pivot = 8;
inline void ListRequest::clear_pivot() {
  pivot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListRequest::pivot() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.pivot)
  return _internal_pivot();
}
inline void ListRequest::set_pivot(const std::string& value) {
  _internal_set_pivot(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.pivot)
}
inline std::string* ListRequest::mutable_pivot() {
  // @@protoc_insertion_point(field_mutable:phxkv.ListRequest.pivot)
  return _internal_mutable_pivot();
}
inline const std::string& ListRequest::_internal_pivot() const {
  return pivot_.Get();
}
inline void ListRequest::_internal_set_pivot(const std::string& value) {
  
  pivot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListRequest::set_pivot(std::string&& value) {
  
  pivot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.ListRequest.pivot)
}
inline void ListRequest::set_pivot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pivot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.ListRequest.pivot)
}
inline void ListRequest::set_pivot(const void* value,
    size_t size) {
  
  pivot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.ListRequest.pivot)
}
inline std::string* ListRequest::_internal_mutable_pivot() {
  
  return pivot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListRequest::release_pivot() {
  // @@protoc_insertion_point(field_release:phxkv.ListRequest.pivot)
  return pivot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRequest::set_allocated_pivot(std::string* pivot) {
  if (pivot != nullptr) {
    
  } else {
    
  }
  pivot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pivot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.ListRequest.pivot)
}
inline std::string* ListRequest::unsafe_arena_release_pivot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.ListRequest.pivot)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pivot_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListRequest::unsafe_arena_set_allocated_pivot(
    std::string* pivot) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pivot != nullptr) {
    
  } else {
    
  }
  pivot_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pivot, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.ListRequest.pivot)
}

// bytes src_list = 9;
inline void ListRequest::clear_src_list() {
  src_list_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListRequest::src_list() const {
  // @@protoc_insertion_point(field_get:phxkv.ListRequest.src_list)
  return _internal_src_list();
}
inline void ListRequest::set_src_list(const std::string& value) {
  _internal_set_src_list(value);
  // @@protoc_insertion_point(field_set:phxkv.ListRequest.src_list)
}
inline std::string* ListRequest::mutable_src_list() {
  // @@protoc_insertion_point(field_mutable:phxkv.ListRequest.src_list)
  return _internal_mutable_src_list();
}
inline const std::string& ListRequest::_internal_src_list() const {
  return src_list_.Get();
}
inline void ListRequest::_internal_set_src_list(const std::string& value) {
  
  src_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListRequest::set_src_list(std::string&& value) {
  
  src_list_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.ListRequest.src_list)
}
inline void ListRequest::set_src_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.ListRequest.src_list)
}
inline void ListRequest::set_src_list(const void* value,
    size_t size) {
  
  src_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.ListRequest.src_list)
}
inline std::string* ListRequest::_internal_mutable_src_list() {
  
  return src_list_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListRequest::release_src_list() {
  // @@protoc_insertion_point(field_release:phxkv.ListRequest.src_list)
  return src_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRequest::set_allocated_src_list(std::string* src_list) {
  if (src_list != nullptr) {
    
  } else {
    
  }
  src_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.ListRequest.src_list)
}
inline std::string* ListRequest::unsafe_arena_release_src_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.ListRequest.src_list)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return src_list_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListRequest::unsafe_arena_set_allocated_src_list(
    std::string* src_list) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src_list != nullptr) {
    
  } else {
    
  }
  src_list_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src_list, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.ListRequest.src_list)
}

// -------------------------------------------------------------------

// ListResponse

// repeated bytes field = 1;
inline int ListResponse::_internal_field_size() const {
  return field_.size();
}
inline int ListResponse::field_size() const {
  return _internal_field_size();
}
inline void ListResponse::clear_field() {
  field_.Clear();
}
inline std::string* ListResponse::add_field() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.ListResponse.field)
  return _internal_add_field();
}
inline const std::string& ListResponse::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& ListResponse::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ListResponse.field)
  return _internal_field(index);
}
inline std::string* ListResponse::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ListResponse.field)
  return field_.Mutable(index);
}
inline void ListResponse::set_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.ListResponse.field)
  field_.Mutable(index)->assign(value);
}
inline void ListResponse::set_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.ListResponse.field)
  field_.Mutable(index)->assign(std::move(value));
}
inline void ListResponse::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.ListResponse.field)
}
inline void ListResponse::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.ListResponse.field)
}
inline std::string* ListResponse::_internal_add_field() {
  return field_.Add();
}
inline void ListResponse::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.ListResponse.field)
}
inline void ListResponse::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.ListResponse.field)
}
inline void ListResponse::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.ListResponse.field)
}
inline void ListResponse::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.ListResponse.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListResponse::field() const {
  // @@protoc_insertion_point(field_list:phxkv.ListResponse.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListResponse::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ListResponse.field)
  return &field_;
}

// -------------------------------------------------------------------

// SetRequest

// .phxkv.SetRequest.enum_req req_type = 1;
inline void SetRequest::clear_req_type() {
  req_type_ = 0;
}
inline ::phxkv::SetRequest_enum_req SetRequest::_internal_req_type() const {
  return static_cast< ::phxkv::SetRequest_enum_req >(req_type_);
}
inline ::phxkv::SetRequest_enum_req SetRequest::req_type() const {
  // @@protoc_insertion_point(field_get:phxkv.SetRequest.req_type)
  return _internal_req_type();
}
inline void SetRequest::_internal_set_req_type(::phxkv::SetRequest_enum_req value) {
  
  req_type_ = value;
}
inline void SetRequest::set_req_type(::phxkv::SetRequest_enum_req value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:phxkv.SetRequest.req_type)
}

// repeated bytes field = 2;
inline int SetRequest::_internal_field_size() const {
  return field_.size();
}
inline int SetRequest::field_size() const {
  return _internal_field_size();
}
inline void SetRequest::clear_field() {
  field_.Clear();
}
inline std::string* SetRequest::add_field() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.SetRequest.field)
  return _internal_add_field();
}
inline const std::string& SetRequest::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& SetRequest::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.SetRequest.field)
  return _internal_field(index);
}
inline std::string* SetRequest::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.SetRequest.field)
  return field_.Mutable(index);
}
inline void SetRequest::set_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetRequest.field)
  field_.Mutable(index)->assign(value);
}
inline void SetRequest::set_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetRequest.field)
  field_.Mutable(index)->assign(std::move(value));
}
inline void SetRequest::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.SetRequest.field)
}
inline void SetRequest::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.SetRequest.field)
}
inline std::string* SetRequest::_internal_add_field() {
  return field_.Add();
}
inline void SetRequest::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.SetRequest.field)
}
inline void SetRequest::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.SetRequest.field)
}
inline void SetRequest::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.SetRequest.field)
}
inline void SetRequest::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.SetRequest.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetRequest::field() const {
  // @@protoc_insertion_point(field_list:phxkv.SetRequest.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetRequest::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.SetRequest.field)
  return &field_;
}

// repeated bytes src_set = 3;
inline int SetRequest::_internal_src_set_size() const {
  return src_set_.size();
}
inline int SetRequest::src_set_size() const {
  return _internal_src_set_size();
}
inline void SetRequest::clear_src_set() {
  src_set_.Clear();
}
inline std::string* SetRequest::add_src_set() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.SetRequest.src_set)
  return _internal_add_src_set();
}
inline const std::string& SetRequest::_internal_src_set(int index) const {
  return src_set_.Get(index);
}
inline const std::string& SetRequest::src_set(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.SetRequest.src_set)
  return _internal_src_set(index);
}
inline std::string* SetRequest::mutable_src_set(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.SetRequest.src_set)
  return src_set_.Mutable(index);
}
inline void SetRequest::set_src_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetRequest.src_set)
  src_set_.Mutable(index)->assign(value);
}
inline void SetRequest::set_src_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetRequest.src_set)
  src_set_.Mutable(index)->assign(std::move(value));
}
inline void SetRequest::set_src_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.SetRequest.src_set)
}
inline void SetRequest::set_src_set(int index, const void* value, size_t size) {
  src_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.SetRequest.src_set)
}
inline std::string* SetRequest::_internal_add_src_set() {
  return src_set_.Add();
}
inline void SetRequest::add_src_set(const std::string& value) {
  src_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.SetRequest.src_set)
}
inline void SetRequest::add_src_set(std::string&& value) {
  src_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.SetRequest.src_set)
}
inline void SetRequest::add_src_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.SetRequest.src_set)
}
inline void SetRequest::add_src_set(const void* value, size_t size) {
  src_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.SetRequest.src_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetRequest::src_set() const {
  // @@protoc_insertion_point(field_list:phxkv.SetRequest.src_set)
  return src_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetRequest::mutable_src_set() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.SetRequest.src_set)
  return &src_set_;
}

// -------------------------------------------------------------------

// SetResponse

// repeated bytes field = 1;
inline int SetResponse::_internal_field_size() const {
  return field_.size();
}
inline int SetResponse::field_size() const {
  return _internal_field_size();
}
inline void SetResponse::clear_field() {
  field_.Clear();
}
inline std::string* SetResponse::add_field() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.SetResponse.field)
  return _internal_add_field();
}
inline const std::string& SetResponse::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& SetResponse::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.SetResponse.field)
  return _internal_field(index);
}
inline std::string* SetResponse::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.SetResponse.field)
  return field_.Mutable(index);
}
inline void SetResponse::set_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetResponse.field)
  field_.Mutable(index)->assign(value);
}
inline void SetResponse::set_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.SetResponse.field)
  field_.Mutable(index)->assign(std::move(value));
}
inline void SetResponse::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.SetResponse.field)
}
inline void SetResponse::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.SetResponse.field)
}
inline std::string* SetResponse::_internal_add_field() {
  return field_.Add();
}
inline void SetResponse::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.SetResponse.field)
}
inline void SetResponse::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.SetResponse.field)
}
inline void SetResponse::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.SetResponse.field)
}
inline void SetResponse::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.SetResponse.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetResponse::field() const {
  // @@protoc_insertion_point(field_list:phxkv.SetResponse.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetResponse::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.SetResponse.field)
  return &field_;
}

// -------------------------------------------------------------------

// ZsetRequest

// .phxkv.ZsetRequest.enum_req req_type = 1;
inline void ZsetRequest::clear_req_type() {
  req_type_ = 0;
}
inline ::phxkv::ZsetRequest_enum_req ZsetRequest::_internal_req_type() const {
  return static_cast< ::phxkv::ZsetRequest_enum_req >(req_type_);
}
inline ::phxkv::ZsetRequest_enum_req ZsetRequest::req_type() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.req_type)
  return _internal_req_type();
}
inline void ZsetRequest::_internal_set_req_type(::phxkv::ZsetRequest_enum_req value) {
  
  req_type_ = value;
}
inline void ZsetRequest::set_req_type(::phxkv::ZsetRequest_enum_req value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.req_type)
}

// repeated .phxkv.ZsetField field_key = 2;
inline int ZsetRequest::_internal_field_key_size() const {
  return field_key_.size();
}
inline int ZsetRequest::field_key_size() const {
  return _internal_field_key_size();
}
inline void ZsetRequest::clear_field_key() {
  field_key_.Clear();
}
inline ::phxkv::ZsetField* ZsetRequest::mutable_field_key(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetRequest.field_key)
  return field_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
ZsetRequest::mutable_field_key() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ZsetRequest.field_key)
  return &field_key_;
}
inline const ::phxkv::ZsetField& ZsetRequest::_internal_field_key(int index) const {
  return field_key_.Get(index);
}
inline const ::phxkv::ZsetField& ZsetRequest::field_key(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.field_key)
  return _internal_field_key(index);
}
inline ::phxkv::ZsetField* ZsetRequest::_internal_add_field_key() {
  return field_key_.Add();
}
inline ::phxkv::ZsetField* ZsetRequest::add_field_key() {
  // @@protoc_insertion_point(field_add:phxkv.ZsetRequest.field_key)
  return _internal_add_field_key();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
ZsetRequest::field_key() const {
  // @@protoc_insertion_point(field_list:phxkv.ZsetRequest.field_key)
  return field_key_;
}

// repeated .phxkv.ZsetField field_score = 3;
inline int ZsetRequest::_internal_field_score_size() const {
  return field_score_.size();
}
inline int ZsetRequest::field_score_size() const {
  return _internal_field_score_size();
}
inline void ZsetRequest::clear_field_score() {
  field_score_.Clear();
}
inline ::phxkv::ZsetField* ZsetRequest::mutable_field_score(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetRequest.field_score)
  return field_score_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
ZsetRequest::mutable_field_score() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ZsetRequest.field_score)
  return &field_score_;
}
inline const ::phxkv::ZsetField& ZsetRequest::_internal_field_score(int index) const {
  return field_score_.Get(index);
}
inline const ::phxkv::ZsetField& ZsetRequest::field_score(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.field_score)
  return _internal_field_score(index);
}
inline ::phxkv::ZsetField* ZsetRequest::_internal_add_field_score() {
  return field_score_.Add();
}
inline ::phxkv::ZsetField* ZsetRequest::add_field_score() {
  // @@protoc_insertion_point(field_add:phxkv.ZsetRequest.field_score)
  return _internal_add_field_score();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
ZsetRequest::field_score() const {
  // @@protoc_insertion_point(field_list:phxkv.ZsetRequest.field_score)
  return field_score_;
}

// int64 min = 4;
inline void ZsetRequest::clear_min() {
  min_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::min() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.min)
  return _internal_min();
}
inline void ZsetRequest::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_ = value;
}
inline void ZsetRequest::set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.min)
}

// int64 max = 5;
inline void ZsetRequest::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::max() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.max)
  return _internal_max();
}
inline void ZsetRequest::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_ = value;
}
inline void ZsetRequest::set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.max)
}

// int64 incrscore = 6;
inline void ZsetRequest::clear_incrscore() {
  incrscore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_incrscore() const {
  return incrscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::incrscore() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.incrscore)
  return _internal_incrscore();
}
inline void ZsetRequest::_internal_set_incrscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  incrscore_ = value;
}
inline void ZsetRequest::set_incrscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_incrscore(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.incrscore)
}

// repeated bytes src_set = 7;
inline int ZsetRequest::_internal_src_set_size() const {
  return src_set_.size();
}
inline int ZsetRequest::src_set_size() const {
  return _internal_src_set_size();
}
inline void ZsetRequest::clear_src_set() {
  src_set_.Clear();
}
inline std::string* ZsetRequest::add_src_set() {
  // @@protoc_insertion_point(field_add_mutable:phxkv.ZsetRequest.src_set)
  return _internal_add_src_set();
}
inline const std::string& ZsetRequest::_internal_src_set(int index) const {
  return src_set_.Get(index);
}
inline const std::string& ZsetRequest::src_set(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.src_set)
  return _internal_src_set(index);
}
inline std::string* ZsetRequest::mutable_src_set(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetRequest.src_set)
  return src_set_.Mutable(index);
}
inline void ZsetRequest::set_src_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.src_set)
  src_set_.Mutable(index)->assign(value);
}
inline void ZsetRequest::set_src_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.src_set)
  src_set_.Mutable(index)->assign(std::move(value));
}
inline void ZsetRequest::set_src_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxkv.ZsetRequest.src_set)
}
inline void ZsetRequest::set_src_set(int index, const void* value, size_t size) {
  src_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxkv.ZsetRequest.src_set)
}
inline std::string* ZsetRequest::_internal_add_src_set() {
  return src_set_.Add();
}
inline void ZsetRequest::add_src_set(const std::string& value) {
  src_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxkv.ZsetRequest.src_set)
}
inline void ZsetRequest::add_src_set(std::string&& value) {
  src_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxkv.ZsetRequest.src_set)
}
inline void ZsetRequest::add_src_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxkv.ZsetRequest.src_set)
}
inline void ZsetRequest::add_src_set(const void* value, size_t size) {
  src_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxkv.ZsetRequest.src_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ZsetRequest::src_set() const {
  // @@protoc_insertion_point(field_list:phxkv.ZsetRequest.src_set)
  return src_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ZsetRequest::mutable_src_set() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ZsetRequest.src_set)
  return &src_set_;
}

// int64 start_pos = 8;
inline void ZsetRequest::clear_start_pos() {
  start_pos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_start_pos() const {
  return start_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::start_pos() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.start_pos)
  return _internal_start_pos();
}
inline void ZsetRequest::_internal_set_start_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_pos_ = value;
}
inline void ZsetRequest::set_start_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_pos(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.start_pos)
}

// int64 end_pos = 9;
inline void ZsetRequest::clear_end_pos() {
  end_pos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_end_pos() const {
  return end_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::end_pos() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.end_pos)
  return _internal_end_pos();
}
inline void ZsetRequest::_internal_set_end_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_pos_ = value;
}
inline void ZsetRequest::set_end_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_pos(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.end_pos)
}

// int64 offset = 10;
inline void ZsetRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::offset() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.offset)
  return _internal_offset();
}
inline void ZsetRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void ZsetRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.offset)
}

// int64 count = 11;
inline void ZsetRequest::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetRequest::count() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetRequest.count)
  return _internal_count();
}
inline void ZsetRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ZsetRequest::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetRequest.count)
}

// -------------------------------------------------------------------

// ZsetField

// bytes field_key = 1;
inline void ZsetField::clear_field_key() {
  field_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ZsetField::field_key() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetField.field_key)
  return _internal_field_key();
}
inline void ZsetField::set_field_key(const std::string& value) {
  _internal_set_field_key(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetField.field_key)
}
inline std::string* ZsetField::mutable_field_key() {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetField.field_key)
  return _internal_mutable_field_key();
}
inline const std::string& ZsetField::_internal_field_key() const {
  return field_key_.Get();
}
inline void ZsetField::_internal_set_field_key(const std::string& value) {
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ZsetField::set_field_key(std::string&& value) {
  
  field_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.ZsetField.field_key)
}
inline void ZsetField::set_field_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.ZsetField.field_key)
}
inline void ZsetField::set_field_key(const void* value,
    size_t size) {
  
  field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.ZsetField.field_key)
}
inline std::string* ZsetField::_internal_mutable_field_key() {
  
  return field_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ZsetField::release_field_key() {
  // @@protoc_insertion_point(field_release:phxkv.ZsetField.field_key)
  return field_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZsetField::set_allocated_field_key(std::string* field_key) {
  if (field_key != nullptr) {
    
  } else {
    
  }
  field_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.ZsetField.field_key)
}
inline std::string* ZsetField::unsafe_arena_release_field_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.ZsetField.field_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return field_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ZsetField::unsafe_arena_set_allocated_field_key(
    std::string* field_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_key != nullptr) {
    
  } else {
    
  }
  field_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.ZsetField.field_key)
}

// bytes field_value = 2;
inline void ZsetField::clear_field_value() {
  field_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ZsetField::field_value() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetField.field_value)
  return _internal_field_value();
}
inline void ZsetField::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetField.field_value)
}
inline std::string* ZsetField::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetField.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& ZsetField::_internal_field_value() const {
  return field_value_.Get();
}
inline void ZsetField::_internal_set_field_value(const std::string& value) {
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ZsetField::set_field_value(std::string&& value) {
  
  field_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxkv.ZsetField.field_value)
}
inline void ZsetField::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxkv.ZsetField.field_value)
}
inline void ZsetField::set_field_value(const void* value,
    size_t size) {
  
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxkv.ZsetField.field_value)
}
inline std::string* ZsetField::_internal_mutable_field_value() {
  
  return field_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ZsetField::release_field_value() {
  // @@protoc_insertion_point(field_release:phxkv.ZsetField.field_value)
  return field_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZsetField::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxkv.ZsetField.field_value)
}
inline std::string* ZsetField::unsafe_arena_release_field_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxkv.ZsetField.field_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return field_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ZsetField::unsafe_arena_set_allocated_field_value(
    std::string* field_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxkv.ZsetField.field_value)
}

// -------------------------------------------------------------------

// ZsetResponse

// repeated .phxkv.ZsetField field = 1;
inline int ZsetResponse::_internal_field_size() const {
  return field_.size();
}
inline int ZsetResponse::field_size() const {
  return _internal_field_size();
}
inline void ZsetResponse::clear_field() {
  field_.Clear();
}
inline ::phxkv::ZsetField* ZsetResponse::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:phxkv.ZsetResponse.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >*
ZsetResponse::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:phxkv.ZsetResponse.field)
  return &field_;
}
inline const ::phxkv::ZsetField& ZsetResponse::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::phxkv::ZsetField& ZsetResponse::field(int index) const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetResponse.field)
  return _internal_field(index);
}
inline ::phxkv::ZsetField* ZsetResponse::_internal_add_field() {
  return field_.Add();
}
inline ::phxkv::ZsetField* ZsetResponse::add_field() {
  // @@protoc_insertion_point(field_add:phxkv.ZsetResponse.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxkv::ZsetField >&
ZsetResponse::field() const {
  // @@protoc_insertion_point(field_list:phxkv.ZsetResponse.field)
  return field_;
}

// int64 mem_rank = 2;
inline void ZsetResponse::clear_mem_rank() {
  mem_rank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetResponse::_internal_mem_rank() const {
  return mem_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetResponse::mem_rank() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetResponse.mem_rank)
  return _internal_mem_rank();
}
inline void ZsetResponse::_internal_set_mem_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_rank_ = value;
}
inline void ZsetResponse::set_mem_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mem_rank(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetResponse.mem_rank)
}

// int64 mem_score = 3;
inline void ZsetResponse::clear_mem_score() {
  mem_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetResponse::_internal_mem_score() const {
  return mem_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZsetResponse::mem_score() const {
  // @@protoc_insertion_point(field_get:phxkv.ZsetResponse.mem_score)
  return _internal_mem_score();
}
inline void ZsetResponse::_internal_set_mem_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mem_score_ = value;
}
inline void ZsetResponse::set_mem_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mem_score(value);
  // @@protoc_insertion_point(field_set:phxkv.ZsetResponse.mem_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phxkv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phxkv::KVMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::KVMessage_Type>() {
  return ::phxkv::KVMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::phxkv::Request_req_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::Request_req_type>() {
  return ::phxkv::Request_req_type_descriptor();
}
template <> struct is_proto_enum< ::phxkv::HashRequest_enum_req> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::HashRequest_enum_req>() {
  return ::phxkv::HashRequest_enum_req_descriptor();
}
template <> struct is_proto_enum< ::phxkv::Response_enum_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::Response_enum_code>() {
  return ::phxkv::Response_enum_code_descriptor();
}
template <> struct is_proto_enum< ::phxkv::Response_response_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::Response_response_type>() {
  return ::phxkv::Response_response_type_descriptor();
}
template <> struct is_proto_enum< ::phxkv::ListRequest_enum_req> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::ListRequest_enum_req>() {
  return ::phxkv::ListRequest_enum_req_descriptor();
}
template <> struct is_proto_enum< ::phxkv::SetRequest_enum_req> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::SetRequest_enum_req>() {
  return ::phxkv::SetRequest_enum_req_descriptor();
}
template <> struct is_proto_enum< ::phxkv::ZsetRequest_enum_req> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxkv::ZsetRequest_enum_req>() {
  return ::phxkv::ZsetRequest_enum_req_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phxkv_2eproto
