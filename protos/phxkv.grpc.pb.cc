// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phxkv.proto

#include "phxkv.pb.h"
#include "phxkv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace phxkv {

static const char* PhxKVServer_method_names[] = {
  "/phxkv.PhxKVServer/KvPut",
  "/phxkv.PhxKVServer/KvGet",
  "/phxkv.PhxKVServer/KvGetLocal",
  "/phxkv.PhxKVServer/KvDelete",
  "/phxkv.PhxKVServer/KvBatchPut",
  "/phxkv.PhxKVServer/KvBatchGet",
  "/phxkv.PhxKVServer/KvGetgroupList",
  "/phxkv.PhxKVServer/KvDropMaster",
  "/phxkv.PhxKVServer/KvBeMaster",
  "/phxkv.PhxKVServer/HashOperate",
  "/phxkv.PhxKVServer/ListOperate",
  "/phxkv.PhxKVServer/SetOperate",
  "/phxkv.PhxKVServer/ZsetOperate",
};

std::unique_ptr< PhxKVServer::Stub> PhxKVServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PhxKVServer::Stub> stub(new PhxKVServer::Stub(channel));
  return stub;
}

PhxKVServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KvPut_(PhxKVServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvGet_(PhxKVServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvGetLocal_(PhxKVServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvDelete_(PhxKVServer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBatchPut_(PhxKVServer_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBatchGet_(PhxKVServer_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvGetgroupList_(PhxKVServer_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvDropMaster_(PhxKVServer_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBeMaster_(PhxKVServer_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HashOperate_(PhxKVServer_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOperate_(PhxKVServer_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOperate_(PhxKVServer_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ZsetOperate_(PhxKVServer_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PhxKVServer::Stub::KvPut(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvPut_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvPut(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvPut_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvPut_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvPut(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvPut_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncKvPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncKvPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvPut_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvGet(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGet_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncKvGetRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncKvGetRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGetLocal_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGetLocal_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGetLocal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGetLocal_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGetLocal_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvGetLocal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGetLocal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncKvGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvGetLocal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncKvGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvGetLocal_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvDelete_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvDelete_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvDelete_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvDelete_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncKvDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncKvDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KVResponse>::Create(channel_.get(), cq, rpcmethod_KvDelete_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvBatchPut(::grpc::ClientContext* context, const ::phxkv::KvBatchPutRequest& request, ::phxkv::KvBatchPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBatchPut_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvBatchPut(::grpc::ClientContext* context, const ::phxkv::KvBatchPutRequest* request, ::phxkv::KvBatchPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchPut_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBatchPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KvBatchPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchPut_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBatchPut(::grpc::ClientContext* context, const ::phxkv::KvBatchPutRequest* request, ::phxkv::KvBatchPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchPut_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvBatchPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KvBatchPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KvBatchPutResponse>* PhxKVServer::Stub::AsyncKvBatchPutRaw(::grpc::ClientContext* context, const ::phxkv::KvBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KvBatchPutResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KvBatchPutResponse>* PhxKVServer::Stub::PrepareAsyncKvBatchPutRaw(::grpc::ClientContext* context, const ::phxkv::KvBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KvBatchPutResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchPut_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvBatchGet(::grpc::ClientContext* context, const ::phxkv::KvBatchGetRequest& request, ::phxkv::KvBatchGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBatchGet_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvBatchGet(::grpc::ClientContext* context, const ::phxkv::KvBatchGetRequest* request, ::phxkv::KvBatchGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchGet_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBatchGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KvBatchGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchGet_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBatchGet(::grpc::ClientContext* context, const ::phxkv::KvBatchGetRequest* request, ::phxkv::KvBatchGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchGet_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvBatchGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KvBatchGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KvBatchGetResponse>* PhxKVServer::Stub::AsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::phxkv::KvBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KvBatchGetResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KvBatchGetResponse>* PhxKVServer::Stub::PrepareAsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::phxkv::KvBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::KvBatchGetResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchGet_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvGetgroupList(::grpc::ClientContext* context, const ::phxkv::GroupListReq& request, ::phxkv::GroupListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGetgroupList_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvGetgroupList(::grpc::ClientContext* context, const ::phxkv::GroupListReq* request, ::phxkv::GroupListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGetgroupList_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGetgroupList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::GroupListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGetgroupList_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvGetgroupList(::grpc::ClientContext* context, const ::phxkv::GroupListReq* request, ::phxkv::GroupListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGetgroupList_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvGetgroupList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::GroupListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGetgroupList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::GroupListRes>* PhxKVServer::Stub::AsyncKvGetgroupListRaw(::grpc::ClientContext* context, const ::phxkv::GroupListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::GroupListRes>::Create(channel_.get(), cq, rpcmethod_KvGetgroupList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::GroupListRes>* PhxKVServer::Stub::PrepareAsyncKvGetgroupListRaw(::grpc::ClientContext* context, const ::phxkv::GroupListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::GroupListRes>::Create(channel_.get(), cq, rpcmethod_KvGetgroupList_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvDropMaster(::grpc::ClientContext* context, const ::phxkv::DropMastReq& request, ::phxkv::DropMastRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvDropMaster_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvDropMaster(::grpc::ClientContext* context, const ::phxkv::DropMastReq* request, ::phxkv::DropMastRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvDropMaster_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvDropMaster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::DropMastRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvDropMaster_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvDropMaster(::grpc::ClientContext* context, const ::phxkv::DropMastReq* request, ::phxkv::DropMastRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvDropMaster_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvDropMaster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::DropMastRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvDropMaster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::DropMastRes>* PhxKVServer::Stub::AsyncKvDropMasterRaw(::grpc::ClientContext* context, const ::phxkv::DropMastReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::DropMastRes>::Create(channel_.get(), cq, rpcmethod_KvDropMaster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::DropMastRes>* PhxKVServer::Stub::PrepareAsyncKvDropMasterRaw(::grpc::ClientContext* context, const ::phxkv::DropMastReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::DropMastRes>::Create(channel_.get(), cq, rpcmethod_KvDropMaster_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::KvBeMaster(::grpc::ClientContext* context, const ::phxkv::BemasterReq& request, ::phxkv::BemasterRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBeMaster_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::KvBeMaster(::grpc::ClientContext* context, const ::phxkv::BemasterReq* request, ::phxkv::BemasterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBeMaster_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBeMaster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::BemasterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBeMaster_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::KvBeMaster(::grpc::ClientContext* context, const ::phxkv::BemasterReq* request, ::phxkv::BemasterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBeMaster_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::KvBeMaster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::BemasterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBeMaster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::BemasterRes>* PhxKVServer::Stub::AsyncKvBeMasterRaw(::grpc::ClientContext* context, const ::phxkv::BemasterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::BemasterRes>::Create(channel_.get(), cq, rpcmethod_KvBeMaster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::BemasterRes>* PhxKVServer::Stub::PrepareAsyncKvBeMasterRaw(::grpc::ClientContext* context, const ::phxkv::BemasterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::BemasterRes>::Create(channel_.get(), cq, rpcmethod_KvBeMaster_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::HashOperate(::grpc::ClientContext* context, const ::phxkv::Request& request, ::phxkv::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HashOperate_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::HashOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HashOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::HashOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HashOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::HashOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HashOperate_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::HashOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HashOperate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::AsyncHashOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_HashOperate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::PrepareAsyncHashOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_HashOperate_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::ListOperate(::grpc::ClientContext* context, const ::phxkv::Request& request, ::phxkv::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOperate_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::ListOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::ListOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::ListOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOperate_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::ListOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOperate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::AsyncListOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_ListOperate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::PrepareAsyncListOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_ListOperate_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::SetOperate(::grpc::ClientContext* context, const ::phxkv::Request& request, ::phxkv::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetOperate_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::SetOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::SetOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::SetOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetOperate_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::SetOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetOperate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::AsyncSetOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_SetOperate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::PrepareAsyncSetOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_SetOperate_, context, request, false);
}

::grpc::Status PhxKVServer::Stub::ZsetOperate(::grpc::ClientContext* context, const ::phxkv::Request& request, ::phxkv::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ZsetOperate_, context, request, response);
}

void PhxKVServer::Stub::experimental_async::ZsetOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ZsetOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::ZsetOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ZsetOperate_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::experimental_async::ZsetOperate(::grpc::ClientContext* context, const ::phxkv::Request* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ZsetOperate_, context, request, response, reactor);
}

void PhxKVServer::Stub::experimental_async::ZsetOperate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ZsetOperate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::AsyncZsetOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_ZsetOperate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxkv::Response>* PhxKVServer::Stub::PrepareAsyncZsetOperateRaw(::grpc::ClientContext* context, const ::phxkv::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::phxkv::Response>::Create(channel_.get(), cq, rpcmethod_ZsetOperate_, context, request, false);
}

PhxKVServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->KvPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->KvGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->KvGetLocal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->KvDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KvBatchPutRequest, ::phxkv::KvBatchPutResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KvBatchPutRequest* req,
             ::phxkv::KvBatchPutResponse* resp) {
               return service->KvBatchPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KvBatchGetRequest, ::phxkv::KvBatchGetResponse>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::KvBatchGetRequest* req,
             ::phxkv::KvBatchGetResponse* resp) {
               return service->KvBatchGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::GroupListReq, ::phxkv::GroupListRes>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::GroupListReq* req,
             ::phxkv::GroupListRes* resp) {
               return service->KvGetgroupList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::DropMastReq, ::phxkv::DropMastRes>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::DropMastReq* req,
             ::phxkv::DropMastRes* resp) {
               return service->KvDropMaster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::BemasterReq, ::phxkv::BemasterRes>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::BemasterReq* req,
             ::phxkv::BemasterRes* resp) {
               return service->KvBeMaster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::Request, ::phxkv::Response>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::Request* req,
             ::phxkv::Response* resp) {
               return service->HashOperate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::Request, ::phxkv::Response>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::Request* req,
             ::phxkv::Response* resp) {
               return service->ListOperate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::Request, ::phxkv::Response>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::Request* req,
             ::phxkv::Response* resp) {
               return service->SetOperate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::Request, ::phxkv::Response>(
          [](PhxKVServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::phxkv::Request* req,
             ::phxkv::Response* resp) {
               return service->ZsetOperate(ctx, req, resp);
             }, this)));
}

PhxKVServer::Service::~Service() {
}

::grpc::Status PhxKVServer::Service::KvPut(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvGet(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvGetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvDelete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvBatchPut(::grpc::ServerContext* context, const ::phxkv::KvBatchPutRequest* request, ::phxkv::KvBatchPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvBatchGet(::grpc::ServerContext* context, const ::phxkv::KvBatchGetRequest* request, ::phxkv::KvBatchGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvGetgroupList(::grpc::ServerContext* context, const ::phxkv::GroupListReq* request, ::phxkv::GroupListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvDropMaster(::grpc::ServerContext* context, const ::phxkv::DropMastReq* request, ::phxkv::DropMastRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::KvBeMaster(::grpc::ServerContext* context, const ::phxkv::BemasterReq* request, ::phxkv::BemasterRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::HashOperate(::grpc::ServerContext* context, const ::phxkv::Request* request, ::phxkv::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::ListOperate(::grpc::ServerContext* context, const ::phxkv::Request* request, ::phxkv::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::SetOperate(::grpc::ServerContext* context, const ::phxkv::Request* request, ::phxkv::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::ZsetOperate(::grpc::ServerContext* context, const ::phxkv::Request* request, ::phxkv::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace phxkv

