// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxkv.proto

#include "phxkv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMsg_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupsMapMsg_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashField_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashResponse_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KVOperator_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchGetSubRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchGetSubResponse_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvBatchPutRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchPutSubRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListResponse_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Request_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResponse_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZsetField_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ZsetRequest_phxkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ZsetResponse_phxkv_2eproto;
namespace phxkv {
class DropMastReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropMastReq> _instance;
} _DropMastReq_default_instance_;
class DropMastResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropMastRes> _instance;
} _DropMastRes_default_instance_;
class BemasterReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BemasterReq> _instance;
} _BemasterReq_default_instance_;
class BemasterResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BemasterRes> _instance;
} _BemasterRes_default_instance_;
class GroupListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupListReq> _instance;
} _GroupListReq_default_instance_;
class GroupListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupListRes> _instance;
} _GroupListRes_default_instance_;
class KVOperatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KVOperator> _instance;
} _KVOperator_default_instance_;
class KVResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KVResponse> _instance;
} _KVResponse_default_instance_;
class GroupsMapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupsMapMsg> _instance;
} _GroupsMapMsg_default_instance_;
class GroupMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupMsg> _instance;
} _GroupMsg_default_instance_;
class KvBatchPutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchPutRequest> _instance;
} _KvBatchPutRequest_default_instance_;
class KvBatchPutSubRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchPutSubRequest> _instance;
} _KvBatchPutSubRequest_default_instance_;
class KvBatchPutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchPutResponse> _instance;
} _KvBatchPutResponse_default_instance_;
class KvBatchGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchGetRequest> _instance;
} _KvBatchGetRequest_default_instance_;
class KvBatchGetSubRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchGetSubRequest> _instance;
} _KvBatchGetSubRequest_default_instance_;
class KvBatchGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchGetResponse> _instance;
} _KvBatchGetResponse_default_instance_;
class KvBatchGetSubResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvBatchGetSubResponse> _instance;
} _KvBatchGetSubResponse_default_instance_;
class KVMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KVMessage> _instance;
} _KVMessage_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class HashRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashRequest> _instance;
} _HashRequest_default_instance_;
class HashFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashField> _instance;
} _HashField_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class HashResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashResponse> _instance;
} _HashResponse_default_instance_;
class ListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRequest> _instance;
} _ListRequest_default_instance_;
class ListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListResponse> _instance;
} _ListResponse_default_instance_;
class SetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRequest> _instance;
} _SetRequest_default_instance_;
class SetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResponse> _instance;
} _SetResponse_default_instance_;
class ZsetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZsetRequest> _instance;
} _ZsetRequest_default_instance_;
class ZsetFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZsetField> _instance;
} _ZsetField_default_instance_;
class ZsetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZsetResponse> _instance;
} _ZsetResponse_default_instance_;
}  // namespace phxkv
static void InitDefaultsscc_info_BemasterReq_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_BemasterReq_default_instance_;
    new (ptr) ::phxkv::BemasterReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::BemasterReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BemasterReq_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BemasterReq_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_BemasterRes_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_BemasterRes_default_instance_;
    new (ptr) ::phxkv::BemasterRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::BemasterRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BemasterRes_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BemasterRes_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_DropMastReq_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_DropMastReq_default_instance_;
    new (ptr) ::phxkv::DropMastReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::DropMastReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropMastReq_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropMastReq_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_DropMastRes_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_DropMastRes_default_instance_;
    new (ptr) ::phxkv::DropMastRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::DropMastRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropMastRes_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropMastRes_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_GroupListReq_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_GroupListReq_default_instance_;
    new (ptr) ::phxkv::GroupListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::GroupListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupListReq_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupListReq_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_GroupListRes_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_GroupListRes_default_instance_;
    new (ptr) ::phxkv::GroupListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::GroupListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupListRes_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupListRes_phxkv_2eproto}, {
      &scc_info_GroupsMapMsg_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_GroupMsg_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_GroupMsg_default_instance_;
    new (ptr) ::phxkv::GroupMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::GroupMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMsg_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupMsg_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_GroupsMapMsg_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_GroupsMapMsg_default_instance_;
    new (ptr) ::phxkv::GroupsMapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::GroupsMapMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupsMapMsg_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupsMapMsg_phxkv_2eproto}, {
      &scc_info_GroupMsg_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_HashField_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_HashField_default_instance_;
    new (ptr) ::phxkv::HashField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::HashField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashField_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashField_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_HashRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_HashRequest_default_instance_;
    new (ptr) ::phxkv::HashRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::HashRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashRequest_phxkv_2eproto}, {
      &scc_info_HashField_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_HashResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_HashResponse_default_instance_;
    new (ptr) ::phxkv::HashResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::HashResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashResponse_phxkv_2eproto}, {
      &scc_info_HashField_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KVMessage_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KVMessage_default_instance_;
    new (ptr) ::phxkv::KVMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KVMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KVMessage_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_KVMessage_phxkv_2eproto}, {
      &scc_info_KVOperator_phxkv_2eproto.base,
      &scc_info_KvBatchPutRequest_phxkv_2eproto.base,
      &scc_info_Request_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KVOperator_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KVOperator_default_instance_;
    new (ptr) ::phxkv::KVOperator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KVOperator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KVOperator_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KVOperator_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_KVResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KVResponse_default_instance_;
    new (ptr) ::phxkv::KVResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KVResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KVResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KVResponse_phxkv_2eproto}, {
      &scc_info_GroupsMapMsg_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KvBatchGetRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchGetRequest_default_instance_;
    new (ptr) ::phxkv::KvBatchGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvBatchGetRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KvBatchGetRequest_phxkv_2eproto}, {
      &scc_info_KvBatchGetSubRequest_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KvBatchGetResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchGetResponse_default_instance_;
    new (ptr) ::phxkv::KvBatchGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KvBatchGetResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KvBatchGetResponse_phxkv_2eproto}, {
      &scc_info_KvBatchGetSubResponse_phxkv_2eproto.base,
      &scc_info_GroupsMapMsg_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KvBatchGetSubRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchGetSubRequest_default_instance_;
    new (ptr) ::phxkv::KvBatchGetSubRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchGetSubRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchGetSubRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KvBatchGetSubRequest_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_KvBatchGetSubResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchGetSubResponse_default_instance_;
    new (ptr) ::phxkv::KvBatchGetSubResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchGetSubResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchGetSubResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KvBatchGetSubResponse_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_KvBatchPutRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchPutRequest_default_instance_;
    new (ptr) ::phxkv::KvBatchPutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchPutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvBatchPutRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KvBatchPutRequest_phxkv_2eproto}, {
      &scc_info_KvBatchPutSubRequest_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KvBatchPutResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchPutResponse_default_instance_;
    new (ptr) ::phxkv::KvBatchPutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchPutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvBatchPutResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KvBatchPutResponse_phxkv_2eproto}, {
      &scc_info_GroupsMapMsg_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_KvBatchPutSubRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_KvBatchPutSubRequest_default_instance_;
    new (ptr) ::phxkv::KvBatchPutSubRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::KvBatchPutSubRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvBatchPutSubRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KvBatchPutSubRequest_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_ListRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_ListRequest_default_instance_;
    new (ptr) ::phxkv::ListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::ListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListRequest_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_ListResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_ListResponse_default_instance_;
    new (ptr) ::phxkv::ListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::ListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListResponse_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_Request_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_Request_default_instance_;
    new (ptr) ::phxkv::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Request_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Request_phxkv_2eproto}, {
      &scc_info_HashRequest_phxkv_2eproto.base,
      &scc_info_ListRequest_phxkv_2eproto.base,
      &scc_info_SetRequest_phxkv_2eproto.base,
      &scc_info_ZsetRequest_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_Response_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_Response_default_instance_;
    new (ptr) ::phxkv::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Response_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Response_phxkv_2eproto}, {
      &scc_info_GroupsMapMsg_phxkv_2eproto.base,
      &scc_info_HashResponse_phxkv_2eproto.base,
      &scc_info_ListResponse_phxkv_2eproto.base,
      &scc_info_SetResponse_phxkv_2eproto.base,
      &scc_info_ZsetResponse_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_SetRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_SetRequest_default_instance_;
    new (ptr) ::phxkv::SetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::SetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRequest_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_SetResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_SetResponse_default_instance_;
    new (ptr) ::phxkv::SetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::SetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResponse_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_ZsetField_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_ZsetField_default_instance_;
    new (ptr) ::phxkv::ZsetField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::ZsetField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZsetField_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZsetField_phxkv_2eproto}, {}};

static void InitDefaultsscc_info_ZsetRequest_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_ZsetRequest_default_instance_;
    new (ptr) ::phxkv::ZsetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::ZsetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ZsetRequest_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ZsetRequest_phxkv_2eproto}, {
      &scc_info_ZsetField_phxkv_2eproto.base,}};

static void InitDefaultsscc_info_ZsetResponse_phxkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxkv::_ZsetResponse_default_instance_;
    new (ptr) ::phxkv::ZsetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxkv::ZsetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ZsetResponse_phxkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ZsetResponse_phxkv_2eproto}, {
      &scc_info_ZsetField_phxkv_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_phxkv_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_phxkv_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_phxkv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_phxkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::DropMastReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::DropMastReq, cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::DropMastRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::DropMastRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::BemasterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::BemasterReq, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::BemasterRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::BemasterRes, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupListReq, groupcnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupListRes, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupListRes, submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVOperator, key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVOperator, value_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVOperator, operator__),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVOperator, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVResponse, data_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVResponse, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVResponse, submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupsMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupsMapMsg, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupsMapMsg, subgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupMsg, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupMsg, groupid_),
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupMsg, masterip_),
  PROTOBUF_FIELD_OFFSET(::phxkv::GroupMsg, masterport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutRequest, subs_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutRequest, operator__),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutRequest, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutSubRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutSubRequest, key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutSubRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutResponse, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchPutResponse, submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetRequest, subs_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetRequest, operator__),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetRequest, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetResponse, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetResponse, values_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetResponse, submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubResponse, ret_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubResponse, key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubResponse, value_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KvBatchGetSubResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::KVMessage, type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVMessage, putopt_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVMessage, batchputopt_),
  PROTOBUF_FIELD_OFFSET(::phxkv::KVMessage, requestopt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, groupid_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, data_type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, ttl_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, hash_req_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, list_req_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, set_req_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Request, zset_req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashRequest, field_),
  PROTOBUF_FIELD_OFFSET(::phxkv::HashRequest, int_value_),
  PROTOBUF_FIELD_OFFSET(::phxkv::HashRequest, float_value_),
  PROTOBUF_FIELD_OFFSET(::phxkv::HashRequest, req_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashField, field_key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::HashField, field_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, ret_code_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, ret_message_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, length_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, exist_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, data_type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, submap_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, hash_response_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, list_response_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, set_response_),
  PROTOBUF_FIELD_OFFSET(::phxkv::Response, zset_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::HashResponse, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, req_type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, field_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, start_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, end_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, index_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, count_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, pos_flag_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, pivot_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ListRequest, src_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::ListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::ListResponse, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::SetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::SetRequest, req_type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::SetRequest, field_),
  PROTOBUF_FIELD_OFFSET(::phxkv::SetRequest, src_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::SetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::SetResponse, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, req_type_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, field_key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, field_score_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, min_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, max_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, incrscore_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, src_set_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, start_pos_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, end_pos_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetRequest, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetField, field_key_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetField, field_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetResponse, field_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetResponse, mem_rank_),
  PROTOBUF_FIELD_OFFSET(::phxkv::ZsetResponse, mem_score_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::phxkv::DropMastReq)},
  { 6, -1, sizeof(::phxkv::DropMastRes)},
  { 12, -1, sizeof(::phxkv::BemasterReq)},
  { 18, -1, sizeof(::phxkv::BemasterRes)},
  { 24, -1, sizeof(::phxkv::GroupListReq)},
  { 30, -1, sizeof(::phxkv::GroupListRes)},
  { 37, -1, sizeof(::phxkv::KVOperator)},
  { 46, -1, sizeof(::phxkv::KVResponse)},
  { 54, -1, sizeof(::phxkv::GroupsMapMsg)},
  { 61, -1, sizeof(::phxkv::GroupMsg)},
  { 70, -1, sizeof(::phxkv::KvBatchPutRequest)},
  { 78, -1, sizeof(::phxkv::KvBatchPutSubRequest)},
  { 85, -1, sizeof(::phxkv::KvBatchPutResponse)},
  { 92, -1, sizeof(::phxkv::KvBatchGetRequest)},
  { 100, -1, sizeof(::phxkv::KvBatchGetSubRequest)},
  { 106, -1, sizeof(::phxkv::KvBatchGetResponse)},
  { 114, -1, sizeof(::phxkv::KvBatchGetSubResponse)},
  { 123, -1, sizeof(::phxkv::KVMessage)},
  { 132, -1, sizeof(::phxkv::Request)},
  { 145, -1, sizeof(::phxkv::HashRequest)},
  { 154, -1, sizeof(::phxkv::HashField)},
  { 161, -1, sizeof(::phxkv::Response)},
  { 176, -1, sizeof(::phxkv::HashResponse)},
  { 182, -1, sizeof(::phxkv::ListRequest)},
  { 196, -1, sizeof(::phxkv::ListResponse)},
  { 202, -1, sizeof(::phxkv::SetRequest)},
  { 210, -1, sizeof(::phxkv::SetResponse)},
  { 216, -1, sizeof(::phxkv::ZsetRequest)},
  { 232, -1, sizeof(::phxkv::ZsetField)},
  { 239, -1, sizeof(::phxkv::ZsetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_DropMastReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_DropMastRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_BemasterReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_BemasterRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_GroupListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_GroupListRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KVOperator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KVResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_GroupsMapMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_GroupMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchPutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchPutSubRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchPutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchGetSubRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KvBatchGetSubResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_KVMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_HashRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_HashField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_HashResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_ListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_ListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_SetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_SetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_ZsetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_ZsetField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxkv::_ZsetResponse_default_instance_),
};

const char descriptor_table_protodef_phxkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013phxkv.proto\022\005phxkv\"\032\n\013DropMastReq\022\013\n\003c"
  "nt\030\001 \001(\005\"\032\n\013DropMastRes\022\013\n\003ret\030\001 \001(\005\"\033\n\013"
  "BemasterReq\022\014\n\004flag\030\001 \001(\005\"\032\n\013BemasterRes"
  "\022\013\n\003ret\030\001 \001(\005\" \n\014GroupListReq\022\020\n\010groupcn"
  "t\030\001 \001(\005\"@\n\014GroupListRes\022\013\n\003ret\030\001 \001(\005\022#\n\006"
  "subMap\030\002 \001(\0132\023.phxkv.GroupsMapMsg\"K\n\nKVO"
  "perator\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\022\020\n\010o"
  "perator\030\003 \001(\r\022\017\n\007groupid\030\004 \001(\r\"L\n\nKVResp"
  "onse\022\014\n\004data\030\001 \001(\014\022\013\n\003ret\030\002 \001(\005\022#\n\006subMa"
  "p\030\003 \001(\0132\023.phxkv.GroupsMapMsg\">\n\014GroupsMa"
  "pMsg\022\013\n\003ret\030\001 \001(\005\022!\n\010subGroup\030\002 \003(\0132\017.ph"
  "xkv.GroupMsg\"N\n\010GroupMsg\022\013\n\003ret\030\001 \001(\005\022\017\n"
  "\007groupid\030\002 \001(\005\022\020\n\010masterip\030\003 \001(\014\022\022\n\nmast"
  "erport\030\004 \001(\005\"a\n\021KvBatchPutRequest\022)\n\004sub"
  "s\030\001 \003(\0132\033.phxkv.KvBatchPutSubRequest\022\020\n\010"
  "operator\030\002 \001(\r\022\017\n\007groupid\030\003 \001(\r\"2\n\024KvBat"
  "chPutSubRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 "
  "\001(\014\"F\n\022KvBatchPutResponse\022\013\n\003ret\030\001 \001(\005\022#"
  "\n\006subMap\030\002 \001(\0132\023.phxkv.GroupsMapMsg\"a\n\021K"
  "vBatchGetRequest\022)\n\004subs\030\001 \003(\0132\033.phxkv.K"
  "vBatchGetSubRequest\022\020\n\010operator\030\002 \001(\r\022\017\n"
  "\007groupid\030\003 \001(\r\"#\n\024KvBatchGetSubRequest\022\013"
  "\n\003key\030\001 \001(\014\"t\n\022KvBatchGetResponse\022\013\n\003ret"
  "\030\001 \001(\005\022,\n\006values\030\002 \003(\0132\034.phxkv.KvBatchGe"
  "tSubResponse\022#\n\006subMap\030\003 \001(\0132\023.phxkv.Gro"
  "upsMapMsg\"N\n\025KvBatchGetSubResponse\022\013\n\003re"
  "t\030\001 \001(\005\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\022\014\n\004d"
  "ata\030\004 \001(\014\"\333\001\n\tKVMessage\022#\n\004type\030\001 \001(\0162\025."
  "phxkv.KVMessage.Type\022!\n\006PutOpt\030\002 \001(\0132\021.p"
  "hxkv.KVOperator\022-\n\013BatchPutOpt\030\003 \001(\0132\030.p"
  "hxkv.KvBatchPutRequest\022\"\n\nRequestOpt\030\004 \001"
  "(\0132\016.phxkv.Request\"3\n\004Type\022\r\n\tSingleMsg\020"
  "\000\022\014\n\010BatchMsg\020\001\022\016\n\nRequestMsg\020\002\"\332\002\n\007Requ"
  "est\022\017\n\007groupid\030\001 \001(\r\022*\n\tdata_type\030\002 \001(\0162"
  "\027.phxkv.Request.req_type\022\013\n\003key\030\003 \001(\014\022\013\n"
  "\003ttl\030\004 \001(\r\022$\n\010hash_req\030\005 \001(\0132\022.phxkv.Has"
  "hRequest\022$\n\010list_req\030\006 \001(\0132\022.phxkv.ListR"
  "equest\022\"\n\007set_req\030\007 \001(\0132\021.phxkv.SetReque"
  "st\022$\n\010zset_req\030\010 \001(\0132\022.phxkv.ZsetRequest"
  "\"b\n\010req_type\022\014\n\010HASH_REQ\020\000\022\014\n\010LIST_REQ\020\001"
  "\022\013\n\007SET_REQ\020\002\022\014\n\010ZSET_REQ\020\003\022\016\n\nEXPIRE_RE"
  "Q\020\004\022\017\n\013DEL_KEY_REQ\020\005\"\362\002\n\013HashRequest\022\037\n\005"
  "field\030\001 \003(\0132\020.phxkv.HashField\022\021\n\tint_val"
  "ue\030\002 \001(\005\022\023\n\013float_value\030\003 \001(\002\022-\n\010req_typ"
  "e\030\004 \001(\0162\033.phxkv.HashRequest.enum_req\"\352\001\n"
  "\010enum_req\022\016\n\nHASH_START\020\000\022\014\n\010HASH_DEL\020\001\022"
  "\014\n\010HASH_GET\020\002\022\017\n\013HASH_GETALL\020\003\022\014\n\010HASH_S"
  "ET\020\004\022\017\n\013HASH_EXISTS\020\005\022\021\n\rHASH_INCR_INT\020\006"
  "\022\023\n\017HASH_INCR_FLOAT\020\007\022\r\n\tHASH_KEYS\020\010\022\014\n\010"
  "HASH_LEN\020\t\022\r\n\tHASH_MGET\020\n\022\r\n\tHASH_MSET\020\013"
  "\022\016\n\nHASH_SETNX\020\014\022\017\n\013HASH_VALUES\020\r\"3\n\tHas"
  "hField\022\021\n\tfield_key\030\001 \001(\014\022\023\n\013field_value"
  "\030\002 \001(\014\"\232\005\n\010Response\022+\n\010ret_code\030\001 \001(\0162\031."
  "phxkv.Response.enum_code\022\023\n\013ret_message\030"
  "\002 \001(\014\022\016\n\006length\030\003 \001(\004\022\r\n\005exist\030\004 \001(\010\0220\n\t"
  "data_type\030\005 \001(\0162\035.phxkv.Response.respons"
  "e_type\022#\n\006subMap\030\006 \001(\0132\023.phxkv.GroupsMap"
  "Msg\022*\n\rhash_response\030\007 \001(\0132\023.phxkv.HashR"
  "esponse\022*\n\rlist_response\030\010 \001(\0132\023.phxkv.L"
  "istResponse\022(\n\014set_response\030\t \001(\0132\022.phxk"
  "v.SetResponse\022*\n\rzset_response\030\n \001(\0132\023.p"
  "hxkv.ZsetResponse\"\317\001\n\tenum_code\022\014\n\010RES_S"
  "UCC\020\000\022\024\n\020RES_KEY_NOTEXIST\020\001\022\023\n\017RES_SERVE"
  "R_BUSY\020\002\022\017\n\013PARAM_ERROR\020\003\022\021\n\rMETA_NOTEXI"
  "ST\020\004\022\017\n\013ROCKSDB_ERR\020\005\022\022\n\016RES_KEY_EXISTS\020"
  "\006\022\027\n\023RES_MASTER_REDIRECT\020\n\022\021\n\rRES_NO_MAS"
  "TER\020e\022\024\n\007RES_ERR\020\377\377\377\377\377\377\377\377\377\001\"V\n\rresponse_"
  "type\022\016\n\nSTRING_RES\020\000\022\014\n\010HASH_RES\020\001\022\014\n\010LI"
  "ST_RES\020\002\022\013\n\007SET_RES\020\003\022\014\n\010ZSET_RES\020\004\"/\n\014H"
  "ashResponse\022\037\n\005field\030\004 \003(\0132\020.phxkv.HashF"
  "ield\"\247\003\n\013ListRequest\022-\n\010req_type\030\001 \001(\0162\033"
  ".phxkv.ListRequest.enum_req\022\r\n\005field\030\002 \003"
  "(\014\022\r\n\005start\030\003 \001(\005\022\013\n\003end\030\004 \001(\005\022\r\n\005index\030"
  "\005 \001(\005\022\r\n\005count\030\006 \001(\005\022\020\n\010pos_flag\030\007 \001(\005\022\r"
  "\n\005pivot\030\010 \001(\014\022\020\n\010src_list\030\t \001(\014\"\354\001\n\010enum"
  "_req\022\r\n\tLIST_LPOP\020\000\022\r\n\tLIST_RPOP\020\001\022\023\n\017LI"
  "ST_RPOP_LPUSH\020\002\022\016\n\nLIST_INDEX\020\003\022\017\n\013LIST_"
  "INSERT\020\004\022\017\n\013LIST_LENGTH\020\005\022\016\n\nLIST_LPUSH\020"
  "\006\022\017\n\013LIST_LPUSHX\020\007\022\016\n\nLIST_RANGE\020\010\022\014\n\010LI"
  "ST_REM\020\t\022\016\n\nLIST_RPUSH\020\n\022\017\n\013LIST_RPUSHX\020"
  "\013\022\014\n\010LIST_SET\020\014\022\r\n\tLIST_TRIM\020\r\"\035\n\014ListRe"
  "sponse\022\r\n\005field\030\001 \003(\014\"\307\002\n\nSetRequest\022,\n\010"
  "req_type\030\001 \001(\0162\032.phxkv.SetRequest.enum_r"
  "eq\022\r\n\005field\030\002 \003(\014\022\017\n\007src_set\030\003 \003(\014\"\352\001\n\010e"
  "num_req\022\013\n\007SET_ADD\020\000\022\013\n\007SET_REM\020\001\022\014\n\010SET"
  "_CARD\020\002\022\017\n\013SET_MEMBERS\020\003\022\021\n\rSET_UNONSTOR"
  "E\020\004\022\r\n\tSET_UNION\020\005\022\022\n\016SET_INTERSTORE\020\006\022\r"
  "\n\tSET_INTER\020\007\022\021\n\rSET_DIFFSTORE\020\010\022\014\n\010SET_"
  "DIFF\020\t\022\020\n\014SET_ISMEMBER\020\n\022\013\n\007SET_POP\020\013\022\022\n"
  "\016SET_RANDMEMBER\020\014\022\014\n\010SET_MOVE\020\r\"\034\n\013SetRe"
  "sponse\022\r\n\005field\030\001 \003(\014\"\306\004\n\013ZsetRequest\022-\n"
  "\010req_type\030\001 \001(\0162\033.phxkv.ZsetRequest.enum"
  "_req\022#\n\tfield_key\030\002 \003(\0132\020.phxkv.ZsetFiel"
  "d\022%\n\013field_score\030\003 \003(\0132\020.phxkv.ZsetField"
  "\022\013\n\003min\030\004 \001(\003\022\013\n\003max\030\005 \001(\003\022\021\n\tincrscore\030"
  "\006 \001(\003\022\017\n\007src_set\030\007 \003(\014\022\021\n\tstart_pos\030\010 \001("
  "\003\022\017\n\007end_pos\030\t \001(\003\022\016\n\006offset\030\n \001(\003\022\r\n\005co"
  "unt\030\013 \001(\003\"\272\002\n\010enum_req\022\014\n\010ZSET_ADD\020\000\022\r\n\t"
  "ZSET_CARD\020\001\022\016\n\nZSET_COUNT\020\002\022\017\n\013ZSET_INCR"
  "BY\020\003\022\016\n\nZSET_RANGE\020\004\022\023\n\017ZSET_UNIONSTORE\020"
  "\005\022\023\n\017ZSET_INTERSTORE\020\006\022\025\n\021ZSET_RANGEBYSC"
  "ORE\020\007\022\014\n\010ZSET_REM\020\010\022\r\n\tZSET_RANK\020\t\022\020\n\014ZS"
  "ET_REVRANK\020\n\022\016\n\nZSET_SCORE\020\013\022\021\n\rZSET_REV"
  "RANGE\020\014\022\030\n\024ZSET_REVRANGEBYSCORE\020\r\022\030\n\024ZSE"
  "T_REM_RANGEBYRANK\020\016\022\031\n\025ZSET_REM_RANGEBYS"
  "CORE\020\017\"3\n\tZsetField\022\021\n\tfield_key\030\001 \001(\014\022\023"
  "\n\013field_value\030\002 \001(\014\"T\n\014ZsetResponse\022\037\n\005f"
  "ield\030\001 \003(\0132\020.phxkv.ZsetField\022\020\n\010mem_rank"
  "\030\002 \001(\003\022\021\n\tmem_score\030\003 \001(\0032\332\005\n\013PhxKVServe"
  "r\022/\n\005KvPut\022\021.phxkv.KVOperator\032\021.phxkv.KV"
  "Response\"\000\022/\n\005KvGet\022\021.phxkv.KVOperator\032\021"
  ".phxkv.KVResponse\"\000\0224\n\nKvGetLocal\022\021.phxk"
  "v.KVOperator\032\021.phxkv.KVResponse\"\000\0222\n\010KvD"
  "elete\022\021.phxkv.KVOperator\032\021.phxkv.KVRespo"
  "nse\"\000\022C\n\nKvBatchPut\022\030.phxkv.KvBatchPutRe"
  "quest\032\031.phxkv.KvBatchPutResponse\"\000\022C\n\nKv"
  "BatchGet\022\030.phxkv.KvBatchGetRequest\032\031.phx"
  "kv.KvBatchGetResponse\"\000\022<\n\016KvGetgroupLis"
  "t\022\023.phxkv.GroupListReq\032\023.phxkv.GroupList"
  "Res\"\000\0228\n\014KvDropMaster\022\022.phxkv.DropMastRe"
  "q\032\022.phxkv.DropMastRes\"\000\0226\n\nKvBeMaster\022\022."
  "phxkv.BemasterReq\032\022.phxkv.BemasterRes\"\000\022"
  "0\n\013HashOperate\022\016.phxkv.Request\032\017.phxkv.R"
  "esponse\"\000\0220\n\013ListOperate\022\016.phxkv.Request"
  "\032\017.phxkv.Response\"\000\022/\n\nSetOperate\022\016.phxk"
  "v.Request\032\017.phxkv.Response\"\000\0220\n\013ZsetOper"
  "ate\022\016.phxkv.Request\032\017.phxkv.Response\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_phxkv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_phxkv_2eproto_sccs[30] = {
  &scc_info_BemasterReq_phxkv_2eproto.base,
  &scc_info_BemasterRes_phxkv_2eproto.base,
  &scc_info_DropMastReq_phxkv_2eproto.base,
  &scc_info_DropMastRes_phxkv_2eproto.base,
  &scc_info_GroupListReq_phxkv_2eproto.base,
  &scc_info_GroupListRes_phxkv_2eproto.base,
  &scc_info_GroupMsg_phxkv_2eproto.base,
  &scc_info_GroupsMapMsg_phxkv_2eproto.base,
  &scc_info_HashField_phxkv_2eproto.base,
  &scc_info_HashRequest_phxkv_2eproto.base,
  &scc_info_HashResponse_phxkv_2eproto.base,
  &scc_info_KVMessage_phxkv_2eproto.base,
  &scc_info_KVOperator_phxkv_2eproto.base,
  &scc_info_KVResponse_phxkv_2eproto.base,
  &scc_info_KvBatchGetRequest_phxkv_2eproto.base,
  &scc_info_KvBatchGetResponse_phxkv_2eproto.base,
  &scc_info_KvBatchGetSubRequest_phxkv_2eproto.base,
  &scc_info_KvBatchGetSubResponse_phxkv_2eproto.base,
  &scc_info_KvBatchPutRequest_phxkv_2eproto.base,
  &scc_info_KvBatchPutResponse_phxkv_2eproto.base,
  &scc_info_KvBatchPutSubRequest_phxkv_2eproto.base,
  &scc_info_ListRequest_phxkv_2eproto.base,
  &scc_info_ListResponse_phxkv_2eproto.base,
  &scc_info_Request_phxkv_2eproto.base,
  &scc_info_Response_phxkv_2eproto.base,
  &scc_info_SetRequest_phxkv_2eproto.base,
  &scc_info_SetResponse_phxkv_2eproto.base,
  &scc_info_ZsetField_phxkv_2eproto.base,
  &scc_info_ZsetRequest_phxkv_2eproto.base,
  &scc_info_ZsetResponse_phxkv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_phxkv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phxkv_2eproto = {
  false, false, descriptor_table_protodef_phxkv_2eproto, "phxkv.proto", 5086,
  &descriptor_table_phxkv_2eproto_once, descriptor_table_phxkv_2eproto_sccs, descriptor_table_phxkv_2eproto_deps, 30, 0,
  schemas, file_default_instances, TableStruct_phxkv_2eproto::offsets,
  file_level_metadata_phxkv_2eproto, 30, file_level_enum_descriptors_phxkv_2eproto, file_level_service_descriptors_phxkv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_phxkv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_phxkv_2eproto)), true);
namespace phxkv {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[0];
}
bool KVMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KVMessage_Type KVMessage::SingleMsg;
constexpr KVMessage_Type KVMessage::BatchMsg;
constexpr KVMessage_Type KVMessage::RequestMsg;
constexpr KVMessage_Type KVMessage::Type_MIN;
constexpr KVMessage_Type KVMessage::Type_MAX;
constexpr int KVMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_req_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[1];
}
bool Request_req_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_req_type Request::HASH_REQ;
constexpr Request_req_type Request::LIST_REQ;
constexpr Request_req_type Request::SET_REQ;
constexpr Request_req_type Request::ZSET_REQ;
constexpr Request_req_type Request::EXPIRE_REQ;
constexpr Request_req_type Request::DEL_KEY_REQ;
constexpr Request_req_type Request::req_type_MIN;
constexpr Request_req_type Request::req_type_MAX;
constexpr int Request::req_type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashRequest_enum_req_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[2];
}
bool HashRequest_enum_req_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HashRequest_enum_req HashRequest::HASH_START;
constexpr HashRequest_enum_req HashRequest::HASH_DEL;
constexpr HashRequest_enum_req HashRequest::HASH_GET;
constexpr HashRequest_enum_req HashRequest::HASH_GETALL;
constexpr HashRequest_enum_req HashRequest::HASH_SET;
constexpr HashRequest_enum_req HashRequest::HASH_EXISTS;
constexpr HashRequest_enum_req HashRequest::HASH_INCR_INT;
constexpr HashRequest_enum_req HashRequest::HASH_INCR_FLOAT;
constexpr HashRequest_enum_req HashRequest::HASH_KEYS;
constexpr HashRequest_enum_req HashRequest::HASH_LEN;
constexpr HashRequest_enum_req HashRequest::HASH_MGET;
constexpr HashRequest_enum_req HashRequest::HASH_MSET;
constexpr HashRequest_enum_req HashRequest::HASH_SETNX;
constexpr HashRequest_enum_req HashRequest::HASH_VALUES;
constexpr HashRequest_enum_req HashRequest::enum_req_MIN;
constexpr HashRequest_enum_req HashRequest::enum_req_MAX;
constexpr int HashRequest::enum_req_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_enum_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[3];
}
bool Response_enum_code_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 101:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Response_enum_code Response::RES_SUCC;
constexpr Response_enum_code Response::RES_KEY_NOTEXIST;
constexpr Response_enum_code Response::RES_SERVER_BUSY;
constexpr Response_enum_code Response::PARAM_ERROR;
constexpr Response_enum_code Response::META_NOTEXIST;
constexpr Response_enum_code Response::ROCKSDB_ERR;
constexpr Response_enum_code Response::RES_KEY_EXISTS;
constexpr Response_enum_code Response::RES_MASTER_REDIRECT;
constexpr Response_enum_code Response::RES_NO_MASTER;
constexpr Response_enum_code Response::RES_ERR;
constexpr Response_enum_code Response::enum_code_MIN;
constexpr Response_enum_code Response::enum_code_MAX;
constexpr int Response::enum_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_response_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[4];
}
bool Response_response_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Response_response_type Response::STRING_RES;
constexpr Response_response_type Response::HASH_RES;
constexpr Response_response_type Response::LIST_RES;
constexpr Response_response_type Response::SET_RES;
constexpr Response_response_type Response::ZSET_RES;
constexpr Response_response_type Response::response_type_MIN;
constexpr Response_response_type Response::response_type_MAX;
constexpr int Response::response_type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListRequest_enum_req_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[5];
}
bool ListRequest_enum_req_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ListRequest_enum_req ListRequest::LIST_LPOP;
constexpr ListRequest_enum_req ListRequest::LIST_RPOP;
constexpr ListRequest_enum_req ListRequest::LIST_RPOP_LPUSH;
constexpr ListRequest_enum_req ListRequest::LIST_INDEX;
constexpr ListRequest_enum_req ListRequest::LIST_INSERT;
constexpr ListRequest_enum_req ListRequest::LIST_LENGTH;
constexpr ListRequest_enum_req ListRequest::LIST_LPUSH;
constexpr ListRequest_enum_req ListRequest::LIST_LPUSHX;
constexpr ListRequest_enum_req ListRequest::LIST_RANGE;
constexpr ListRequest_enum_req ListRequest::LIST_REM;
constexpr ListRequest_enum_req ListRequest::LIST_RPUSH;
constexpr ListRequest_enum_req ListRequest::LIST_RPUSHX;
constexpr ListRequest_enum_req ListRequest::LIST_SET;
constexpr ListRequest_enum_req ListRequest::LIST_TRIM;
constexpr ListRequest_enum_req ListRequest::enum_req_MIN;
constexpr ListRequest_enum_req ListRequest::enum_req_MAX;
constexpr int ListRequest::enum_req_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRequest_enum_req_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[6];
}
bool SetRequest_enum_req_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetRequest_enum_req SetRequest::SET_ADD;
constexpr SetRequest_enum_req SetRequest::SET_REM;
constexpr SetRequest_enum_req SetRequest::SET_CARD;
constexpr SetRequest_enum_req SetRequest::SET_MEMBERS;
constexpr SetRequest_enum_req SetRequest::SET_UNONSTORE;
constexpr SetRequest_enum_req SetRequest::SET_UNION;
constexpr SetRequest_enum_req SetRequest::SET_INTERSTORE;
constexpr SetRequest_enum_req SetRequest::SET_INTER;
constexpr SetRequest_enum_req SetRequest::SET_DIFFSTORE;
constexpr SetRequest_enum_req SetRequest::SET_DIFF;
constexpr SetRequest_enum_req SetRequest::SET_ISMEMBER;
constexpr SetRequest_enum_req SetRequest::SET_POP;
constexpr SetRequest_enum_req SetRequest::SET_RANDMEMBER;
constexpr SetRequest_enum_req SetRequest::SET_MOVE;
constexpr SetRequest_enum_req SetRequest::enum_req_MIN;
constexpr SetRequest_enum_req SetRequest::enum_req_MAX;
constexpr int SetRequest::enum_req_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZsetRequest_enum_req_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_phxkv_2eproto);
  return file_level_enum_descriptors_phxkv_2eproto[7];
}
bool ZsetRequest_enum_req_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_ADD;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_CARD;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_COUNT;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_INCRBY;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_RANGE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_UNIONSTORE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_INTERSTORE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_RANGEBYSCORE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REM;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_RANK;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REVRANK;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_SCORE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REVRANGE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REVRANGEBYSCORE;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REM_RANGEBYRANK;
constexpr ZsetRequest_enum_req ZsetRequest::ZSET_REM_RANGEBYSCORE;
constexpr ZsetRequest_enum_req ZsetRequest::enum_req_MIN;
constexpr ZsetRequest_enum_req ZsetRequest::enum_req_MAX;
constexpr int ZsetRequest::enum_req_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DropMastReq::InitAsDefaultInstance() {
}
class DropMastReq::_Internal {
 public:
};

DropMastReq::DropMastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.DropMastReq)
}
DropMastReq::DropMastReq(const DropMastReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:phxkv.DropMastReq)
}

void DropMastReq::SharedCtor() {
  cnt_ = 0;
}

DropMastReq::~DropMastReq() {
  // @@protoc_insertion_point(destructor:phxkv.DropMastReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropMastReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DropMastReq::ArenaDtor(void* object) {
  DropMastReq* _this = reinterpret_cast< DropMastReq* >(object);
  (void)_this;
}
void DropMastReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropMastReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropMastReq& DropMastReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropMastReq_phxkv_2eproto.base);
  return *internal_default_instance();
}


void DropMastReq::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.DropMastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cnt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropMastReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropMastReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.DropMastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cnt = 1;
  if (this->cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.DropMastReq)
  return target;
}

size_t DropMastReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.DropMastReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cnt = 1;
  if (this->cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropMastReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.DropMastReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DropMastReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropMastReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.DropMastReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.DropMastReq)
    MergeFrom(*source);
  }
}

void DropMastReq::MergeFrom(const DropMastReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.DropMastReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
}

void DropMastReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.DropMastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropMastReq::CopyFrom(const DropMastReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.DropMastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropMastReq::IsInitialized() const {
  return true;
}

void DropMastReq::InternalSwap(DropMastReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(cnt_, other->cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropMastReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropMastRes::InitAsDefaultInstance() {
}
class DropMastRes::_Internal {
 public:
};

DropMastRes::DropMastRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.DropMastRes)
}
DropMastRes::DropMastRes(const DropMastRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.DropMastRes)
}

void DropMastRes::SharedCtor() {
  ret_ = 0;
}

DropMastRes::~DropMastRes() {
  // @@protoc_insertion_point(destructor:phxkv.DropMastRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropMastRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DropMastRes::ArenaDtor(void* object) {
  DropMastRes* _this = reinterpret_cast< DropMastRes* >(object);
  (void)_this;
}
void DropMastRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropMastRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropMastRes& DropMastRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropMastRes_phxkv_2eproto.base);
  return *internal_default_instance();
}


void DropMastRes::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.DropMastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropMastRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropMastRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.DropMastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.DropMastRes)
  return target;
}

size_t DropMastRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.DropMastRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropMastRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.DropMastRes)
  GOOGLE_DCHECK_NE(&from, this);
  const DropMastRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropMastRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.DropMastRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.DropMastRes)
    MergeFrom(*source);
  }
}

void DropMastRes::MergeFrom(const DropMastRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.DropMastRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void DropMastRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.DropMastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropMastRes::CopyFrom(const DropMastRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.DropMastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropMastRes::IsInitialized() const {
  return true;
}

void DropMastRes::InternalSwap(DropMastRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropMastRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BemasterReq::InitAsDefaultInstance() {
}
class BemasterReq::_Internal {
 public:
};

BemasterReq::BemasterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.BemasterReq)
}
BemasterReq::BemasterReq(const BemasterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:phxkv.BemasterReq)
}

void BemasterReq::SharedCtor() {
  flag_ = 0;
}

BemasterReq::~BemasterReq() {
  // @@protoc_insertion_point(destructor:phxkv.BemasterReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BemasterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BemasterReq::ArenaDtor(void* object) {
  BemasterReq* _this = reinterpret_cast< BemasterReq* >(object);
  (void)_this;
}
void BemasterReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BemasterReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BemasterReq& BemasterReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BemasterReq_phxkv_2eproto.base);
  return *internal_default_instance();
}


void BemasterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.BemasterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BemasterReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BemasterReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.BemasterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.BemasterReq)
  return target;
}

size_t BemasterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.BemasterReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BemasterReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.BemasterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BemasterReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BemasterReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.BemasterReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.BemasterReq)
    MergeFrom(*source);
  }
}

void BemasterReq::MergeFrom(const BemasterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.BemasterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void BemasterReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.BemasterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BemasterReq::CopyFrom(const BemasterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.BemasterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BemasterReq::IsInitialized() const {
  return true;
}

void BemasterReq::InternalSwap(BemasterReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BemasterReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BemasterRes::InitAsDefaultInstance() {
}
class BemasterRes::_Internal {
 public:
};

BemasterRes::BemasterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.BemasterRes)
}
BemasterRes::BemasterRes(const BemasterRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.BemasterRes)
}

void BemasterRes::SharedCtor() {
  ret_ = 0;
}

BemasterRes::~BemasterRes() {
  // @@protoc_insertion_point(destructor:phxkv.BemasterRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BemasterRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BemasterRes::ArenaDtor(void* object) {
  BemasterRes* _this = reinterpret_cast< BemasterRes* >(object);
  (void)_this;
}
void BemasterRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BemasterRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BemasterRes& BemasterRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BemasterRes_phxkv_2eproto.base);
  return *internal_default_instance();
}


void BemasterRes::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.BemasterRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BemasterRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BemasterRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.BemasterRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.BemasterRes)
  return target;
}

size_t BemasterRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.BemasterRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BemasterRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.BemasterRes)
  GOOGLE_DCHECK_NE(&from, this);
  const BemasterRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BemasterRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.BemasterRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.BemasterRes)
    MergeFrom(*source);
  }
}

void BemasterRes::MergeFrom(const BemasterRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.BemasterRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void BemasterRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.BemasterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BemasterRes::CopyFrom(const BemasterRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.BemasterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BemasterRes::IsInitialized() const {
  return true;
}

void BemasterRes::InternalSwap(BemasterRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BemasterRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupListReq::InitAsDefaultInstance() {
}
class GroupListReq::_Internal {
 public:
};

GroupListReq::GroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.GroupListReq)
}
GroupListReq::GroupListReq(const GroupListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupcnt_ = from.groupcnt_;
  // @@protoc_insertion_point(copy_constructor:phxkv.GroupListReq)
}

void GroupListReq::SharedCtor() {
  groupcnt_ = 0;
}

GroupListReq::~GroupListReq() {
  // @@protoc_insertion_point(destructor:phxkv.GroupListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupListReq::ArenaDtor(void* object) {
  GroupListReq* _this = reinterpret_cast< GroupListReq* >(object);
  (void)_this;
}
void GroupListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupListReq& GroupListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupListReq_phxkv_2eproto.base);
  return *internal_default_instance();
}


void GroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.GroupListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupcnt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 groupcnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.GroupListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupcnt = 1;
  if (this->groupcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.GroupListReq)
  return target;
}

size_t GroupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.GroupListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 groupcnt = 1;
  if (this->groupcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupcnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.GroupListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.GroupListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.GroupListReq)
    MergeFrom(*source);
  }
}

void GroupListReq::MergeFrom(const GroupListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.GroupListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.groupcnt() != 0) {
    _internal_set_groupcnt(from._internal_groupcnt());
  }
}

void GroupListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.GroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListReq::CopyFrom(const GroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.GroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListReq::IsInitialized() const {
  return true;
}

void GroupListReq::InternalSwap(GroupListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(groupcnt_, other->groupcnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupListRes::InitAsDefaultInstance() {
  ::phxkv::_GroupListRes_default_instance_._instance.get_mutable()->submap_ = const_cast< ::phxkv::GroupsMapMsg*>(
      ::phxkv::GroupsMapMsg::internal_default_instance());
}
class GroupListRes::_Internal {
 public:
  static const ::phxkv::GroupsMapMsg& submap(const GroupListRes* msg);
};

const ::phxkv::GroupsMapMsg&
GroupListRes::_Internal::submap(const GroupListRes* msg) {
  return *msg->submap_;
}
GroupListRes::GroupListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.GroupListRes)
}
GroupListRes::GroupListRes(const GroupListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submap()) {
    submap_ = new ::phxkv::GroupsMapMsg(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.GroupListRes)
}

void GroupListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupListRes_phxkv_2eproto.base);
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(ret_));
}

GroupListRes::~GroupListRes() {
  // @@protoc_insertion_point(destructor:phxkv.GroupListRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submap_;
}

void GroupListRes::ArenaDtor(void* object) {
  GroupListRes* _this = reinterpret_cast< GroupListRes* >(object);
  (void)_this;
}
void GroupListRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupListRes& GroupListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupListRes_phxkv_2eproto.base);
  return *internal_default_instance();
}


void GroupListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.GroupListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.GroupsMapMsg subMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupListRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.GroupListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // .phxkv.GroupsMapMsg subMap = 2;
  if (this->has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.GroupListRes)
  return target;
}

size_t GroupListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.GroupListRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxkv.GroupsMapMsg subMap = 2;
  if (this->has_submap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.GroupListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.GroupListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.GroupListRes)
    MergeFrom(*source);
  }
}

void GroupListRes::MergeFrom(const GroupListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.GroupListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    _internal_mutable_submap()->::phxkv::GroupsMapMsg::MergeFrom(from._internal_submap());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GroupListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.GroupListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListRes::CopyFrom(const GroupListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.GroupListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListRes::IsInitialized() const {
  return true;
}

void GroupListRes::InternalSwap(GroupListRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupListRes, ret_)
      + sizeof(GroupListRes::ret_)
      - PROTOBUF_FIELD_OFFSET(GroupListRes, submap_)>(
          reinterpret_cast<char*>(&submap_),
          reinterpret_cast<char*>(&other->submap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KVOperator::InitAsDefaultInstance() {
}
class KVOperator::_Internal {
 public:
};

KVOperator::KVOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KVOperator)
}
KVOperator::KVOperator(const KVOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&operator__, &from.operator__,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:phxkv.KVOperator)
}

void KVOperator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KVOperator_phxkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
}

KVOperator::~KVOperator() {
  // @@protoc_insertion_point(destructor:phxkv.KVOperator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KVOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KVOperator::ArenaDtor(void* object) {
  KVOperator* _this = reinterpret_cast< KVOperator* >(object);
  (void)_this;
}
void KVOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KVOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KVOperator& KVOperator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KVOperator_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KVOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KVOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxkv.KVOperator.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 operator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 groupid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KVOperator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KVOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxkv.KVOperator.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // uint32 operator = 3;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_operator_(), target);
  }

  // uint32 groupid = 4;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KVOperator)
  return target;
}

size_t KVOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KVOperator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 operator = 3;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operator_());
  }

  // uint32 groupid = 4;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KVOperator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KVOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const KVOperator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KVOperator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KVOperator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KVOperator)
    MergeFrom(*source);
  }
}

void KVOperator::MergeFrom(const KVOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KVOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void KVOperator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KVOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVOperator::CopyFrom(const KVOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KVOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVOperator::IsInitialized() const {
  return true;
}

void KVOperator::InternalSwap(KVOperator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVOperator, groupid_)
      + sizeof(KVOperator::groupid_)
      - PROTOBUF_FIELD_OFFSET(KVOperator, operator__)>(
          reinterpret_cast<char*>(&operator__),
          reinterpret_cast<char*>(&other->operator__));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVOperator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KVResponse::InitAsDefaultInstance() {
  ::phxkv::_KVResponse_default_instance_._instance.get_mutable()->submap_ = const_cast< ::phxkv::GroupsMapMsg*>(
      ::phxkv::GroupsMapMsg::internal_default_instance());
}
class KVResponse::_Internal {
 public:
  static const ::phxkv::GroupsMapMsg& submap(const KVResponse* msg);
};

const ::phxkv::GroupsMapMsg&
KVResponse::_Internal::submap(const KVResponse* msg) {
  return *msg->submap_;
}
KVResponse::KVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KVResponse)
}
KVResponse::KVResponse(const KVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_submap()) {
    submap_ = new ::phxkv::GroupsMapMsg(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.KVResponse)
}

void KVResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KVResponse_phxkv_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(ret_));
}

KVResponse::~KVResponse() {
  // @@protoc_insertion_point(destructor:phxkv.KVResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KVResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submap_;
}

void KVResponse::ArenaDtor(void* object) {
  KVResponse* _this = reinterpret_cast< KVResponse* >(object);
  (void)_this;
}
void KVResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KVResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KVResponse& KVResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KVResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.GroupsMapMsg subMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KVResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  // .phxkv.GroupsMapMsg subMap = 3;
  if (this->has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KVResponse)
  return target;
}

size_t KVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KVResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .phxkv.GroupsMapMsg subMap = 3;
  if (this->has_submap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // int32 ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KVResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KVResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KVResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KVResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KVResponse)
    MergeFrom(*source);
  }
}

void KVResponse::MergeFrom(const KVResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_submap()) {
    _internal_mutable_submap()->::phxkv::GroupsMapMsg::MergeFrom(from._internal_submap());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void KVResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVResponse::CopyFrom(const KVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVResponse::IsInitialized() const {
  return true;
}

void KVResponse::InternalSwap(KVResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVResponse, ret_)
      + sizeof(KVResponse::ret_)
      - PROTOBUF_FIELD_OFFSET(KVResponse, submap_)>(
          reinterpret_cast<char*>(&submap_),
          reinterpret_cast<char*>(&other->submap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupsMapMsg::InitAsDefaultInstance() {
}
class GroupsMapMsg::_Internal {
 public:
};

GroupsMapMsg::GroupsMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subgroup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.GroupsMapMsg)
}
GroupsMapMsg::GroupsMapMsg(const GroupsMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subgroup_(from.subgroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.GroupsMapMsg)
}

void GroupsMapMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupsMapMsg_phxkv_2eproto.base);
  ret_ = 0;
}

GroupsMapMsg::~GroupsMapMsg() {
  // @@protoc_insertion_point(destructor:phxkv.GroupsMapMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupsMapMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupsMapMsg::ArenaDtor(void* object) {
  GroupsMapMsg* _this = reinterpret_cast< GroupsMapMsg* >(object);
  (void)_this;
}
void GroupsMapMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupsMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupsMapMsg& GroupsMapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupsMapMsg_phxkv_2eproto.base);
  return *internal_default_instance();
}


void GroupsMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.GroupsMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subgroup_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupsMapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phxkv.GroupMsg subGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subgroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupsMapMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.GroupsMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // repeated .phxkv.GroupMsg subGroup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subgroup(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.GroupsMapMsg)
  return target;
}

size_t GroupsMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.GroupsMapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.GroupMsg subGroup = 2;
  total_size += 1UL * this->_internal_subgroup_size();
  for (const auto& msg : this->subgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupsMapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.GroupsMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupsMapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupsMapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.GroupsMapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.GroupsMapMsg)
    MergeFrom(*source);
  }
}

void GroupsMapMsg::MergeFrom(const GroupsMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.GroupsMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subgroup_.MergeFrom(from.subgroup_);
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void GroupsMapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.GroupsMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupsMapMsg::CopyFrom(const GroupsMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.GroupsMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupsMapMsg::IsInitialized() const {
  return true;
}

void GroupsMapMsg::InternalSwap(GroupsMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subgroup_.InternalSwap(&other->subgroup_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupsMapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupMsg::InitAsDefaultInstance() {
}
class GroupMsg::_Internal {
 public:
};

GroupMsg::GroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.GroupMsg)
}
GroupMsg::GroupMsg(const GroupMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  masterip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_masterip().empty()) {
    masterip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_masterip(),
      GetArena());
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&masterport_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(masterport_));
  // @@protoc_insertion_point(copy_constructor:phxkv.GroupMsg)
}

void GroupMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupMsg_phxkv_2eproto.base);
  masterip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&masterport_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(masterport_));
}

GroupMsg::~GroupMsg() {
  // @@protoc_insertion_point(destructor:phxkv.GroupMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  masterip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupMsg::ArenaDtor(void* object) {
  GroupMsg* _this = reinterpret_cast< GroupMsg* >(object);
  (void)_this;
}
void GroupMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupMsg& GroupMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupMsg_phxkv_2eproto.base);
  return *internal_default_instance();
}


void GroupMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.GroupMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  masterip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&masterport_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(masterport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes masterip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_masterip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 masterport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          masterport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.GroupMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int32 groupid = 2;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  // bytes masterip = 3;
  if (this->masterip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_masterip(), target);
  }

  // int32 masterport = 4;
  if (this->masterport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_masterport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.GroupMsg)
  return target;
}

size_t GroupMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.GroupMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes masterip = 3;
  if (this->masterip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_masterip());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  // int32 groupid = 2;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupid());
  }

  // int32 masterport = 4;
  if (this->masterport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_masterport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.GroupMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.GroupMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.GroupMsg)
    MergeFrom(*source);
  }
}

void GroupMsg::MergeFrom(const GroupMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.GroupMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.masterip().size() > 0) {
    _internal_set_masterip(from._internal_masterip());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from.masterport() != 0) {
    _internal_set_masterport(from._internal_masterport());
  }
}

void GroupMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.GroupMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMsg::CopyFrom(const GroupMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.GroupMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMsg::IsInitialized() const {
  return true;
}

void GroupMsg::InternalSwap(GroupMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  masterip_.Swap(&other->masterip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMsg, masterport_)
      + sizeof(GroupMsg::masterport_)
      - PROTOBUF_FIELD_OFFSET(GroupMsg, ret_)>(
          reinterpret_cast<char*>(&ret_),
          reinterpret_cast<char*>(&other->ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchPutRequest::InitAsDefaultInstance() {
}
class KvBatchPutRequest::_Internal {
 public:
};

KvBatchPutRequest::KvBatchPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchPutRequest)
}
KvBatchPutRequest::KvBatchPutRequest(const KvBatchPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subs_(from.subs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operator__, &from.operator__,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchPutRequest)
}

void KvBatchPutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchPutRequest_phxkv_2eproto.base);
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
}

KvBatchPutRequest::~KvBatchPutRequest() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchPutRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KvBatchPutRequest::ArenaDtor(void* object) {
  KvBatchPutRequest* _this = reinterpret_cast< KvBatchPutRequest* >(object);
  (void)_this;
}
void KvBatchPutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchPutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchPutRequest& KvBatchPutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchPutRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subs_.Clear();
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phxkv.KvBatchPutSubRequest subs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 groupid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchPutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phxkv.KvBatchPutSubRequest subs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subs(i), target, stream);
  }

  // uint32 operator = 2;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operator_(), target);
  }

  // uint32 groupid = 3;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchPutRequest)
  return target;
}

size_t KvBatchPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchPutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.KvBatchPutSubRequest subs = 1;
  total_size += 1UL * this->_internal_subs_size();
  for (const auto& msg : this->subs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operator_());
  }

  // uint32 groupid = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchPutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchPutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchPutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchPutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchPutRequest)
    MergeFrom(*source);
  }
}

void KvBatchPutRequest::MergeFrom(const KvBatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subs_.MergeFrom(from.subs_);
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void KvBatchPutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchPutRequest::CopyFrom(const KvBatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutRequest::IsInitialized() const {
  return true;
}

void KvBatchPutRequest::InternalSwap(KvBatchPutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subs_.InternalSwap(&other->subs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvBatchPutRequest, groupid_)
      + sizeof(KvBatchPutRequest::groupid_)
      - PROTOBUF_FIELD_OFFSET(KvBatchPutRequest, operator__)>(
          reinterpret_cast<char*>(&operator__),
          reinterpret_cast<char*>(&other->operator__));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchPutSubRequest::InitAsDefaultInstance() {
}
class KvBatchPutSubRequest::_Internal {
 public:
};

KvBatchPutSubRequest::KvBatchPutSubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchPutSubRequest)
}
KvBatchPutSubRequest::KvBatchPutSubRequest(const KvBatchPutSubRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchPutSubRequest)
}

void KvBatchPutSubRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchPutSubRequest_phxkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KvBatchPutSubRequest::~KvBatchPutSubRequest() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchPutSubRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchPutSubRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KvBatchPutSubRequest::ArenaDtor(void* object) {
  KvBatchPutSubRequest* _this = reinterpret_cast< KvBatchPutSubRequest* >(object);
  (void)_this;
}
void KvBatchPutSubRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchPutSubRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchPutSubRequest& KvBatchPutSubRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchPutSubRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchPutSubRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchPutSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutSubRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchPutSubRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchPutSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchPutSubRequest)
  return target;
}

size_t KvBatchPutSubRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchPutSubRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchPutSubRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchPutSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchPutSubRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchPutSubRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchPutSubRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchPutSubRequest)
    MergeFrom(*source);
  }
}

void KvBatchPutSubRequest::MergeFrom(const KvBatchPutSubRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchPutSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KvBatchPutSubRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchPutSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchPutSubRequest::CopyFrom(const KvBatchPutSubRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchPutSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutSubRequest::IsInitialized() const {
  return true;
}

void KvBatchPutSubRequest::InternalSwap(KvBatchPutSubRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutSubRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchPutResponse::InitAsDefaultInstance() {
  ::phxkv::_KvBatchPutResponse_default_instance_._instance.get_mutable()->submap_ = const_cast< ::phxkv::GroupsMapMsg*>(
      ::phxkv::GroupsMapMsg::internal_default_instance());
}
class KvBatchPutResponse::_Internal {
 public:
  static const ::phxkv::GroupsMapMsg& submap(const KvBatchPutResponse* msg);
};

const ::phxkv::GroupsMapMsg&
KvBatchPutResponse::_Internal::submap(const KvBatchPutResponse* msg) {
  return *msg->submap_;
}
KvBatchPutResponse::KvBatchPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchPutResponse)
}
KvBatchPutResponse::KvBatchPutResponse(const KvBatchPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submap()) {
    submap_ = new ::phxkv::GroupsMapMsg(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchPutResponse)
}

void KvBatchPutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchPutResponse_phxkv_2eproto.base);
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(ret_));
}

KvBatchPutResponse::~KvBatchPutResponse() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchPutResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchPutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submap_;
}

void KvBatchPutResponse::ArenaDtor(void* object) {
  KvBatchPutResponse* _this = reinterpret_cast< KvBatchPutResponse* >(object);
  (void)_this;
}
void KvBatchPutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchPutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchPutResponse& KvBatchPutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchPutResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.GroupsMapMsg subMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchPutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // .phxkv.GroupsMapMsg subMap = 2;
  if (this->has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchPutResponse)
  return target;
}

size_t KvBatchPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchPutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxkv.GroupsMapMsg subMap = 2;
  if (this->has_submap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchPutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchPutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchPutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchPutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchPutResponse)
    MergeFrom(*source);
  }
}

void KvBatchPutResponse::MergeFrom(const KvBatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    _internal_mutable_submap()->::phxkv::GroupsMapMsg::MergeFrom(from._internal_submap());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void KvBatchPutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchPutResponse::CopyFrom(const KvBatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutResponse::IsInitialized() const {
  return true;
}

void KvBatchPutResponse::InternalSwap(KvBatchPutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvBatchPutResponse, ret_)
      + sizeof(KvBatchPutResponse::ret_)
      - PROTOBUF_FIELD_OFFSET(KvBatchPutResponse, submap_)>(
          reinterpret_cast<char*>(&submap_),
          reinterpret_cast<char*>(&other->submap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchGetRequest::InitAsDefaultInstance() {
}
class KvBatchGetRequest::_Internal {
 public:
};

KvBatchGetRequest::KvBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchGetRequest)
}
KvBatchGetRequest::KvBatchGetRequest(const KvBatchGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subs_(from.subs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operator__, &from.operator__,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchGetRequest)
}

void KvBatchGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchGetRequest_phxkv_2eproto.base);
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
}

KvBatchGetRequest::~KvBatchGetRequest() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KvBatchGetRequest::ArenaDtor(void* object) {
  KvBatchGetRequest* _this = reinterpret_cast< KvBatchGetRequest* >(object);
  (void)_this;
}
void KvBatchGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchGetRequest& KvBatchGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchGetRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subs_.Clear();
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phxkv.KvBatchGetSubRequest subs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 groupid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phxkv.KvBatchGetSubRequest subs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subs(i), target, stream);
  }

  // uint32 operator = 2;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operator_(), target);
  }

  // uint32 groupid = 3;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchGetRequest)
  return target;
}

size_t KvBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.KvBatchGetSubRequest subs = 1;
  total_size += 1UL * this->_internal_subs_size();
  for (const auto& msg : this->subs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operator_());
  }

  // uint32 groupid = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchGetRequest)
    MergeFrom(*source);
  }
}

void KvBatchGetRequest::MergeFrom(const KvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subs_.MergeFrom(from.subs_);
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void KvBatchGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetRequest::CopyFrom(const KvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetRequest::IsInitialized() const {
  return true;
}

void KvBatchGetRequest::InternalSwap(KvBatchGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subs_.InternalSwap(&other->subs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvBatchGetRequest, groupid_)
      + sizeof(KvBatchGetRequest::groupid_)
      - PROTOBUF_FIELD_OFFSET(KvBatchGetRequest, operator__)>(
          reinterpret_cast<char*>(&operator__),
          reinterpret_cast<char*>(&other->operator__));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchGetSubRequest::InitAsDefaultInstance() {
}
class KvBatchGetSubRequest::_Internal {
 public:
};

KvBatchGetSubRequest::KvBatchGetSubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchGetSubRequest)
}
KvBatchGetSubRequest::KvBatchGetSubRequest(const KvBatchGetSubRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchGetSubRequest)
}

void KvBatchGetSubRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchGetSubRequest_phxkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KvBatchGetSubRequest::~KvBatchGetSubRequest() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchGetSubRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchGetSubRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KvBatchGetSubRequest::ArenaDtor(void* object) {
  KvBatchGetSubRequest* _this = reinterpret_cast< KvBatchGetSubRequest* >(object);
  (void)_this;
}
void KvBatchGetSubRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchGetSubRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchGetSubRequest& KvBatchGetSubRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchGetSubRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchGetSubRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchGetSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetSubRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchGetSubRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchGetSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchGetSubRequest)
  return target;
}

size_t KvBatchGetSubRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchGetSubRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchGetSubRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchGetSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetSubRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchGetSubRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchGetSubRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchGetSubRequest)
    MergeFrom(*source);
  }
}

void KvBatchGetSubRequest::MergeFrom(const KvBatchGetSubRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchGetSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void KvBatchGetSubRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchGetSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetSubRequest::CopyFrom(const KvBatchGetSubRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchGetSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetSubRequest::IsInitialized() const {
  return true;
}

void KvBatchGetSubRequest::InternalSwap(KvBatchGetSubRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetSubRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchGetResponse::InitAsDefaultInstance() {
  ::phxkv::_KvBatchGetResponse_default_instance_._instance.get_mutable()->submap_ = const_cast< ::phxkv::GroupsMapMsg*>(
      ::phxkv::GroupsMapMsg::internal_default_instance());
}
class KvBatchGetResponse::_Internal {
 public:
  static const ::phxkv::GroupsMapMsg& submap(const KvBatchGetResponse* msg);
};

const ::phxkv::GroupsMapMsg&
KvBatchGetResponse::_Internal::submap(const KvBatchGetResponse* msg) {
  return *msg->submap_;
}
KvBatchGetResponse::KvBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchGetResponse)
}
KvBatchGetResponse::KvBatchGetResponse(const KvBatchGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submap()) {
    submap_ = new ::phxkv::GroupsMapMsg(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchGetResponse)
}

void KvBatchGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchGetResponse_phxkv_2eproto.base);
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(ret_));
}

KvBatchGetResponse::~KvBatchGetResponse() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submap_;
}

void KvBatchGetResponse::ArenaDtor(void* object) {
  KvBatchGetResponse* _this = reinterpret_cast< KvBatchGetResponse* >(object);
  (void)_this;
}
void KvBatchGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchGetResponse& KvBatchGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchGetResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phxkv.KvBatchGetSubResponse values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .phxkv.GroupsMapMsg subMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // repeated .phxkv.KvBatchGetSubResponse values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // .phxkv.GroupsMapMsg subMap = 3;
  if (this->has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchGetResponse)
  return target;
}

size_t KvBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.KvBatchGetSubResponse values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .phxkv.GroupsMapMsg subMap = 3;
  if (this->has_submap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchGetResponse)
    MergeFrom(*source);
  }
}

void KvBatchGetResponse::MergeFrom(const KvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_submap()) {
    _internal_mutable_submap()->::phxkv::GroupsMapMsg::MergeFrom(from._internal_submap());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void KvBatchGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetResponse::CopyFrom(const KvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetResponse::IsInitialized() const {
  return true;
}

void KvBatchGetResponse::InternalSwap(KvBatchGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvBatchGetResponse, ret_)
      + sizeof(KvBatchGetResponse::ret_)
      - PROTOBUF_FIELD_OFFSET(KvBatchGetResponse, submap_)>(
          reinterpret_cast<char*>(&submap_),
          reinterpret_cast<char*>(&other->submap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvBatchGetSubResponse::InitAsDefaultInstance() {
}
class KvBatchGetSubResponse::_Internal {
 public:
};

KvBatchGetSubResponse::KvBatchGetSubResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KvBatchGetSubResponse)
}
KvBatchGetSubResponse::KvBatchGetSubResponse(const KvBatchGetSubResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:phxkv.KvBatchGetSubResponse)
}

void KvBatchGetSubResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvBatchGetSubResponse_phxkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

KvBatchGetSubResponse::~KvBatchGetSubResponse() {
  // @@protoc_insertion_point(destructor:phxkv.KvBatchGetSubResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvBatchGetSubResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KvBatchGetSubResponse::ArenaDtor(void* object) {
  KvBatchGetSubResponse* _this = reinterpret_cast< KvBatchGetSubResponse* >(object);
  (void)_this;
}
void KvBatchGetSubResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvBatchGetSubResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvBatchGetSubResponse& KvBatchGetSubResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvBatchGetSubResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KvBatchGetSubResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KvBatchGetSubResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetSubResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvBatchGetSubResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KvBatchGetSubResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KvBatchGetSubResponse)
  return target;
}

size_t KvBatchGetSubResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KvBatchGetSubResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvBatchGetSubResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KvBatchGetSubResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetSubResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvBatchGetSubResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KvBatchGetSubResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KvBatchGetSubResponse)
    MergeFrom(*source);
  }
}

void KvBatchGetSubResponse::MergeFrom(const KvBatchGetSubResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KvBatchGetSubResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void KvBatchGetSubResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KvBatchGetSubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetSubResponse::CopyFrom(const KvBatchGetSubResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KvBatchGetSubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetSubResponse::IsInitialized() const {
  return true;
}

void KvBatchGetSubResponse::InternalSwap(KvBatchGetSubResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetSubResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KVMessage::InitAsDefaultInstance() {
  ::phxkv::_KVMessage_default_instance_._instance.get_mutable()->putopt_ = const_cast< ::phxkv::KVOperator*>(
      ::phxkv::KVOperator::internal_default_instance());
  ::phxkv::_KVMessage_default_instance_._instance.get_mutable()->batchputopt_ = const_cast< ::phxkv::KvBatchPutRequest*>(
      ::phxkv::KvBatchPutRequest::internal_default_instance());
  ::phxkv::_KVMessage_default_instance_._instance.get_mutable()->requestopt_ = const_cast< ::phxkv::Request*>(
      ::phxkv::Request::internal_default_instance());
}
class KVMessage::_Internal {
 public:
  static const ::phxkv::KVOperator& putopt(const KVMessage* msg);
  static const ::phxkv::KvBatchPutRequest& batchputopt(const KVMessage* msg);
  static const ::phxkv::Request& requestopt(const KVMessage* msg);
};

const ::phxkv::KVOperator&
KVMessage::_Internal::putopt(const KVMessage* msg) {
  return *msg->putopt_;
}
const ::phxkv::KvBatchPutRequest&
KVMessage::_Internal::batchputopt(const KVMessage* msg) {
  return *msg->batchputopt_;
}
const ::phxkv::Request&
KVMessage::_Internal::requestopt(const KVMessage* msg) {
  return *msg->requestopt_;
}
KVMessage::KVMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.KVMessage)
}
KVMessage::KVMessage(const KVMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_putopt()) {
    putopt_ = new ::phxkv::KVOperator(*from.putopt_);
  } else {
    putopt_ = nullptr;
  }
  if (from._internal_has_batchputopt()) {
    batchputopt_ = new ::phxkv::KvBatchPutRequest(*from.batchputopt_);
  } else {
    batchputopt_ = nullptr;
  }
  if (from._internal_has_requestopt()) {
    requestopt_ = new ::phxkv::Request(*from.requestopt_);
  } else {
    requestopt_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:phxkv.KVMessage)
}

void KVMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KVMessage_phxkv_2eproto.base);
  ::memset(&putopt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&putopt_)) + sizeof(type_));
}

KVMessage::~KVMessage() {
  // @@protoc_insertion_point(destructor:phxkv.KVMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KVMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete putopt_;
  if (this != internal_default_instance()) delete batchputopt_;
  if (this != internal_default_instance()) delete requestopt_;
}

void KVMessage::ArenaDtor(void* object) {
  KVMessage* _this = reinterpret_cast< KVMessage* >(object);
  (void)_this;
}
void KVMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KVMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KVMessage& KVMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KVMessage_phxkv_2eproto.base);
  return *internal_default_instance();
}


void KVMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.KVMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && putopt_ != nullptr) {
    delete putopt_;
  }
  putopt_ = nullptr;
  if (GetArena() == nullptr && batchputopt_ != nullptr) {
    delete batchputopt_;
  }
  batchputopt_ = nullptr;
  if (GetArena() == nullptr && requestopt_ != nullptr) {
    delete requestopt_;
  }
  requestopt_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxkv.KVMessage.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::phxkv::KVMessage_Type>(val));
        } else goto handle_unusual;
        continue;
      // .phxkv.KVOperator PutOpt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_putopt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.KvBatchPutRequest BatchPutOpt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batchputopt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.Request RequestOpt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestopt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KVMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.KVMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxkv.KVMessage.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .phxkv.KVOperator PutOpt = 2;
  if (this->has_putopt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::putopt(this), target, stream);
  }

  // .phxkv.KvBatchPutRequest BatchPutOpt = 3;
  if (this->has_batchputopt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::batchputopt(this), target, stream);
  }

  // .phxkv.Request RequestOpt = 4;
  if (this->has_requestopt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::requestopt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.KVMessage)
  return target;
}

size_t KVMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.KVMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxkv.KVOperator PutOpt = 2;
  if (this->has_putopt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *putopt_);
  }

  // .phxkv.KvBatchPutRequest BatchPutOpt = 3;
  if (this->has_batchputopt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batchputopt_);
  }

  // .phxkv.Request RequestOpt = 4;
  if (this->has_requestopt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestopt_);
  }

  // .phxkv.KVMessage.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KVMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.KVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const KVMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KVMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.KVMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.KVMessage)
    MergeFrom(*source);
  }
}

void KVMessage::MergeFrom(const KVMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.KVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_putopt()) {
    _internal_mutable_putopt()->::phxkv::KVOperator::MergeFrom(from._internal_putopt());
  }
  if (from.has_batchputopt()) {
    _internal_mutable_batchputopt()->::phxkv::KvBatchPutRequest::MergeFrom(from._internal_batchputopt());
  }
  if (from.has_requestopt()) {
    _internal_mutable_requestopt()->::phxkv::Request::MergeFrom(from._internal_requestopt());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void KVMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.KVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVMessage::CopyFrom(const KVMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.KVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVMessage::IsInitialized() const {
  return true;
}

void KVMessage::InternalSwap(KVMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVMessage, type_)
      + sizeof(KVMessage::type_)
      - PROTOBUF_FIELD_OFFSET(KVMessage, putopt_)>(
          reinterpret_cast<char*>(&putopt_),
          reinterpret_cast<char*>(&other->putopt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::phxkv::_Request_default_instance_._instance.get_mutable()->hash_req_ = const_cast< ::phxkv::HashRequest*>(
      ::phxkv::HashRequest::internal_default_instance());
  ::phxkv::_Request_default_instance_._instance.get_mutable()->list_req_ = const_cast< ::phxkv::ListRequest*>(
      ::phxkv::ListRequest::internal_default_instance());
  ::phxkv::_Request_default_instance_._instance.get_mutable()->set_req_ = const_cast< ::phxkv::SetRequest*>(
      ::phxkv::SetRequest::internal_default_instance());
  ::phxkv::_Request_default_instance_._instance.get_mutable()->zset_req_ = const_cast< ::phxkv::ZsetRequest*>(
      ::phxkv::ZsetRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::phxkv::HashRequest& hash_req(const Request* msg);
  static const ::phxkv::ListRequest& list_req(const Request* msg);
  static const ::phxkv::SetRequest& set_req(const Request* msg);
  static const ::phxkv::ZsetRequest& zset_req(const Request* msg);
};

const ::phxkv::HashRequest&
Request::_Internal::hash_req(const Request* msg) {
  return *msg->hash_req_;
}
const ::phxkv::ListRequest&
Request::_Internal::list_req(const Request* msg) {
  return *msg->list_req_;
}
const ::phxkv::SetRequest&
Request::_Internal::set_req(const Request* msg) {
  return *msg->set_req_;
}
const ::phxkv::ZsetRequest&
Request::_Internal::zset_req(const Request* msg) {
  return *msg->zset_req_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  if (from._internal_has_hash_req()) {
    hash_req_ = new ::phxkv::HashRequest(*from.hash_req_);
  } else {
    hash_req_ = nullptr;
  }
  if (from._internal_has_list_req()) {
    list_req_ = new ::phxkv::ListRequest(*from.list_req_);
  } else {
    list_req_ = nullptr;
  }
  if (from._internal_has_set_req()) {
    set_req_ = new ::phxkv::SetRequest(*from.set_req_);
  } else {
    set_req_ = nullptr;
  }
  if (from._internal_has_zset_req()) {
    zset_req_ = new ::phxkv::ZsetRequest(*from.zset_req_);
  } else {
    zset_req_ = nullptr;
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:phxkv.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_phxkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&hash_req_)) + sizeof(ttl_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:phxkv.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hash_req_;
  if (this != internal_default_instance()) delete list_req_;
  if (this != internal_default_instance()) delete set_req_;
  if (this != internal_default_instance()) delete zset_req_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_phxkv_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hash_req_ != nullptr) {
    delete hash_req_;
  }
  hash_req_ = nullptr;
  if (GetArena() == nullptr && list_req_ != nullptr) {
    delete list_req_;
  }
  list_req_ = nullptr;
  if (GetArena() == nullptr && set_req_ != nullptr) {
    delete set_req_;
  }
  set_req_ = nullptr;
  if (GetArena() == nullptr && zset_req_ != nullptr) {
    delete zset_req_;
  }
  zset_req_ = nullptr;
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.Request.req_type data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::phxkv::Request_req_type>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.HashRequest hash_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.ListRequest list_req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.SetRequest set_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.ZsetRequest zset_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_zset_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 groupid = 1;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // .phxkv.Request.req_type data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // uint32 ttl = 4;
  if (this->ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ttl(), target);
  }

  // .phxkv.HashRequest hash_req = 5;
  if (this->has_hash_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hash_req(this), target, stream);
  }

  // .phxkv.ListRequest list_req = 6;
  if (this->has_list_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::list_req(this), target, stream);
  }

  // .phxkv.SetRequest set_req = 7;
  if (this->has_set_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::set_req(this), target, stream);
  }

  // .phxkv.ZsetRequest zset_req = 8;
  if (this->has_zset_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::zset_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .phxkv.HashRequest hash_req = 5;
  if (this->has_hash_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_req_);
  }

  // .phxkv.ListRequest list_req = 6;
  if (this->has_list_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_req_);
  }

  // .phxkv.SetRequest set_req = 7;
  if (this->has_set_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_req_);
  }

  // .phxkv.ZsetRequest zset_req = 8;
  if (this->has_zset_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zset_req_);
  }

  // uint32 groupid = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  // .phxkv.Request.req_type data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // uint32 ttl = 4;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_hash_req()) {
    _internal_mutable_hash_req()->::phxkv::HashRequest::MergeFrom(from._internal_hash_req());
  }
  if (from.has_list_req()) {
    _internal_mutable_list_req()->::phxkv::ListRequest::MergeFrom(from._internal_list_req());
  }
  if (from.has_set_req()) {
    _internal_mutable_set_req()->::phxkv::SetRequest::MergeFrom(from._internal_set_req());
  }
  if (from.has_zset_req()) {
    _internal_mutable_zset_req()->::phxkv::ZsetRequest::MergeFrom(from._internal_zset_req());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, ttl_)
      + sizeof(Request::ttl_)
      - PROTOBUF_FIELD_OFFSET(Request, hash_req_)>(
          reinterpret_cast<char*>(&hash_req_),
          reinterpret_cast<char*>(&other->hash_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashRequest::InitAsDefaultInstance() {
}
class HashRequest::_Internal {
 public:
};

HashRequest::HashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.HashRequest)
}
HashRequest::HashRequest(const HashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_type_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(req_type_));
  // @@protoc_insertion_point(copy_constructor:phxkv.HashRequest)
}

void HashRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashRequest_phxkv_2eproto.base);
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_type_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(req_type_));
}

HashRequest::~HashRequest() {
  // @@protoc_insertion_point(destructor:phxkv.HashRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HashRequest::ArenaDtor(void* object) {
  HashRequest* _this = reinterpret_cast< HashRequest* >(object);
  (void)_this;
}
void HashRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashRequest& HashRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void HashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.HashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_type_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(req_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phxkv.HashField field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phxkv.HashRequest.enum_req req_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::phxkv::HashRequest_enum_req>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.HashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phxkv.HashField field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  // int32 int_value = 2;
  if (this->int_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // float float_value = 3;
  if (!(this->float_value() <= 0 && this->float_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  // .phxkv.HashRequest.enum_req req_type = 4;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_req_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.HashRequest)
  return target;
}

size_t HashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.HashRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.HashField field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 int_value = 2;
  if (this->int_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_value());
  }

  // float float_value = 3;
  if (!(this->float_value() <= 0 && this->float_value() >= 0)) {
    total_size += 1 + 4;
  }

  // .phxkv.HashRequest.enum_req req_type = 4;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.HashRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.HashRequest)
    MergeFrom(*source);
  }
}

void HashRequest::MergeFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.int_value() != 0) {
    _internal_set_int_value(from._internal_int_value());
  }
  if (!(from.float_value() <= 0 && from.float_value() >= 0)) {
    _internal_set_float_value(from._internal_float_value());
  }
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
}

void HashRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRequest::CopyFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRequest::IsInitialized() const {
  return true;
}

void HashRequest::InternalSwap(HashRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashRequest, req_type_)
      + sizeof(HashRequest::req_type_)
      - PROTOBUF_FIELD_OFFSET(HashRequest, int_value_)>(
          reinterpret_cast<char*>(&int_value_),
          reinterpret_cast<char*>(&other->int_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashField::InitAsDefaultInstance() {
}
class HashField::_Internal {
 public:
};

HashField::HashField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.HashField)
}
HashField::HashField(const HashField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_key().empty()) {
    field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_key(),
      GetArena());
  }
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_value().empty()) {
    field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:phxkv.HashField)
}

void HashField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashField_phxkv_2eproto.base);
  field_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HashField::~HashField() {
  // @@protoc_insertion_point(destructor:phxkv.HashField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HashField::ArenaDtor(void* object) {
  HashField* _this = reinterpret_cast< HashField* >(object);
  (void)_this;
}
void HashField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashField& HashField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashField_phxkv_2eproto.base);
  return *internal_default_instance();
}


void HashField::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.HashField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes field_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes field_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.HashField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes field_key = 1;
  if (this->field_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_field_key(), target);
  }

  // bytes field_value = 2;
  if (this->field_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_field_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.HashField)
  return target;
}

size_t HashField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.HashField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes field_key = 1;
  if (this->field_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_key());
  }

  // bytes field_value = 2;
  if (this->field_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.HashField)
  GOOGLE_DCHECK_NE(&from, this);
  const HashField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.HashField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.HashField)
    MergeFrom(*source);
  }
}

void HashField::MergeFrom(const HashField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.HashField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_key().size() > 0) {
    _internal_set_field_key(from._internal_field_key());
  }
  if (from.field_value().size() > 0) {
    _internal_set_field_value(from._internal_field_value());
  }
}

void HashField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.HashField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashField::CopyFrom(const HashField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.HashField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashField::IsInitialized() const {
  return true;
}

void HashField::InternalSwap(HashField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_key_.Swap(&other->field_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_value_.Swap(&other->field_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HashField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::phxkv::_Response_default_instance_._instance.get_mutable()->submap_ = const_cast< ::phxkv::GroupsMapMsg*>(
      ::phxkv::GroupsMapMsg::internal_default_instance());
  ::phxkv::_Response_default_instance_._instance.get_mutable()->hash_response_ = const_cast< ::phxkv::HashResponse*>(
      ::phxkv::HashResponse::internal_default_instance());
  ::phxkv::_Response_default_instance_._instance.get_mutable()->list_response_ = const_cast< ::phxkv::ListResponse*>(
      ::phxkv::ListResponse::internal_default_instance());
  ::phxkv::_Response_default_instance_._instance.get_mutable()->set_response_ = const_cast< ::phxkv::SetResponse*>(
      ::phxkv::SetResponse::internal_default_instance());
  ::phxkv::_Response_default_instance_._instance.get_mutable()->zset_response_ = const_cast< ::phxkv::ZsetResponse*>(
      ::phxkv::ZsetResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::phxkv::GroupsMapMsg& submap(const Response* msg);
  static const ::phxkv::HashResponse& hash_response(const Response* msg);
  static const ::phxkv::ListResponse& list_response(const Response* msg);
  static const ::phxkv::SetResponse& set_response(const Response* msg);
  static const ::phxkv::ZsetResponse& zset_response(const Response* msg);
};

const ::phxkv::GroupsMapMsg&
Response::_Internal::submap(const Response* msg) {
  return *msg->submap_;
}
const ::phxkv::HashResponse&
Response::_Internal::hash_response(const Response* msg) {
  return *msg->hash_response_;
}
const ::phxkv::ListResponse&
Response::_Internal::list_response(const Response* msg) {
  return *msg->list_response_;
}
const ::phxkv::SetResponse&
Response::_Internal::set_response(const Response* msg) {
  return *msg->set_response_;
}
const ::phxkv::ZsetResponse&
Response::_Internal::zset_response(const Response* msg) {
  return *msg->zset_response_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ret_message().empty()) {
    ret_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ret_message(),
      GetArena());
  }
  if (from._internal_has_submap()) {
    submap_ = new ::phxkv::GroupsMapMsg(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  if (from._internal_has_hash_response()) {
    hash_response_ = new ::phxkv::HashResponse(*from.hash_response_);
  } else {
    hash_response_ = nullptr;
  }
  if (from._internal_has_list_response()) {
    list_response_ = new ::phxkv::ListResponse(*from.list_response_);
  } else {
    list_response_ = nullptr;
  }
  if (from._internal_has_set_response()) {
    set_response_ = new ::phxkv::SetResponse(*from.set_response_);
  } else {
    set_response_ = nullptr;
  }
  if (from._internal_has_zset_response()) {
    zset_response_ = new ::phxkv::ZsetResponse(*from.zset_response_);
  } else {
    zset_response_ = nullptr;
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:phxkv.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_phxkv_2eproto.base);
  ret_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(data_type_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:phxkv.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ret_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete hash_response_;
  if (this != internal_default_instance()) delete list_response_;
  if (this != internal_default_instance()) delete set_response_;
  if (this != internal_default_instance()) delete zset_response_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_phxkv_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  if (GetArena() == nullptr && hash_response_ != nullptr) {
    delete hash_response_;
  }
  hash_response_ = nullptr;
  if (GetArena() == nullptr && list_response_ != nullptr) {
    delete list_response_;
  }
  list_response_ = nullptr;
  if (GetArena() == nullptr && set_response_ != nullptr) {
    delete set_response_;
  }
  set_response_ = nullptr;
  if (GetArena() == nullptr && zset_response_ != nullptr) {
    delete zset_response_;
  }
  zset_response_ = nullptr;
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxkv.Response.enum_code ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ret_code(static_cast<::phxkv::Response_enum_code>(val));
        } else goto handle_unusual;
        continue;
      // bytes ret_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ret_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.Response.response_type data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::phxkv::Response_response_type>(val));
        } else goto handle_unusual;
        continue;
      // .phxkv.GroupsMapMsg subMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.HashResponse hash_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.ListResponse list_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.SetResponse set_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxkv.ZsetResponse zset_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_zset_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxkv.Response.enum_code ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ret_code(), target);
  }

  // bytes ret_message = 2;
  if (this->ret_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ret_message(), target);
  }

  // uint64 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_length(), target);
  }

  // bool exist = 4;
  if (this->exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_exist(), target);
  }

  // .phxkv.Response.response_type data_type = 5;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_type(), target);
  }

  // .phxkv.GroupsMapMsg subMap = 6;
  if (this->has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::submap(this), target, stream);
  }

  // .phxkv.HashResponse hash_response = 7;
  if (this->has_hash_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hash_response(this), target, stream);
  }

  // .phxkv.ListResponse list_response = 8;
  if (this->has_list_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::list_response(this), target, stream);
  }

  // .phxkv.SetResponse set_response = 9;
  if (this->has_set_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::set_response(this), target, stream);
  }

  // .phxkv.ZsetResponse zset_response = 10;
  if (this->has_zset_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::zset_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ret_message = 2;
  if (this->ret_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ret_message());
  }

  // .phxkv.GroupsMapMsg subMap = 6;
  if (this->has_submap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // .phxkv.HashResponse hash_response = 7;
  if (this->has_hash_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_response_);
  }

  // .phxkv.ListResponse list_response = 8;
  if (this->has_list_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_response_);
  }

  // .phxkv.SetResponse set_response = 9;
  if (this->has_set_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_response_);
  }

  // .phxkv.ZsetResponse zset_response = 10;
  if (this->has_zset_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zset_response_);
  }

  // .phxkv.Response.enum_code ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ret_code());
  }

  // bool exist = 4;
  if (this->exist() != 0) {
    total_size += 1 + 1;
  }

  // uint64 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  // .phxkv.Response.response_type data_type = 5;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret_message().size() > 0) {
    _internal_set_ret_message(from._internal_ret_message());
  }
  if (from.has_submap()) {
    _internal_mutable_submap()->::phxkv::GroupsMapMsg::MergeFrom(from._internal_submap());
  }
  if (from.has_hash_response()) {
    _internal_mutable_hash_response()->::phxkv::HashResponse::MergeFrom(from._internal_hash_response());
  }
  if (from.has_list_response()) {
    _internal_mutable_list_response()->::phxkv::ListResponse::MergeFrom(from._internal_list_response());
  }
  if (from.has_set_response()) {
    _internal_mutable_set_response()->::phxkv::SetResponse::MergeFrom(from._internal_set_response());
  }
  if (from.has_zset_response()) {
    _internal_mutable_zset_response()->::phxkv::ZsetResponse::MergeFrom(from._internal_zset_response());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ret_message_.Swap(&other->ret_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, data_type_)
      + sizeof(Response::data_type_)
      - PROTOBUF_FIELD_OFFSET(Response, submap_)>(
          reinterpret_cast<char*>(&submap_),
          reinterpret_cast<char*>(&other->submap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashResponse::InitAsDefaultInstance() {
}
class HashResponse::_Internal {
 public:
};

HashResponse::HashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.HashResponse)
}
HashResponse::HashResponse(const HashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phxkv.HashResponse)
}

void HashResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashResponse_phxkv_2eproto.base);
}

HashResponse::~HashResponse() {
  // @@protoc_insertion_point(destructor:phxkv.HashResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HashResponse::ArenaDtor(void* object) {
  HashResponse* _this = reinterpret_cast< HashResponse* >(object);
  (void)_this;
}
void HashResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashResponse& HashResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void HashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.HashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phxkv.HashField field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.HashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phxkv.HashField field = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.HashResponse)
  return target;
}

size_t HashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.HashResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.HashField field = 4;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HashResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.HashResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.HashResponse)
    MergeFrom(*source);
  }
}

void HashResponse::MergeFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void HashResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashResponse::CopyFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashResponse::IsInitialized() const {
  return true;
}

void HashResponse::InternalSwap(HashResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRequest::InitAsDefaultInstance() {
}
class ListRequest::_Internal {
 public:
};

ListRequest::ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.ListRequest)
}
ListRequest::ListRequest(const ListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pivot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot().empty()) {
    pivot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot(),
      GetArena());
  }
  src_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_list().empty()) {
    src_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_list(),
      GetArena());
  }
  ::memcpy(&req_type_, &from.req_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_flag_) -
    reinterpret_cast<char*>(&req_type_)) + sizeof(pos_flag_));
  // @@protoc_insertion_point(copy_constructor:phxkv.ListRequest)
}

void ListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRequest_phxkv_2eproto.base);
  pivot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_flag_) -
      reinterpret_cast<char*>(&req_type_)) + sizeof(pos_flag_));
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:phxkv.ListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pivot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRequest::ArenaDtor(void* object) {
  ListRequest* _this = reinterpret_cast< ListRequest* >(object);
  (void)_this;
}
void ListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRequest& ListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void ListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.ListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  pivot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_list_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&req_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_flag_) -
      reinterpret_cast<char*>(&req_type_)) + sizeof(pos_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxkv.ListRequest.enum_req req_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::phxkv::ListRequest_enum_req>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pos_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pivot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pivot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes src_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_src_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.ListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxkv.ListRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_req_type(), target);
  }

  // repeated bytes field = 2;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // int32 end = 4;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  // int32 index = 5;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  // int32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_count(), target);
  }

  // int32 pos_flag = 7;
  if (this->pos_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_pos_flag(), target);
  }

  // bytes pivot = 8;
  if (this->pivot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_pivot(), target);
  }

  // bytes src_list = 9;
  if (this->src_list().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_src_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.ListRequest)
  return target;
}

size_t ListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.ListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  // bytes pivot = 8;
  if (this->pivot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pivot());
  }

  // bytes src_list = 9;
  if (this->src_list().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_list());
  }

  // .phxkv.ListRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  // int32 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 pos_flag = 7;
  if (this->pos_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.ListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.ListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.ListRequest)
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.ListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.pivot().size() > 0) {
    _internal_set_pivot(from._internal_pivot());
  }
  if (from.src_list().size() > 0) {
    _internal_set_src_list(from._internal_src_list());
  }
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.pos_flag() != 0) {
    _internal_set_pos_flag(from._internal_pos_flag());
  }
}

void ListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.ListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.ListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  return true;
}

void ListRequest::InternalSwap(ListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  pivot_.Swap(&other->pivot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_list_.Swap(&other->src_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListRequest, pos_flag_)
      + sizeof(ListRequest::pos_flag_)
      - PROTOBUF_FIELD_OFFSET(ListRequest, req_type_)>(
          reinterpret_cast<char*>(&req_type_),
          reinterpret_cast<char*>(&other->req_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListResponse::InitAsDefaultInstance() {
}
class ListResponse::_Internal {
 public:
};

ListResponse::ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.ListResponse)
}
ListResponse::ListResponse(const ListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phxkv.ListResponse)
}

void ListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListResponse_phxkv_2eproto.base);
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:phxkv.ListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListResponse::ArenaDtor(void* object) {
  ListResponse* _this = reinterpret_cast< ListResponse* >(object);
  (void)_this;
}
void ListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListResponse& ListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.ListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.ListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes field = 1;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.ListResponse)
  return target;
}

size_t ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.ListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.ListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.ListResponse)
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void ListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  return true;
}

void ListResponse::InternalSwap(ListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRequest::InitAsDefaultInstance() {
}
class SetRequest::_Internal {
 public:
};

SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena),
  src_set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_),
      src_set_(from.src_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_type_ = from.req_type_;
  // @@protoc_insertion_point(copy_constructor:phxkv.SetRequest)
}

void SetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRequest_phxkv_2eproto.base);
  req_type_ = 0;
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:phxkv.SetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRequest::ArenaDtor(void* object) {
  SetRequest* _this = reinterpret_cast< SetRequest* >(object);
  (void)_this;
}
void SetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRequest& SetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  src_set_.Clear();
  req_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxkv.SetRequest.enum_req req_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::phxkv::SetRequest_enum_req>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes src_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_src_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxkv.SetRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_req_type(), target);
  }

  // repeated bytes field = 2;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes src_set = 3;
  for (int i = 0, n = this->_internal_src_set_size(); i < n; i++) {
    const auto& s = this->_internal_src_set(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.SetRequest)
  return target;
}

size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.SetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  // repeated bytes src_set = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(src_set_.size());
  for (int i = 0, n = src_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      src_set_.Get(i));
  }

  // .phxkv.SetRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.SetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.SetRequest)
    MergeFrom(*source);
  }
}

void SetRequest::MergeFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  src_set_.MergeFrom(from.src_set_);
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
}

void SetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  src_set_.InternalSwap(&other->src_set_);
  swap(req_type_, other->req_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetResponse::InitAsDefaultInstance() {
}
class SetResponse::_Internal {
 public:
};

SetResponse::SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.SetResponse)
}
SetResponse::SetResponse(const SetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phxkv.SetResponse)
}

void SetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResponse_phxkv_2eproto.base);
}

SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:phxkv.SetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResponse::ArenaDtor(void* object) {
  SetResponse* _this = reinterpret_cast< SetResponse* >(object);
  (void)_this;
}
void SetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResponse& SetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes field = 1;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.SetResponse)
  return target;
}

size_t SetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.SetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.SetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.SetResponse)
    MergeFrom(*source);
  }
}

void SetResponse::MergeFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void SetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResponse::IsInitialized() const {
  return true;
}

void SetResponse::InternalSwap(SetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZsetRequest::InitAsDefaultInstance() {
}
class ZsetRequest::_Internal {
 public:
};

ZsetRequest::ZsetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_key_(arena),
  field_score_(arena),
  src_set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.ZsetRequest)
}
ZsetRequest::ZsetRequest(const ZsetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_key_(from.field_key_),
      field_score_(from.field_score_),
      src_set_(from.src_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_type_) -
    reinterpret_cast<char*>(&min_)) + sizeof(req_type_));
  // @@protoc_insertion_point(copy_constructor:phxkv.ZsetRequest)
}

void ZsetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZsetRequest_phxkv_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_type_) -
      reinterpret_cast<char*>(&min_)) + sizeof(req_type_));
}

ZsetRequest::~ZsetRequest() {
  // @@protoc_insertion_point(destructor:phxkv.ZsetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZsetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZsetRequest::ArenaDtor(void* object) {
  ZsetRequest* _this = reinterpret_cast< ZsetRequest* >(object);
  (void)_this;
}
void ZsetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZsetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZsetRequest& ZsetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZsetRequest_phxkv_2eproto.base);
  return *internal_default_instance();
}


void ZsetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.ZsetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_key_.Clear();
  field_score_.Clear();
  src_set_.Clear();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_type_) -
      reinterpret_cast<char*>(&min_)) + sizeof(req_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZsetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxkv.ZsetRequest.enum_req req_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::phxkv::ZsetRequest_enum_req>(val));
        } else goto handle_unusual;
        continue;
      // repeated .phxkv.ZsetField field_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .phxkv.ZsetField field_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_score(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 incrscore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          incrscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes src_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_src_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 start_pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          end_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZsetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.ZsetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxkv.ZsetRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_req_type(), target);
  }

  // repeated .phxkv.ZsetField field_key = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field_key(i), target, stream);
  }

  // repeated .phxkv.ZsetField field_score = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_score_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_field_score(i), target, stream);
  }

  // int64 min = 4;
  if (this->min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_min(), target);
  }

  // int64 max = 5;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max(), target);
  }

  // int64 incrscore = 6;
  if (this->incrscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_incrscore(), target);
  }

  // repeated bytes src_set = 7;
  for (int i = 0, n = this->_internal_src_set_size(); i < n; i++) {
    const auto& s = this->_internal_src_set(i);
    target = stream->WriteBytes(7, s, target);
  }

  // int64 start_pos = 8;
  if (this->start_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_start_pos(), target);
  }

  // int64 end_pos = 9;
  if (this->end_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_end_pos(), target);
  }

  // int64 offset = 10;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_offset(), target);
  }

  // int64 count = 11;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.ZsetRequest)
  return target;
}

size_t ZsetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.ZsetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.ZsetField field_key = 2;
  total_size += 1UL * this->_internal_field_key_size();
  for (const auto& msg : this->field_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .phxkv.ZsetField field_score = 3;
  total_size += 1UL * this->_internal_field_score_size();
  for (const auto& msg : this->field_score_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes src_set = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(src_set_.size());
  for (int i = 0, n = src_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      src_set_.Get(i));
  }

  // int64 min = 4;
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min());
  }

  // int64 max = 5;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max());
  }

  // int64 incrscore = 6;
  if (this->incrscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_incrscore());
  }

  // int64 start_pos = 8;
  if (this->start_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_pos());
  }

  // int64 end_pos = 9;
  if (this->end_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_pos());
  }

  // int64 offset = 10;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 count = 11;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // .phxkv.ZsetRequest.enum_req req_type = 1;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZsetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.ZsetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ZsetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZsetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.ZsetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.ZsetRequest)
    MergeFrom(*source);
  }
}

void ZsetRequest::MergeFrom(const ZsetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.ZsetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_key_.MergeFrom(from.field_key_);
  field_score_.MergeFrom(from.field_score_);
  src_set_.MergeFrom(from.src_set_);
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.incrscore() != 0) {
    _internal_set_incrscore(from._internal_incrscore());
  }
  if (from.start_pos() != 0) {
    _internal_set_start_pos(from._internal_start_pos());
  }
  if (from.end_pos() != 0) {
    _internal_set_end_pos(from._internal_end_pos());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
}

void ZsetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.ZsetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZsetRequest::CopyFrom(const ZsetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.ZsetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZsetRequest::IsInitialized() const {
  return true;
}

void ZsetRequest::InternalSwap(ZsetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_key_.InternalSwap(&other->field_key_);
  field_score_.InternalSwap(&other->field_score_);
  src_set_.InternalSwap(&other->src_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZsetRequest, req_type_)
      + sizeof(ZsetRequest::req_type_)
      - PROTOBUF_FIELD_OFFSET(ZsetRequest, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZsetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZsetField::InitAsDefaultInstance() {
}
class ZsetField::_Internal {
 public:
};

ZsetField::ZsetField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.ZsetField)
}
ZsetField::ZsetField(const ZsetField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_key().empty()) {
    field_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_key(),
      GetArena());
  }
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_value().empty()) {
    field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:phxkv.ZsetField)
}

void ZsetField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZsetField_phxkv_2eproto.base);
  field_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ZsetField::~ZsetField() {
  // @@protoc_insertion_point(destructor:phxkv.ZsetField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZsetField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZsetField::ArenaDtor(void* object) {
  ZsetField* _this = reinterpret_cast< ZsetField* >(object);
  (void)_this;
}
void ZsetField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZsetField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZsetField& ZsetField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZsetField_phxkv_2eproto.base);
  return *internal_default_instance();
}


void ZsetField::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.ZsetField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZsetField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes field_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes field_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZsetField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.ZsetField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes field_key = 1;
  if (this->field_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_field_key(), target);
  }

  // bytes field_value = 2;
  if (this->field_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_field_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.ZsetField)
  return target;
}

size_t ZsetField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.ZsetField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes field_key = 1;
  if (this->field_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_key());
  }

  // bytes field_value = 2;
  if (this->field_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZsetField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.ZsetField)
  GOOGLE_DCHECK_NE(&from, this);
  const ZsetField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZsetField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.ZsetField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.ZsetField)
    MergeFrom(*source);
  }
}

void ZsetField::MergeFrom(const ZsetField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.ZsetField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_key().size() > 0) {
    _internal_set_field_key(from._internal_field_key());
  }
  if (from.field_value().size() > 0) {
    _internal_set_field_value(from._internal_field_value());
  }
}

void ZsetField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.ZsetField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZsetField::CopyFrom(const ZsetField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.ZsetField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZsetField::IsInitialized() const {
  return true;
}

void ZsetField::InternalSwap(ZsetField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_key_.Swap(&other->field_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_value_.Swap(&other->field_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ZsetField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZsetResponse::InitAsDefaultInstance() {
}
class ZsetResponse::_Internal {
 public:
};

ZsetResponse::ZsetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxkv.ZsetResponse)
}
ZsetResponse::ZsetResponse(const ZsetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mem_rank_, &from.mem_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_score_) -
    reinterpret_cast<char*>(&mem_rank_)) + sizeof(mem_score_));
  // @@protoc_insertion_point(copy_constructor:phxkv.ZsetResponse)
}

void ZsetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZsetResponse_phxkv_2eproto.base);
  ::memset(&mem_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_score_) -
      reinterpret_cast<char*>(&mem_rank_)) + sizeof(mem_score_));
}

ZsetResponse::~ZsetResponse() {
  // @@protoc_insertion_point(destructor:phxkv.ZsetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZsetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZsetResponse::ArenaDtor(void* object) {
  ZsetResponse* _this = reinterpret_cast< ZsetResponse* >(object);
  (void)_this;
}
void ZsetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZsetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZsetResponse& ZsetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZsetResponse_phxkv_2eproto.base);
  return *internal_default_instance();
}


void ZsetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:phxkv.ZsetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  ::memset(&mem_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_score_) -
      reinterpret_cast<char*>(&mem_rank_)) + sizeof(mem_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZsetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phxkv.ZsetField field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 mem_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mem_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mem_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZsetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxkv.ZsetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phxkv.ZsetField field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  // int64 mem_rank = 2;
  if (this->mem_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mem_rank(), target);
  }

  // int64 mem_score = 3;
  if (this->mem_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_mem_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxkv.ZsetResponse)
  return target;
}

size_t ZsetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxkv.ZsetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxkv.ZsetField field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 mem_rank = 2;
  if (this->mem_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem_rank());
  }

  // int64 mem_score = 3;
  if (this->mem_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZsetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxkv.ZsetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ZsetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZsetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxkv.ZsetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxkv.ZsetResponse)
    MergeFrom(*source);
  }
}

void ZsetResponse::MergeFrom(const ZsetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxkv.ZsetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.mem_rank() != 0) {
    _internal_set_mem_rank(from._internal_mem_rank());
  }
  if (from.mem_score() != 0) {
    _internal_set_mem_score(from._internal_mem_score());
  }
}

void ZsetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxkv.ZsetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZsetResponse::CopyFrom(const ZsetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxkv.ZsetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZsetResponse::IsInitialized() const {
  return true;
}

void ZsetResponse::InternalSwap(ZsetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZsetResponse, mem_score_)
      + sizeof(ZsetResponse::mem_score_)
      - PROTOBUF_FIELD_OFFSET(ZsetResponse, mem_rank_)>(
          reinterpret_cast<char*>(&mem_rank_),
          reinterpret_cast<char*>(&other->mem_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZsetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace phxkv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phxkv::DropMastReq* Arena::CreateMaybeMessage< ::phxkv::DropMastReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::DropMastReq >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::DropMastRes* Arena::CreateMaybeMessage< ::phxkv::DropMastRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::DropMastRes >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::BemasterReq* Arena::CreateMaybeMessage< ::phxkv::BemasterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::BemasterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::BemasterRes* Arena::CreateMaybeMessage< ::phxkv::BemasterRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::BemasterRes >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::GroupListReq* Arena::CreateMaybeMessage< ::phxkv::GroupListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::GroupListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::GroupListRes* Arena::CreateMaybeMessage< ::phxkv::GroupListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::GroupListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KVOperator* Arena::CreateMaybeMessage< ::phxkv::KVOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KVOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KVResponse* Arena::CreateMaybeMessage< ::phxkv::KVResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KVResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::GroupsMapMsg* Arena::CreateMaybeMessage< ::phxkv::GroupsMapMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::GroupsMapMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::GroupMsg* Arena::CreateMaybeMessage< ::phxkv::GroupMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::GroupMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchPutRequest* Arena::CreateMaybeMessage< ::phxkv::KvBatchPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchPutSubRequest* Arena::CreateMaybeMessage< ::phxkv::KvBatchPutSubRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchPutSubRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchPutResponse* Arena::CreateMaybeMessage< ::phxkv::KvBatchPutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchGetRequest* Arena::CreateMaybeMessage< ::phxkv::KvBatchGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchGetSubRequest* Arena::CreateMaybeMessage< ::phxkv::KvBatchGetSubRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchGetSubRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchGetResponse* Arena::CreateMaybeMessage< ::phxkv::KvBatchGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KvBatchGetSubResponse* Arena::CreateMaybeMessage< ::phxkv::KvBatchGetSubResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KvBatchGetSubResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::KVMessage* Arena::CreateMaybeMessage< ::phxkv::KVMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::KVMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::Request* Arena::CreateMaybeMessage< ::phxkv::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::HashRequest* Arena::CreateMaybeMessage< ::phxkv::HashRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::HashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::HashField* Arena::CreateMaybeMessage< ::phxkv::HashField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::HashField >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::Response* Arena::CreateMaybeMessage< ::phxkv::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::HashResponse* Arena::CreateMaybeMessage< ::phxkv::HashResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::HashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::ListRequest* Arena::CreateMaybeMessage< ::phxkv::ListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::ListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::ListResponse* Arena::CreateMaybeMessage< ::phxkv::ListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::SetRequest* Arena::CreateMaybeMessage< ::phxkv::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::SetResponse* Arena::CreateMaybeMessage< ::phxkv::SetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::SetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::ZsetRequest* Arena::CreateMaybeMessage< ::phxkv::ZsetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::ZsetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::ZsetField* Arena::CreateMaybeMessage< ::phxkv::ZsetField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::ZsetField >(arena);
}
template<> PROTOBUF_NOINLINE ::phxkv::ZsetResponse* Arena::CreateMaybeMessage< ::phxkv::ZsetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxkv::ZsetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
